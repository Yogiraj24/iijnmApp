/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.dao;

import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;

public interface OpportunitiesDao
{
	/** 
	 * Inserts a new row in the opportunities table.
	 */
	public OpportunitiesPk insert(Opportunities dto) throws OpportunitiesDaoException;

	/** 
	 * Updates a single row in the opportunities table.
	 */
	public void update(OpportunitiesPk pk, Opportunities dto) throws OpportunitiesDaoException;

	/** 
	 * Deletes a single row in the opportunities table.
	 */
	public void delete(OpportunitiesPk pk) throws OpportunitiesDaoException;

	/** 
	 * Returns the rows from the opportunities table that matches the specified primary-key value.
	 */
	public Opportunities findByPrimaryKey(OpportunitiesPk pk) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'id = :id'.
	 */
	public Opportunities findByPrimaryKey(int id) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria ''.
	 */
	public Opportunities[] findAll() throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Opportunities[] findBySubmissionForm(int supplierId) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'id = :id'.
	 */
	public Opportunities[] findWhereIdEquals(int id) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Opportunities[] findWhereSupplierIdEquals(int supplierId) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'unique_products = :uniqueProducts'.
	 */
	public Opportunities[] findWhereUniqueProductsEquals(String uniqueProducts) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'portfolio = :portfolio'.
	 */
	public Opportunities[] findWherePortfolioEquals(String portfolio) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'recongnisation = :recongnisation'.
	 */
	public Opportunities[] findWhereRecongnisationEquals(String recongnisation) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'key_words = :keyWords'.
	 */
	public Opportunities[] findWhereKeyWordsEquals(String keyWords) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'date_creation = :dateCreation'.
	 */
	public Opportunities[] findWhereDateCreationEquals(Date dateCreation) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the criteria 'date_modification = :dateModification'.
	 */
	public Opportunities[] findWhereDateModificationEquals(Date dateModification) throws OpportunitiesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the opportunities table that match the specified arbitrary SQL statement
	 */
	public Opportunities[] findByDynamicSelect(String sql, Object[] sqlParams) throws OpportunitiesDaoException;

	/** 
	 * Returns all rows from the opportunities table that match the specified arbitrary SQL statement
	 */
	public Opportunities[] findByDynamicWhere(String sql, Object[] sqlParams) throws OpportunitiesDaoException;

}
