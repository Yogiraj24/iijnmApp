/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.dao;

import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;

public interface ProcessrecordDao
{
	/** 
	 * Inserts a new row in the processrecord table.
	 */
	public ProcessrecordPk insert(Processrecord dto) throws ProcessrecordDaoException;

	/** 
	 * Updates a single row in the processrecord table.
	 */
	public void update(ProcessrecordPk pk, Processrecord dto) throws ProcessrecordDaoException;

	/** 
	 * Deletes a single row in the processrecord table.
	 */
	public void delete(ProcessrecordPk pk) throws ProcessrecordDaoException;

	/** 
	 * Returns the rows from the processrecord table that matches the specified primary-key value.
	 */
	public Processrecord findByPrimaryKey(ProcessrecordPk pk) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'id = :id'.
	 */
	public Processrecord findByPrimaryKey(int id) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria ''.
	 */
	public Processrecord[] findAll() throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Processrecord[] findBySubmissionForm(int supplierId) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'id = :id'.
	 */
	public Processrecord[] findWhereIdEquals(int id) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Processrecord[] findWhereSupplierIdEquals(int supplierId) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'yesno = :yesno'.
	 */
	public Processrecord[] findWhereYesnoEquals(String yesno) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'date = :date'.
	 */
	public Processrecord[] findWhereDateEquals(Date date) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'done_by = :doneBy'.
	 */
	public Processrecord[] findWhereDoneByEquals(String doneBy) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'bus_unit_contact = :busUnitContact'.
	 */
	public Processrecord[] findWhereBusUnitContactEquals(String busUnitContact) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'date_created = :dateCreated'.
	 */
	public Processrecord[] findWhereDateCreatedEquals(Date dateCreated) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'date_modifed = :dateModifed'.
	 */
	public Processrecord[] findWhereDateModifedEquals(Date dateModifed) throws ProcessrecordDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the processrecord table that match the specified arbitrary SQL statement
	 */
	public Processrecord[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProcessrecordDaoException;

	/** 
	 * Returns all rows from the processrecord table that match the specified arbitrary SQL statement
	 */
	public Processrecord[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProcessrecordDaoException;

}
