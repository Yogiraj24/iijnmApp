/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.jdbc;

import com.hp.supplier.dao.*;
import com.hp.supplier.factory.*;
import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class BusinessInfoDaoImpl extends AbstractDAO implements BusinessInfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, supplier_id, uk, eec, non_eec, disabled_per, women_per, company_name, address_line1, adderss_line2, city, country, postal_code, web_site, contact_name, title, phone, email, duns_number, company_reg_number, is_academic, is_charity, org_established, annual_gross, net_worth, is_single_emp, is_micro_emp, is_small_emp, is_medium_emp, is_large_emp, is_profitable, trade_electronically, accept_electronic, broad_band, is_public_limited, is_limited, subsidiary, is_franchise, is_general_partnership, is_limited_partnership, is_propritory, is_reg_charity, is_academic_institute, date_created, date_modified FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, supplier_id, uk, eec, non_eec, disabled_per, women_per, company_name, address_line1, adderss_line2, city, country, postal_code, web_site, contact_name, title, phone, email, duns_number, company_reg_number, is_academic, is_charity, org_established, annual_gross, net_worth, is_single_emp, is_micro_emp, is_small_emp, is_medium_emp, is_large_emp, is_profitable, trade_electronically, accept_electronic, broad_band, is_public_limited, is_limited, subsidiary, is_franchise, is_general_partnership, is_limited_partnership, is_propritory, is_reg_charity, is_academic_institute, date_created, date_modified ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, supplier_id = ?, uk = ?, eec = ?, non_eec = ?, disabled_per = ?, women_per = ?, company_name = ?, address_line1 = ?, adderss_line2 = ?, city = ?, country = ?, postal_code = ?, web_site = ?, contact_name = ?, title = ?, phone = ?, email = ?, duns_number = ?, company_reg_number = ?, is_academic = ?, is_charity = ?, org_established = ?, annual_gross = ?, net_worth = ?, is_single_emp = ?, is_micro_emp = ?, is_small_emp = ?, is_medium_emp = ?, is_large_emp = ?, is_profitable = ?, trade_electronically = ?, accept_electronic = ?, broad_band = ?, is_public_limited = ?, is_limited = ?, subsidiary = ?, is_franchise = ?, is_general_partnership = ?, is_limited_partnership = ?, is_propritory = ?, is_reg_charity = ?, is_academic_institute = ?, date_created = ?, date_modified = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column supplier_id
	 */
	protected static final int COLUMN_SUPPLIER_ID = 2;

	/** 
	 * Index of column uk
	 */
	protected static final int COLUMN_UK = 3;

	/** 
	 * Index of column eec
	 */
	protected static final int COLUMN_EEC = 4;

	/** 
	 * Index of column non_eec
	 */
	protected static final int COLUMN_NON_EEC = 5;

	/** 
	 * Index of column disabled_per
	 */
	protected static final int COLUMN_DISABLED_PER = 6;

	/** 
	 * Index of column women_per
	 */
	protected static final int COLUMN_WOMEN_PER = 7;

	/** 
	 * Index of column company_name
	 */
	protected static final int COLUMN_COMPANY_NAME = 8;

	/** 
	 * Index of column address_line1
	 */
	protected static final int COLUMN_ADDRESS_LINE1 = 9;

	/** 
	 * Index of column adderss_line2
	 */
	protected static final int COLUMN_ADDERSS_LINE2 = 10;

	/** 
	 * Index of column city
	 */
	protected static final int COLUMN_CITY = 11;

	/** 
	 * Index of column country
	 */
	protected static final int COLUMN_COUNTRY = 12;

	/** 
	 * Index of column postal_code
	 */
	protected static final int COLUMN_POSTAL_CODE = 13;

	/** 
	 * Index of column web_site
	 */
	protected static final int COLUMN_WEB_SITE = 14;

	/** 
	 * Index of column contact_name
	 */
	protected static final int COLUMN_CONTACT_NAME = 15;

	/** 
	 * Index of column title
	 */
	protected static final int COLUMN_TITLE = 16;

	/** 
	 * Index of column phone
	 */
	protected static final int COLUMN_PHONE = 17;

	/** 
	 * Index of column email
	 */
	protected static final int COLUMN_EMAIL = 18;

	/** 
	 * Index of column duns_number
	 */
	protected static final int COLUMN_DUNS_NUMBER = 19;

	/** 
	 * Index of column company_reg_number
	 */
	protected static final int COLUMN_COMPANY_REG_NUMBER = 20;

	/** 
	 * Index of column is_academic
	 */
	protected static final int COLUMN_IS_ACADEMIC = 21;

	/** 
	 * Index of column is_charity
	 */
	protected static final int COLUMN_IS_CHARITY = 22;

	/** 
	 * Index of column org_established
	 */
	protected static final int COLUMN_ORG_ESTABLISHED = 23;

	/** 
	 * Index of column annual_gross
	 */
	protected static final int COLUMN_ANNUAL_GROSS = 24;

	/** 
	 * Index of column net_worth
	 */
	protected static final int COLUMN_NET_WORTH = 25;

	/** 
	 * Index of column is_single_emp
	 */
	protected static final int COLUMN_IS_SINGLE_EMP = 26;

	/** 
	 * Index of column is_micro_emp
	 */
	protected static final int COLUMN_IS_MICRO_EMP = 27;

	/** 
	 * Index of column is_small_emp
	 */
	protected static final int COLUMN_IS_SMALL_EMP = 28;

	/** 
	 * Index of column is_medium_emp
	 */
	protected static final int COLUMN_IS_MEDIUM_EMP = 29;

	/** 
	 * Index of column is_large_emp
	 */
	protected static final int COLUMN_IS_LARGE_EMP = 30;

	/** 
	 * Index of column is_profitable
	 */
	protected static final int COLUMN_IS_PROFITABLE = 31;

	/** 
	 * Index of column trade_electronically
	 */
	protected static final int COLUMN_TRADE_ELECTRONICALLY = 32;

	/** 
	 * Index of column accept_electronic
	 */
	protected static final int COLUMN_ACCEPT_ELECTRONIC = 33;

	/** 
	 * Index of column broad_band
	 */
	protected static final int COLUMN_BROAD_BAND = 34;

	/** 
	 * Index of column is_public_limited
	 */
	protected static final int COLUMN_IS_PUBLIC_LIMITED = 35;

	/** 
	 * Index of column is_limited
	 */
	protected static final int COLUMN_IS_LIMITED = 36;

	/** 
	 * Index of column subsidiary
	 */
	protected static final int COLUMN_SUBSIDIARY = 37;

	/** 
	 * Index of column is_franchise
	 */
	protected static final int COLUMN_IS_FRANCHISE = 38;

	/** 
	 * Index of column is_general_partnership
	 */
	protected static final int COLUMN_IS_GENERAL_PARTNERSHIP = 39;

	/** 
	 * Index of column is_limited_partnership
	 */
	protected static final int COLUMN_IS_LIMITED_PARTNERSHIP = 40;

	/** 
	 * Index of column is_propritory
	 */
	protected static final int COLUMN_IS_PROPRITORY = 41;

	/** 
	 * Index of column is_reg_charity
	 */
	protected static final int COLUMN_IS_REG_CHARITY = 42;

	/** 
	 * Index of column is_academic_institute
	 */
	protected static final int COLUMN_IS_ACADEMIC_INSTITUTE = 43;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 44;

	/** 
	 * Index of column date_modified
	 */
	protected static final int COLUMN_DATE_MODIFIED = 45;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 45;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the business_info table.
	 */
	public BusinessInfoPk insert(BusinessInfo dto) throws BusinessInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "supplier_id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUkModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "uk" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEecModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "eec" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNonEecModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "non_eec" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDisabledPerModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "disabled_per" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isWomenPerModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "women_per" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCompanyNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "company_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAddressLine1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "address_line1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAdderssLine2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "adderss_line2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "city" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCountryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "country" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPostalCodeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "postal_code" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isWebSiteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "web_site" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTitleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "title" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPhoneModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "phone" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmailModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "email" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDunsNumberModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "duns_number" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCompanyRegNumberModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "company_reg_number" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsAcademicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_academic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsCharityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_charity" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrgEstablishedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "org_established" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAnnualGrossModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "annual_gross" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNetWorthModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "net_worth" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSingleEmpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_single_emp" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMicroEmpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_micro_emp" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSmallEmpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_small_emp" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMediumEmpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_medium_emp" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLargeEmpModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_large_emp" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsProfitableModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_profitable" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTradeElectronicallyModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "trade_electronically" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAcceptElectronicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "accept_electronic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBroadBandModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "broad_band" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPublicLimitedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_public_limited" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLimitedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_limited" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSubsidiaryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "subsidiary" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFranchiseModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_franchise" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsGeneralPartnershipModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_general_partnership" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLimitedPartnershipModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_limited_partnership" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPropritoryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_propritory" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRegCharityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_reg_charity" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsAcademicInstituteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_academic_institute" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_created" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_modified" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isUkModified()) {
				stmt.setString( index++, dto.getUk() );
			}
		
			if (dto.isEecModified()) {
				stmt.setString( index++, dto.getEec() );
			}
		
			if (dto.isNonEecModified()) {
				stmt.setString( index++, dto.getNonEec() );
			}
		
			if (dto.isDisabledPerModified()) {
				stmt.setString( index++, dto.getDisabledPer() );
			}
		
			if (dto.isWomenPerModified()) {
				stmt.setString( index++, dto.getWomenPer() );
			}
		
			if (dto.isCompanyNameModified()) {
				stmt.setString( index++, dto.getCompanyName() );
			}
		
			if (dto.isAddressLine1Modified()) {
				stmt.setString( index++, dto.getAddressLine1() );
			}
		
			if (dto.isAdderssLine2Modified()) {
				stmt.setString( index++, dto.getAdderssLine2() );
			}
		
			if (dto.isCityModified()) {
				stmt.setString( index++, dto.getCity() );
			}
		
			if (dto.isCountryModified()) {
				stmt.setString( index++, dto.getCountry() );
			}
		
			if (dto.isPostalCodeModified()) {
				stmt.setString( index++, dto.getPostalCode() );
			}
		
			if (dto.isWebSiteModified()) {
				stmt.setString( index++, dto.getWebSite() );
			}
		
			if (dto.isContactNameModified()) {
				stmt.setString( index++, dto.getContactName() );
			}
		
			if (dto.isTitleModified()) {
				stmt.setString( index++, dto.getTitle() );
			}
		
			if (dto.isPhoneModified()) {
				stmt.setString( index++, dto.getPhone() );
			}
		
			if (dto.isEmailModified()) {
				stmt.setString( index++, dto.getEmail() );
			}
		
			if (dto.isDunsNumberModified()) {
				if (dto.isDunsNumberNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDunsNumber() );
				}
		
			}
		
			if (dto.isCompanyRegNumberModified()) {
				stmt.setString( index++, dto.getCompanyRegNumber() );
			}
		
			if (dto.isIsAcademicModified()) {
				stmt.setString( index++, dto.getIsAcademic() );
			}
		
			if (dto.isIsCharityModified()) {
				stmt.setString( index++, dto.getIsCharity() );
			}
		
			if (dto.isOrgEstablishedModified()) {
				stmt.setString( index++, dto.getOrgEstablished() );
			}
		
			if (dto.isAnnualGrossModified()) {
				stmt.setString( index++, dto.getAnnualGross() );
			}
		
			if (dto.isNetWorthModified()) {
				stmt.setString( index++, dto.getNetWorth() );
			}
		
			if (dto.isIsSingleEmpModified()) {
				stmt.setString( index++, dto.getIsSingleEmp() );
			}
		
			if (dto.isIsMicroEmpModified()) {
				stmt.setString( index++, dto.getIsMicroEmp() );
			}
		
			if (dto.isIsSmallEmpModified()) {
				stmt.setString( index++, dto.getIsSmallEmp() );
			}
		
			if (dto.isIsMediumEmpModified()) {
				stmt.setString( index++, dto.getIsMediumEmp() );
			}
		
			if (dto.isIsLargeEmpModified()) {
				stmt.setString( index++, dto.getIsLargeEmp() );
			}
		
			if (dto.isIsProfitableModified()) {
				stmt.setString( index++, dto.getIsProfitable() );
			}
		
			if (dto.isTradeElectronicallyModified()) {
				stmt.setString( index++, dto.getTradeElectronically() );
			}
		
			if (dto.isAcceptElectronicModified()) {
				stmt.setString( index++, dto.getAcceptElectronic() );
			}
		
			if (dto.isBroadBandModified()) {
				stmt.setString( index++, dto.getBroadBand() );
			}
		
			if (dto.isIsPublicLimitedModified()) {
				stmt.setString( index++, dto.getIsPublicLimited() );
			}
		
			if (dto.isIsLimitedModified()) {
				stmt.setString( index++, dto.getIsLimited() );
			}
		
			if (dto.isSubsidiaryModified()) {
				stmt.setString( index++, dto.getSubsidiary() );
			}
		
			if (dto.isIsFranchiseModified()) {
				stmt.setString( index++, dto.getIsFranchise() );
			}
		
			if (dto.isIsGeneralPartnershipModified()) {
				stmt.setString( index++, dto.getIsGeneralPartnership() );
			}
		
			if (dto.isIsLimitedPartnershipModified()) {
				stmt.setString( index++, dto.getIsLimitedPartnership() );
			}
		
			if (dto.isIsPropritoryModified()) {
				stmt.setString( index++, dto.getIsPropritory() );
			}
		
			if (dto.isIsRegCharityModified()) {
				stmt.setString( index++, dto.getIsRegCharity() );
			}
		
			if (dto.isIsAcademicInstituteModified()) {
				stmt.setString( index++, dto.getIsAcademicInstitute() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the business_info table.
	 */
	public void update(BusinessInfoPk pk, BusinessInfo dto) throws BusinessInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "supplier_id=?" );
				modified=true;
			}
		
			if (dto.isUkModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "uk=?" );
				modified=true;
			}
		
			if (dto.isEecModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "eec=?" );
				modified=true;
			}
		
			if (dto.isNonEecModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "non_eec=?" );
				modified=true;
			}
		
			if (dto.isDisabledPerModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "disabled_per=?" );
				modified=true;
			}
		
			if (dto.isWomenPerModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "women_per=?" );
				modified=true;
			}
		
			if (dto.isCompanyNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "company_name=?" );
				modified=true;
			}
		
			if (dto.isAddressLine1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "address_line1=?" );
				modified=true;
			}
		
			if (dto.isAdderssLine2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "adderss_line2=?" );
				modified=true;
			}
		
			if (dto.isCityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "city=?" );
				modified=true;
			}
		
			if (dto.isCountryModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "country=?" );
				modified=true;
			}
		
			if (dto.isPostalCodeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "postal_code=?" );
				modified=true;
			}
		
			if (dto.isWebSiteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "web_site=?" );
				modified=true;
			}
		
			if (dto.isContactNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_name=?" );
				modified=true;
			}
		
			if (dto.isTitleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "title=?" );
				modified=true;
			}
		
			if (dto.isPhoneModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "phone=?" );
				modified=true;
			}
		
			if (dto.isEmailModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "email=?" );
				modified=true;
			}
		
			if (dto.isDunsNumberModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "duns_number=?" );
				modified=true;
			}
		
			if (dto.isCompanyRegNumberModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "company_reg_number=?" );
				modified=true;
			}
		
			if (dto.isIsAcademicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_academic=?" );
				modified=true;
			}
		
			if (dto.isIsCharityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_charity=?" );
				modified=true;
			}
		
			if (dto.isOrgEstablishedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "org_established=?" );
				modified=true;
			}
		
			if (dto.isAnnualGrossModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "annual_gross=?" );
				modified=true;
			}
		
			if (dto.isNetWorthModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "net_worth=?" );
				modified=true;
			}
		
			if (dto.isIsSingleEmpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_single_emp=?" );
				modified=true;
			}
		
			if (dto.isIsMicroEmpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_micro_emp=?" );
				modified=true;
			}
		
			if (dto.isIsSmallEmpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_small_emp=?" );
				modified=true;
			}
		
			if (dto.isIsMediumEmpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_medium_emp=?" );
				modified=true;
			}
		
			if (dto.isIsLargeEmpModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_large_emp=?" );
				modified=true;
			}
		
			if (dto.isIsProfitableModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_profitable=?" );
				modified=true;
			}
		
			if (dto.isTradeElectronicallyModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "trade_electronically=?" );
				modified=true;
			}
		
			if (dto.isAcceptElectronicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "accept_electronic=?" );
				modified=true;
			}
		
			if (dto.isBroadBandModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "broad_band=?" );
				modified=true;
			}
		
			if (dto.isIsPublicLimitedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_public_limited=?" );
				modified=true;
			}
		
			if (dto.isIsLimitedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_limited=?" );
				modified=true;
			}
		
			if (dto.isSubsidiaryModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "subsidiary=?" );
				modified=true;
			}
		
			if (dto.isIsFranchiseModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_franchise=?" );
				modified=true;
			}
		
			if (dto.isIsGeneralPartnershipModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_general_partnership=?" );
				modified=true;
			}
		
			if (dto.isIsLimitedPartnershipModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_limited_partnership=?" );
				modified=true;
			}
		
			if (dto.isIsPropritoryModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_propritory=?" );
				modified=true;
			}
		
			if (dto.isIsRegCharityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_reg_charity=?" );
				modified=true;
			}
		
			if (dto.isIsAcademicInstituteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_academic_institute=?" );
				modified=true;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_created=?" );
				modified=true;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_modified=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isUkModified()) {
				stmt.setString( index++, dto.getUk() );
			}
		
			if (dto.isEecModified()) {
				stmt.setString( index++, dto.getEec() );
			}
		
			if (dto.isNonEecModified()) {
				stmt.setString( index++, dto.getNonEec() );
			}
		
			if (dto.isDisabledPerModified()) {
				stmt.setString( index++, dto.getDisabledPer() );
			}
		
			if (dto.isWomenPerModified()) {
				stmt.setString( index++, dto.getWomenPer() );
			}
		
			if (dto.isCompanyNameModified()) {
				stmt.setString( index++, dto.getCompanyName() );
			}
		
			if (dto.isAddressLine1Modified()) {
				stmt.setString( index++, dto.getAddressLine1() );
			}
		
			if (dto.isAdderssLine2Modified()) {
				stmt.setString( index++, dto.getAdderssLine2() );
			}
		
			if (dto.isCityModified()) {
				stmt.setString( index++, dto.getCity() );
			}
		
			if (dto.isCountryModified()) {
				stmt.setString( index++, dto.getCountry() );
			}
		
			if (dto.isPostalCodeModified()) {
				stmt.setString( index++, dto.getPostalCode() );
			}
		
			if (dto.isWebSiteModified()) {
				stmt.setString( index++, dto.getWebSite() );
			}
		
			if (dto.isContactNameModified()) {
				stmt.setString( index++, dto.getContactName() );
			}
		
			if (dto.isTitleModified()) {
				stmt.setString( index++, dto.getTitle() );
			}
		
			if (dto.isPhoneModified()) {
				stmt.setString( index++, dto.getPhone() );
			}
		
			if (dto.isEmailModified()) {
				stmt.setString( index++, dto.getEmail() );
			}
		
			if (dto.isDunsNumberModified()) {
				if (dto.isDunsNumberNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getDunsNumber() );
				}
		
			}
		
			if (dto.isCompanyRegNumberModified()) {
				stmt.setString( index++, dto.getCompanyRegNumber() );
			}
		
			if (dto.isIsAcademicModified()) {
				stmt.setString( index++, dto.getIsAcademic() );
			}
		
			if (dto.isIsCharityModified()) {
				stmt.setString( index++, dto.getIsCharity() );
			}
		
			if (dto.isOrgEstablishedModified()) {
				stmt.setString( index++, dto.getOrgEstablished() );
			}
		
			if (dto.isAnnualGrossModified()) {
				stmt.setString( index++, dto.getAnnualGross() );
			}
		
			if (dto.isNetWorthModified()) {
				stmt.setString( index++, dto.getNetWorth() );
			}
		
			if (dto.isIsSingleEmpModified()) {
				stmt.setString( index++, dto.getIsSingleEmp() );
			}
		
			if (dto.isIsMicroEmpModified()) {
				stmt.setString( index++, dto.getIsMicroEmp() );
			}
		
			if (dto.isIsSmallEmpModified()) {
				stmt.setString( index++, dto.getIsSmallEmp() );
			}
		
			if (dto.isIsMediumEmpModified()) {
				stmt.setString( index++, dto.getIsMediumEmp() );
			}
		
			if (dto.isIsLargeEmpModified()) {
				stmt.setString( index++, dto.getIsLargeEmp() );
			}
		
			if (dto.isIsProfitableModified()) {
				stmt.setString( index++, dto.getIsProfitable() );
			}
		
			if (dto.isTradeElectronicallyModified()) {
				stmt.setString( index++, dto.getTradeElectronically() );
			}
		
			if (dto.isAcceptElectronicModified()) {
				stmt.setString( index++, dto.getAcceptElectronic() );
			}
		
			if (dto.isBroadBandModified()) {
				stmt.setString( index++, dto.getBroadBand() );
			}
		
			if (dto.isIsPublicLimitedModified()) {
				stmt.setString( index++, dto.getIsPublicLimited() );
			}
		
			if (dto.isIsLimitedModified()) {
				stmt.setString( index++, dto.getIsLimited() );
			}
		
			if (dto.isSubsidiaryModified()) {
				stmt.setString( index++, dto.getSubsidiary() );
			}
		
			if (dto.isIsFranchiseModified()) {
				stmt.setString( index++, dto.getIsFranchise() );
			}
		
			if (dto.isIsGeneralPartnershipModified()) {
				stmt.setString( index++, dto.getIsGeneralPartnership() );
			}
		
			if (dto.isIsLimitedPartnershipModified()) {
				stmt.setString( index++, dto.getIsLimitedPartnership() );
			}
		
			if (dto.isIsPropritoryModified()) {
				stmt.setString( index++, dto.getIsPropritory() );
			}
		
			if (dto.isIsRegCharityModified()) {
				stmt.setString( index++, dto.getIsRegCharity() );
			}
		
			if (dto.isIsAcademicInstituteModified()) {
				stmt.setString( index++, dto.getIsAcademicInstitute() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the business_info table.
	 */
	public void delete(BusinessInfoPk pk) throws BusinessInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the business_info table that matches the specified primary-key value.
	 */
	public BusinessInfo findByPrimaryKey(BusinessInfoPk pk) throws BusinessInfoDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'id = :id'.
	 */
	public BusinessInfo findByPrimaryKey(int id) throws BusinessInfoDaoException
	{
		BusinessInfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria ''.
	 */
	public BusinessInfo[] findAll() throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'supplier_id = :supplierId'.
	 */
	public BusinessInfo[] findBySubmissionForm(int supplierId) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ?", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'id = :id'.
	 */
	public BusinessInfo[] findWhereIdEquals(int id) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'supplier_id = :supplierId'.
	 */
	public BusinessInfo[] findWhereSupplierIdEquals(int supplierId) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ? ORDER BY supplier_id", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'uk = :uk'.
	 */
	public BusinessInfo[] findWhereUkEquals(String uk) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE uk = ? ORDER BY uk", new Object[] { uk } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'eec = :eec'.
	 */
	public BusinessInfo[] findWhereEecEquals(String eec) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE eec = ? ORDER BY eec", new Object[] { eec } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'non_eec = :nonEec'.
	 */
	public BusinessInfo[] findWhereNonEecEquals(String nonEec) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE non_eec = ? ORDER BY non_eec", new Object[] { nonEec } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'disabled_per = :disabledPer'.
	 */
	public BusinessInfo[] findWhereDisabledPerEquals(String disabledPer) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE disabled_per = ? ORDER BY disabled_per", new Object[] { disabledPer } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'women_per = :womenPer'.
	 */
	public BusinessInfo[] findWhereWomenPerEquals(String womenPer) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE women_per = ? ORDER BY women_per", new Object[] { womenPer } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'company_name = :companyName'.
	 */
	public BusinessInfo[] findWhereCompanyNameEquals(String companyName) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE company_name = ? ORDER BY company_name", new Object[] { companyName } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'address_line1 = :addressLine1'.
	 */
	public BusinessInfo[] findWhereAddressLine1Equals(String addressLine1) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE address_line1 = ? ORDER BY address_line1", new Object[] { addressLine1 } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'adderss_line2 = :adderssLine2'.
	 */
	public BusinessInfo[] findWhereAdderssLine2Equals(String adderssLine2) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE adderss_line2 = ? ORDER BY adderss_line2", new Object[] { adderssLine2 } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'city = :city'.
	 */
	public BusinessInfo[] findWhereCityEquals(String city) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE city = ? ORDER BY city", new Object[] { city } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'country = :country'.
	 */
	public BusinessInfo[] findWhereCountryEquals(String country) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE country = ? ORDER BY country", new Object[] { country } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'postal_code = :postalCode'.
	 */
	public BusinessInfo[] findWherePostalCodeEquals(String postalCode) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE postal_code = ? ORDER BY postal_code", new Object[] { postalCode } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'web_site = :webSite'.
	 */
	public BusinessInfo[] findWhereWebSiteEquals(String webSite) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE web_site = ? ORDER BY web_site", new Object[] { webSite } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'contact_name = :contactName'.
	 */
	public BusinessInfo[] findWhereContactNameEquals(String contactName) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_name = ? ORDER BY contact_name", new Object[] { contactName } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'title = :title'.
	 */
	public BusinessInfo[] findWhereTitleEquals(String title) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE title = ? ORDER BY title", new Object[] { title } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'phone = :phone'.
	 */
	public BusinessInfo[] findWherePhoneEquals(String phone) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE phone = ? ORDER BY phone", new Object[] { phone } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'email = :email'.
	 */
	public BusinessInfo[] findWhereEmailEquals(String email) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email = ? ORDER BY email", new Object[] { email } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'duns_number = :dunsNumber'.
	 */
	public BusinessInfo[] findWhereDunsNumberEquals(int dunsNumber) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE duns_number = ? ORDER BY duns_number", new Object[] {  new Integer(dunsNumber) } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'company_reg_number = :companyRegNumber'.
	 */
	public BusinessInfo[] findWhereCompanyRegNumberEquals(String companyRegNumber) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE company_reg_number = ? ORDER BY company_reg_number", new Object[] { companyRegNumber } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_academic = :isAcademic'.
	 */
	public BusinessInfo[] findWhereIsAcademicEquals(String isAcademic) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_academic = ? ORDER BY is_academic", new Object[] { isAcademic } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_charity = :isCharity'.
	 */
	public BusinessInfo[] findWhereIsCharityEquals(String isCharity) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_charity = ? ORDER BY is_charity", new Object[] { isCharity } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'org_established = :orgEstablished'.
	 */
	public BusinessInfo[] findWhereOrgEstablishedEquals(String orgEstablished) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE org_established = ? ORDER BY org_established", new Object[] { orgEstablished } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'annual_gross = :annualGross'.
	 */
	public BusinessInfo[] findWhereAnnualGrossEquals(String annualGross) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE annual_gross = ? ORDER BY annual_gross", new Object[] { annualGross } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'net_worth = :netWorth'.
	 */
	public BusinessInfo[] findWhereNetWorthEquals(String netWorth) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE net_worth = ? ORDER BY net_worth", new Object[] { netWorth } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_single_emp = :isSingleEmp'.
	 */
	public BusinessInfo[] findWhereIsSingleEmpEquals(String isSingleEmp) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_single_emp = ? ORDER BY is_single_emp", new Object[] { isSingleEmp } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_micro_emp = :isMicroEmp'.
	 */
	public BusinessInfo[] findWhereIsMicroEmpEquals(String isMicroEmp) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_micro_emp = ? ORDER BY is_micro_emp", new Object[] { isMicroEmp } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_small_emp = :isSmallEmp'.
	 */
	public BusinessInfo[] findWhereIsSmallEmpEquals(String isSmallEmp) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_small_emp = ? ORDER BY is_small_emp", new Object[] { isSmallEmp } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_medium_emp = :isMediumEmp'.
	 */
	public BusinessInfo[] findWhereIsMediumEmpEquals(String isMediumEmp) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_medium_emp = ? ORDER BY is_medium_emp", new Object[] { isMediumEmp } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_large_emp = :isLargeEmp'.
	 */
	public BusinessInfo[] findWhereIsLargeEmpEquals(String isLargeEmp) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_large_emp = ? ORDER BY is_large_emp", new Object[] { isLargeEmp } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_profitable = :isProfitable'.
	 */
	public BusinessInfo[] findWhereIsProfitableEquals(String isProfitable) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_profitable = ? ORDER BY is_profitable", new Object[] { isProfitable } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'trade_electronically = :tradeElectronically'.
	 */
	public BusinessInfo[] findWhereTradeElectronicallyEquals(String tradeElectronically) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE trade_electronically = ? ORDER BY trade_electronically", new Object[] { tradeElectronically } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'accept_electronic = :acceptElectronic'.
	 */
	public BusinessInfo[] findWhereAcceptElectronicEquals(String acceptElectronic) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE accept_electronic = ? ORDER BY accept_electronic", new Object[] { acceptElectronic } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'broad_band = :broadBand'.
	 */
	public BusinessInfo[] findWhereBroadBandEquals(String broadBand) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE broad_band = ? ORDER BY broad_band", new Object[] { broadBand } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_public_limited = :isPublicLimited'.
	 */
	public BusinessInfo[] findWhereIsPublicLimitedEquals(String isPublicLimited) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_public_limited = ? ORDER BY is_public_limited", new Object[] { isPublicLimited } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_limited = :isLimited'.
	 */
	public BusinessInfo[] findWhereIsLimitedEquals(String isLimited) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_limited = ? ORDER BY is_limited", new Object[] { isLimited } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'subsidiary = :subsidiary'.
	 */
	public BusinessInfo[] findWhereSubsidiaryEquals(String subsidiary) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE subsidiary = ? ORDER BY subsidiary", new Object[] { subsidiary } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_franchise = :isFranchise'.
	 */
	public BusinessInfo[] findWhereIsFranchiseEquals(String isFranchise) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_franchise = ? ORDER BY is_franchise", new Object[] { isFranchise } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_general_partnership = :isGeneralPartnership'.
	 */
	public BusinessInfo[] findWhereIsGeneralPartnershipEquals(String isGeneralPartnership) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_general_partnership = ? ORDER BY is_general_partnership", new Object[] { isGeneralPartnership } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_limited_partnership = :isLimitedPartnership'.
	 */
	public BusinessInfo[] findWhereIsLimitedPartnershipEquals(String isLimitedPartnership) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_limited_partnership = ? ORDER BY is_limited_partnership", new Object[] { isLimitedPartnership } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_propritory = :isPropritory'.
	 */
	public BusinessInfo[] findWhereIsPropritoryEquals(String isPropritory) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_propritory = ? ORDER BY is_propritory", new Object[] { isPropritory } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_reg_charity = :isRegCharity'.
	 */
	public BusinessInfo[] findWhereIsRegCharityEquals(String isRegCharity) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_reg_charity = ? ORDER BY is_reg_charity", new Object[] { isRegCharity } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'is_academic_institute = :isAcademicInstitute'.
	 */
	public BusinessInfo[] findWhereIsAcademicInstituteEquals(String isAcademicInstitute) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_academic_institute = ? ORDER BY is_academic_institute", new Object[] { isAcademicInstitute } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'date_created = :dateCreated'.
	 */
	public BusinessInfo[] findWhereDateCreatedEquals(Date dateCreated) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the business_info table that match the criteria 'date_modified = :dateModified'.
	 */
	public BusinessInfo[] findWhereDateModifiedEquals(Date dateModified) throws BusinessInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modified = ? ORDER BY date_modified", new Object[] { dateModified==null ? null : new java.sql.Timestamp( dateModified.getTime() ) } );
	}

	/**
	 * Method 'BusinessInfoDaoImpl'
	 * 
	 */
	public BusinessInfoDaoImpl()
	{
	}

	/**
	 * Method 'BusinessInfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public BusinessInfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "supplierdb.business_info";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected BusinessInfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			BusinessInfo dto = new BusinessInfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected BusinessInfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			BusinessInfo dto = new BusinessInfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		BusinessInfo ret[] = new BusinessInfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(BusinessInfo dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setSupplierId( rs.getInt( COLUMN_SUPPLIER_ID ) );
		dto.setUk( rs.getString( COLUMN_UK ) );
		dto.setEec( rs.getString( COLUMN_EEC ) );
		dto.setNonEec( rs.getString( COLUMN_NON_EEC ) );
		dto.setDisabledPer( rs.getString( COLUMN_DISABLED_PER ) );
		dto.setWomenPer( rs.getString( COLUMN_WOMEN_PER ) );
		dto.setCompanyName( rs.getString( COLUMN_COMPANY_NAME ) );
		dto.setAddressLine1( rs.getString( COLUMN_ADDRESS_LINE1 ) );
		dto.setAdderssLine2( rs.getString( COLUMN_ADDERSS_LINE2 ) );
		dto.setCity( rs.getString( COLUMN_CITY ) );
		dto.setCountry( rs.getString( COLUMN_COUNTRY ) );
		dto.setPostalCode( rs.getString( COLUMN_POSTAL_CODE ) );
		dto.setWebSite( rs.getString( COLUMN_WEB_SITE ) );
		dto.setContactName( rs.getString( COLUMN_CONTACT_NAME ) );
		dto.setTitle( rs.getString( COLUMN_TITLE ) );
		dto.setPhone( rs.getString( COLUMN_PHONE ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setDunsNumber( rs.getInt( COLUMN_DUNS_NUMBER ) );
		if (rs.wasNull()) {
			dto.setDunsNumberNull( true );
		}
		
		dto.setCompanyRegNumber( rs.getString( COLUMN_COMPANY_REG_NUMBER ) );
		dto.setIsAcademic( rs.getString( COLUMN_IS_ACADEMIC ) );
		dto.setIsCharity( rs.getString( COLUMN_IS_CHARITY ) );
		dto.setOrgEstablished( rs.getString( COLUMN_ORG_ESTABLISHED ) );
		dto.setAnnualGross( rs.getString( COLUMN_ANNUAL_GROSS ) );
		dto.setNetWorth( rs.getString( COLUMN_NET_WORTH ) );
		dto.setIsSingleEmp( rs.getString( COLUMN_IS_SINGLE_EMP ) );
		dto.setIsMicroEmp( rs.getString( COLUMN_IS_MICRO_EMP ) );
		dto.setIsSmallEmp( rs.getString( COLUMN_IS_SMALL_EMP ) );
		dto.setIsMediumEmp( rs.getString( COLUMN_IS_MEDIUM_EMP ) );
		dto.setIsLargeEmp( rs.getString( COLUMN_IS_LARGE_EMP ) );
		dto.setIsProfitable( rs.getString( COLUMN_IS_PROFITABLE ) );
		dto.setTradeElectronically( rs.getString( COLUMN_TRADE_ELECTRONICALLY ) );
		dto.setAcceptElectronic( rs.getString( COLUMN_ACCEPT_ELECTRONIC ) );
		dto.setBroadBand( rs.getString( COLUMN_BROAD_BAND ) );
		dto.setIsPublicLimited( rs.getString( COLUMN_IS_PUBLIC_LIMITED ) );
		dto.setIsLimited( rs.getString( COLUMN_IS_LIMITED ) );
		dto.setSubsidiary( rs.getString( COLUMN_SUBSIDIARY ) );
		dto.setIsFranchise( rs.getString( COLUMN_IS_FRANCHISE ) );
		dto.setIsGeneralPartnership( rs.getString( COLUMN_IS_GENERAL_PARTNERSHIP ) );
		dto.setIsLimitedPartnership( rs.getString( COLUMN_IS_LIMITED_PARTNERSHIP ) );
		dto.setIsPropritory( rs.getString( COLUMN_IS_PROPRITORY ) );
		dto.setIsRegCharity( rs.getString( COLUMN_IS_REG_CHARITY ) );
		dto.setIsAcademicInstitute( rs.getString( COLUMN_IS_ACADEMIC_INSTITUTE ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModified( rs.getTimestamp(COLUMN_DATE_MODIFIED ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(BusinessInfo dto)
	{
		dto.setIdModified( false );
		dto.setSupplierIdModified( false );
		dto.setUkModified( false );
		dto.setEecModified( false );
		dto.setNonEecModified( false );
		dto.setDisabledPerModified( false );
		dto.setWomenPerModified( false );
		dto.setCompanyNameModified( false );
		dto.setAddressLine1Modified( false );
		dto.setAdderssLine2Modified( false );
		dto.setCityModified( false );
		dto.setCountryModified( false );
		dto.setPostalCodeModified( false );
		dto.setWebSiteModified( false );
		dto.setContactNameModified( false );
		dto.setTitleModified( false );
		dto.setPhoneModified( false );
		dto.setEmailModified( false );
		dto.setDunsNumberModified( false );
		dto.setCompanyRegNumberModified( false );
		dto.setIsAcademicModified( false );
		dto.setIsCharityModified( false );
		dto.setOrgEstablishedModified( false );
		dto.setAnnualGrossModified( false );
		dto.setNetWorthModified( false );
		dto.setIsSingleEmpModified( false );
		dto.setIsMicroEmpModified( false );
		dto.setIsSmallEmpModified( false );
		dto.setIsMediumEmpModified( false );
		dto.setIsLargeEmpModified( false );
		dto.setIsProfitableModified( false );
		dto.setTradeElectronicallyModified( false );
		dto.setAcceptElectronicModified( false );
		dto.setBroadBandModified( false );
		dto.setIsPublicLimitedModified( false );
		dto.setIsLimitedModified( false );
		dto.setSubsidiaryModified( false );
		dto.setIsFranchiseModified( false );
		dto.setIsGeneralPartnershipModified( false );
		dto.setIsLimitedPartnershipModified( false );
		dto.setIsPropritoryModified( false );
		dto.setIsRegCharityModified( false );
		dto.setIsAcademicInstituteModified( false );
		dto.setDateCreatedModified( false );
		dto.setDateModifiedModified( false );
	}

	/** 
	 * Returns all rows from the business_info table that match the specified arbitrary SQL statement
	 */
	public BusinessInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws BusinessInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the business_info table that match the specified arbitrary SQL statement
	 */
	public BusinessInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws BusinessInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new BusinessInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
