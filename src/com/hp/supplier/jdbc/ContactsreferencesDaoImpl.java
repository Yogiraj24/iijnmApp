/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.jdbc;

import com.hp.supplier.dao.*;
import com.hp.supplier.factory.*;
import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ContactsreferencesDaoImpl extends AbstractDAO implements ContactsreferencesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, supplier_id, is_HP_trader, contract_title, contract_ref, expiry_date, hp_contract_mgr, div_name_1, contact_name_1, site_location_1, last_meeting_date_1, approx_service_period_1, div_name_2, hp_contact_name_2, site_location_2, last_meeting_date_2, approx_service_period_2, div_name_3, hp_contact_name_3, site_location_3, last_meeting_date_3, approx_service_period_3, organization_1, hp_contact_name_1, contact_title_1, email_address_1, organization_2, contact_name_2, contact_title_2, email_address_2, organization_3, contact_name_3, contact_title_3, email_address_3, date_created, date_modified FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, supplier_id, is_HP_trader, contract_title, contract_ref, expiry_date, hp_contract_mgr, div_name_1, contact_name_1, site_location_1, last_meeting_date_1, approx_service_period_1, div_name_2, hp_contact_name_2, site_location_2, last_meeting_date_2, approx_service_period_2, div_name_3, hp_contact_name_3, site_location_3, last_meeting_date_3, approx_service_period_3, organization_1, hp_contact_name_1, contact_title_1, email_address_1, organization_2, contact_name_2, contact_title_2, email_address_2, organization_3, contact_name_3, contact_title_3, email_address_3, date_created, date_modified ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, supplier_id = ?, is_HP_trader = ?, contract_title = ?, contract_ref = ?, expiry_date = ?, hp_contract_mgr = ?, div_name_1 = ?, contact_name_1 = ?, site_location_1 = ?, last_meeting_date_1 = ?, approx_service_period_1 = ?, div_name_2 = ?, hp_contact_name_2 = ?, site_location_2 = ?, last_meeting_date_2 = ?, approx_service_period_2 = ?, div_name_3 = ?, hp_contact_name_3 = ?, site_location_3 = ?, last_meeting_date_3 = ?, approx_service_period_3 = ?, organization_1 = ?, hp_contact_name_1 = ?, contact_title_1 = ?, email_address_1 = ?, organization_2 = ?, contact_name_2 = ?, contact_title_2 = ?, email_address_2 = ?, organization_3 = ?, contact_name_3 = ?, contact_title_3 = ?, email_address_3 = ?, date_created = ?, date_modified = ? WHERE id = ? AND supplier_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ? AND supplier_id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column supplier_id
	 */
	protected static final int COLUMN_SUPPLIER_ID = 2;

	/** 
	 * Index of column is_HP_trader
	 */
	protected static final int COLUMN_IS_HP_TRADER = 3;

	/** 
	 * Index of column contract_title
	 */
	protected static final int COLUMN_CONTRACT_TITLE = 4;

	/** 
	 * Index of column contract_ref
	 */
	protected static final int COLUMN_CONTRACT_REF = 5;

	/** 
	 * Index of column expiry_date
	 */
	protected static final int COLUMN_EXPIRY_DATE = 6;

	/** 
	 * Index of column hp_contract_mgr
	 */
	protected static final int COLUMN_HP_CONTRACT_MGR = 7;

	/** 
	 * Index of column div_name_1
	 */
	protected static final int COLUMN_DIV_NAME1 = 8;

	/** 
	 * Index of column contact_name_1
	 */
	protected static final int COLUMN_CONTACT_NAME1 = 9;

	/** 
	 * Index of column site_location_1
	 */
	protected static final int COLUMN_SITE_LOCATION1 = 10;

	/** 
	 * Index of column last_meeting_date_1
	 */
	protected static final int COLUMN_LAST_MEETING_DATE1 = 11;

	/** 
	 * Index of column approx_service_period_1
	 */
	protected static final int COLUMN_APPROX_SERVICE_PERIOD1 = 12;

	/** 
	 * Index of column div_name_2
	 */
	protected static final int COLUMN_DIV_NAME2 = 13;

	/** 
	 * Index of column hp_contact_name_2
	 */
	protected static final int COLUMN_HP_CONTACT_NAME2 = 14;

	/** 
	 * Index of column site_location_2
	 */
	protected static final int COLUMN_SITE_LOCATION2 = 15;

	/** 
	 * Index of column last_meeting_date_2
	 */
	protected static final int COLUMN_LAST_MEETING_DATE2 = 16;

	/** 
	 * Index of column approx_service_period_2
	 */
	protected static final int COLUMN_APPROX_SERVICE_PERIOD2 = 17;

	/** 
	 * Index of column div_name_3
	 */
	protected static final int COLUMN_DIV_NAME3 = 18;

	/** 
	 * Index of column hp_contact_name_3
	 */
	protected static final int COLUMN_HP_CONTACT_NAME3 = 19;

	/** 
	 * Index of column site_location_3
	 */
	protected static final int COLUMN_SITE_LOCATION3 = 20;

	/** 
	 * Index of column last_meeting_date_3
	 */
	protected static final int COLUMN_LAST_MEETING_DATE3 = 21;

	/** 
	 * Index of column approx_service_period_3
	 */
	protected static final int COLUMN_APPROX_SERVICE_PERIOD3 = 22;

	/** 
	 * Index of column organization_1
	 */
	protected static final int COLUMN_ORGANIZATION1 = 23;

	/** 
	 * Index of column hp_contact_name_1
	 */
	protected static final int COLUMN_HP_CONTACT_NAME1 = 24;

	/** 
	 * Index of column contact_title_1
	 */
	protected static final int COLUMN_CONTACT_TITLE1 = 25;

	/** 
	 * Index of column email_address_1
	 */
	protected static final int COLUMN_EMAIL_ADDRESS1 = 26;

	/** 
	 * Index of column organization_2
	 */
	protected static final int COLUMN_ORGANIZATION2 = 27;

	/** 
	 * Index of column contact_name_2
	 */
	protected static final int COLUMN_CONTACT_NAME2 = 28;

	/** 
	 * Index of column contact_title_2
	 */
	protected static final int COLUMN_CONTACT_TITLE2 = 29;

	/** 
	 * Index of column email_address_2
	 */
	protected static final int COLUMN_EMAIL_ADDRESS2 = 30;

	/** 
	 * Index of column organization_3
	 */
	protected static final int COLUMN_ORGANIZATION3 = 31;

	/** 
	 * Index of column contact_name_3
	 */
	protected static final int COLUMN_CONTACT_NAME3 = 32;

	/** 
	 * Index of column contact_title_3
	 */
	protected static final int COLUMN_CONTACT_TITLE3 = 33;

	/** 
	 * Index of column email_address_3
	 */
	protected static final int COLUMN_EMAIL_ADDRESS3 = 34;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 35;

	/** 
	 * Index of column date_modified
	 */
	protected static final int COLUMN_DATE_MODIFIED = 36;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 36;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Index of primary-key column supplier_id
	 */
	protected static final int PK_COLUMN_SUPPLIER_ID = 2;

	/** 
	 * Inserts a new row in the contactsreferences table.
	 */
	public ContactsreferencesPk insert(Contactsreferences dto) throws ContactsreferencesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "supplier_id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHpTraderModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_HP_trader" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContractTitleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contract_title" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContractRefModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contract_ref" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isExpiryDateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "expiry_date" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHpContractMgrModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "hp_contract_mgr" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDivName1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "div_name_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactName1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_name_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSiteLocation1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "site_location_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLastMeetingDate1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "last_meeting_date_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApproxServicePeriod1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "approx_service_period_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDivName2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "div_name_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHpContactName2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "hp_contact_name_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSiteLocation2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "site_location_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLastMeetingDate2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "last_meeting_date_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApproxServicePeriod2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "approx_service_period_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDivName3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "div_name_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHpContactName3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "hp_contact_name_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSiteLocation3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "site_location_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLastMeetingDate3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "last_meeting_date_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isApproxServicePeriod3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "approx_service_period_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrganization1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "organization_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHpContactName1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "hp_contact_name_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactTitle1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_title_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmailAddress1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "email_address_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrganization2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "organization_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactName2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_name_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactTitle2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_title_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmailAddress2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "email_address_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrganization3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "organization_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactName3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_name_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactTitle3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_title_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmailAddress3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "email_address_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_created" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_modified" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isIsHpTraderModified()) {
				stmt.setString( index++, dto.getIsHpTrader() );
			}
		
			if (dto.isContractTitleModified()) {
				stmt.setString( index++, dto.getContractTitle() );
			}
		
			if (dto.isContractRefModified()) {
				stmt.setString( index++, dto.getContractRef() );
			}
		
			if (dto.isExpiryDateModified()) {
				stmt.setString( index++, dto.getExpiryDate() );
			}
		
			if (dto.isHpContractMgrModified()) {
				stmt.setString( index++, dto.getHpContractMgr() );
			}
		
			if (dto.isDivName1Modified()) {
				stmt.setString( index++, dto.getDivName1() );
			}
		
			if (dto.isContactName1Modified()) {
				stmt.setString( index++, dto.getContactName1() );
			}
		
			if (dto.isSiteLocation1Modified()) {
				stmt.setString( index++, dto.getSiteLocation1() );
			}
		
			if (dto.isLastMeetingDate1Modified()) {
				stmt.setTimestamp(index++, dto.getLastMeetingDate1()==null ? null : new java.sql.Timestamp( dto.getLastMeetingDate1().getTime() ) );
			}
		
			if (dto.isApproxServicePeriod1Modified()) {
				stmt.setString( index++, dto.getApproxServicePeriod1() );
			}
		
			if (dto.isDivName2Modified()) {
				stmt.setString( index++, dto.getDivName2() );
			}
		
			if (dto.isHpContactName2Modified()) {
				stmt.setString( index++, dto.getHpContactName2() );
			}
		
			if (dto.isSiteLocation2Modified()) {
				stmt.setString( index++, dto.getSiteLocation2() );
			}
		
			if (dto.isLastMeetingDate2Modified()) {
				stmt.setTimestamp(index++, dto.getLastMeetingDate2()==null ? null : new java.sql.Timestamp( dto.getLastMeetingDate2().getTime() ) );
			}
		
			if (dto.isApproxServicePeriod2Modified()) {
				stmt.setString( index++, dto.getApproxServicePeriod2() );
			}
		
			if (dto.isDivName3Modified()) {
				stmt.setString( index++, dto.getDivName3() );
			}
		
			if (dto.isHpContactName3Modified()) {
				stmt.setString( index++, dto.getHpContactName3() );
			}
		
			if (dto.isSiteLocation3Modified()) {
				stmt.setString( index++, dto.getSiteLocation3() );
			}
		
			if (dto.isLastMeetingDate3Modified()) {
				stmt.setTimestamp(index++, dto.getLastMeetingDate3()==null ? null : new java.sql.Timestamp( dto.getLastMeetingDate3().getTime() ) );
			}
		
			if (dto.isApproxServicePeriod3Modified()) {
				stmt.setString( index++, dto.getApproxServicePeriod3() );
			}
		
			if (dto.isOrganization1Modified()) {
				stmt.setString( index++, dto.getOrganization1() );
			}
		
			if (dto.isHpContactName1Modified()) {
				stmt.setString( index++, dto.getHpContactName1() );
			}
		
			if (dto.isContactTitle1Modified()) {
				stmt.setString( index++, dto.getContactTitle1() );
			}
		
			if (dto.isEmailAddress1Modified()) {
				stmt.setString( index++, dto.getEmailAddress1() );
			}
		
			if (dto.isOrganization2Modified()) {
				stmt.setString( index++, dto.getOrganization2() );
			}
		
			if (dto.isContactName2Modified()) {
				stmt.setString( index++, dto.getContactName2() );
			}
		
			if (dto.isContactTitle2Modified()) {
				stmt.setString( index++, dto.getContactTitle2() );
			}
		
			if (dto.isEmailAddress2Modified()) {
				stmt.setString( index++, dto.getEmailAddress2() );
			}
		
			if (dto.isOrganization3Modified()) {
				stmt.setString( index++, dto.getOrganization3() );
			}
		
			if (dto.isContactName3Modified()) {
				stmt.setString( index++, dto.getContactName3() );
			}
		
			if (dto.isContactTitle3Modified()) {
				stmt.setString( index++, dto.getContactTitle3() );
			}
		
			if (dto.isEmailAddress3Modified()) {
				stmt.setString( index++, dto.getEmailAddress3() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsreferencesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the contactsreferences table.
	 */
	public void update(ContactsreferencesPk pk, Contactsreferences dto) throws ContactsreferencesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "supplier_id=?" );
				modified=true;
			}
		
			if (dto.isIsHpTraderModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_HP_trader=?" );
				modified=true;
			}
		
			if (dto.isContractTitleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contract_title=?" );
				modified=true;
			}
		
			if (dto.isContractRefModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contract_ref=?" );
				modified=true;
			}
		
			if (dto.isExpiryDateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "expiry_date=?" );
				modified=true;
			}
		
			if (dto.isHpContractMgrModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "hp_contract_mgr=?" );
				modified=true;
			}
		
			if (dto.isDivName1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "div_name_1=?" );
				modified=true;
			}
		
			if (dto.isContactName1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_name_1=?" );
				modified=true;
			}
		
			if (dto.isSiteLocation1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "site_location_1=?" );
				modified=true;
			}
		
			if (dto.isLastMeetingDate1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "last_meeting_date_1=?" );
				modified=true;
			}
		
			if (dto.isApproxServicePeriod1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "approx_service_period_1=?" );
				modified=true;
			}
		
			if (dto.isDivName2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "div_name_2=?" );
				modified=true;
			}
		
			if (dto.isHpContactName2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "hp_contact_name_2=?" );
				modified=true;
			}
		
			if (dto.isSiteLocation2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "site_location_2=?" );
				modified=true;
			}
		
			if (dto.isLastMeetingDate2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "last_meeting_date_2=?" );
				modified=true;
			}
		
			if (dto.isApproxServicePeriod2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "approx_service_period_2=?" );
				modified=true;
			}
		
			if (dto.isDivName3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "div_name_3=?" );
				modified=true;
			}
		
			if (dto.isHpContactName3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "hp_contact_name_3=?" );
				modified=true;
			}
		
			if (dto.isSiteLocation3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "site_location_3=?" );
				modified=true;
			}
		
			if (dto.isLastMeetingDate3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "last_meeting_date_3=?" );
				modified=true;
			}
		
			if (dto.isApproxServicePeriod3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "approx_service_period_3=?" );
				modified=true;
			}
		
			if (dto.isOrganization1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "organization_1=?" );
				modified=true;
			}
		
			if (dto.isHpContactName1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "hp_contact_name_1=?" );
				modified=true;
			}
		
			if (dto.isContactTitle1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_title_1=?" );
				modified=true;
			}
		
			if (dto.isEmailAddress1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "email_address_1=?" );
				modified=true;
			}
		
			if (dto.isOrganization2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "organization_2=?" );
				modified=true;
			}
		
			if (dto.isContactName2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_name_2=?" );
				modified=true;
			}
		
			if (dto.isContactTitle2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_title_2=?" );
				modified=true;
			}
		
			if (dto.isEmailAddress2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "email_address_2=?" );
				modified=true;
			}
		
			if (dto.isOrganization3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "organization_3=?" );
				modified=true;
			}
		
			if (dto.isContactName3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_name_3=?" );
				modified=true;
			}
		
			if (dto.isContactTitle3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_title_3=?" );
				modified=true;
			}
		
			if (dto.isEmailAddress3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "email_address_3=?" );
				modified=true;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_created=?" );
				modified=true;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_modified=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=? AND supplier_id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isIsHpTraderModified()) {
				stmt.setString( index++, dto.getIsHpTrader() );
			}
		
			if (dto.isContractTitleModified()) {
				stmt.setString( index++, dto.getContractTitle() );
			}
		
			if (dto.isContractRefModified()) {
				stmt.setString( index++, dto.getContractRef() );
			}
		
			if (dto.isExpiryDateModified()) {
				stmt.setString( index++, dto.getExpiryDate() );
			}
		
			if (dto.isHpContractMgrModified()) {
				stmt.setString( index++, dto.getHpContractMgr() );
			}
		
			if (dto.isDivName1Modified()) {
				stmt.setString( index++, dto.getDivName1() );
			}
		
			if (dto.isContactName1Modified()) {
				stmt.setString( index++, dto.getContactName1() );
			}
		
			if (dto.isSiteLocation1Modified()) {
				stmt.setString( index++, dto.getSiteLocation1() );
			}
		
			if (dto.isLastMeetingDate1Modified()) {
				stmt.setTimestamp(index++, dto.getLastMeetingDate1()==null ? null : new java.sql.Timestamp( dto.getLastMeetingDate1().getTime() ) );
			}
		
			if (dto.isApproxServicePeriod1Modified()) {
				stmt.setString( index++, dto.getApproxServicePeriod1() );
			}
		
			if (dto.isDivName2Modified()) {
				stmt.setString( index++, dto.getDivName2() );
			}
		
			if (dto.isHpContactName2Modified()) {
				stmt.setString( index++, dto.getHpContactName2() );
			}
		
			if (dto.isSiteLocation2Modified()) {
				stmt.setString( index++, dto.getSiteLocation2() );
			}
		
			if (dto.isLastMeetingDate2Modified()) {
				stmt.setTimestamp(index++, dto.getLastMeetingDate2()==null ? null : new java.sql.Timestamp( dto.getLastMeetingDate2().getTime() ) );
			}
		
			if (dto.isApproxServicePeriod2Modified()) {
				stmt.setString( index++, dto.getApproxServicePeriod2() );
			}
		
			if (dto.isDivName3Modified()) {
				stmt.setString( index++, dto.getDivName3() );
			}
		
			if (dto.isHpContactName3Modified()) {
				stmt.setString( index++, dto.getHpContactName3() );
			}
		
			if (dto.isSiteLocation3Modified()) {
				stmt.setString( index++, dto.getSiteLocation3() );
			}
		
			if (dto.isLastMeetingDate3Modified()) {
				stmt.setTimestamp(index++, dto.getLastMeetingDate3()==null ? null : new java.sql.Timestamp( dto.getLastMeetingDate3().getTime() ) );
			}
		
			if (dto.isApproxServicePeriod3Modified()) {
				stmt.setString( index++, dto.getApproxServicePeriod3() );
			}
		
			if (dto.isOrganization1Modified()) {
				stmt.setString( index++, dto.getOrganization1() );
			}
		
			if (dto.isHpContactName1Modified()) {
				stmt.setString( index++, dto.getHpContactName1() );
			}
		
			if (dto.isContactTitle1Modified()) {
				stmt.setString( index++, dto.getContactTitle1() );
			}
		
			if (dto.isEmailAddress1Modified()) {
				stmt.setString( index++, dto.getEmailAddress1() );
			}
		
			if (dto.isOrganization2Modified()) {
				stmt.setString( index++, dto.getOrganization2() );
			}
		
			if (dto.isContactName2Modified()) {
				stmt.setString( index++, dto.getContactName2() );
			}
		
			if (dto.isContactTitle2Modified()) {
				stmt.setString( index++, dto.getContactTitle2() );
			}
		
			if (dto.isEmailAddress2Modified()) {
				stmt.setString( index++, dto.getEmailAddress2() );
			}
		
			if (dto.isOrganization3Modified()) {
				stmt.setString( index++, dto.getOrganization3() );
			}
		
			if (dto.isContactName3Modified()) {
				stmt.setString( index++, dto.getContactName3() );
			}
		
			if (dto.isContactTitle3Modified()) {
				stmt.setString( index++, dto.getContactTitle3() );
			}
		
			if (dto.isEmailAddress3Modified()) {
				stmt.setString( index++, dto.getEmailAddress3() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getId() );
			stmt.setInt( index++, pk.getSupplierId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsreferencesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the contactsreferences table.
	 */
	public void delete(ContactsreferencesPk pk) throws ContactsreferencesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			stmt.setInt( 2, pk.getSupplierId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsreferencesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the contactsreferences table that matches the specified primary-key value.
	 */
	public Contactsreferences findByPrimaryKey(ContactsreferencesPk pk) throws ContactsreferencesDaoException
	{
		return findByPrimaryKey( pk.getId(), pk.getSupplierId() );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'id = :id AND supplier_id = :supplierId'.
	 */
	public Contactsreferences findByPrimaryKey(int id, int supplierId) throws ContactsreferencesDaoException
	{
		Contactsreferences ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ? AND supplier_id = ?", new Object[] {  new Integer(id),  new Integer(supplierId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria ''.
	 */
	public Contactsreferences[] findAll() throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id, supplier_id", null );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Contactsreferences[] findBySubmissionForm(int supplierId) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ?", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'id = :id'.
	 */
	public Contactsreferences[] findWhereIdEquals(int id) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Contactsreferences[] findWhereSupplierIdEquals(int supplierId) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ? ORDER BY supplier_id", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'is_HP_trader = :isHpTrader'.
	 */
	public Contactsreferences[] findWhereIsHpTraderEquals(String isHpTrader) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_HP_trader = ? ORDER BY is_HP_trader", new Object[] { isHpTrader } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contract_title = :contractTitle'.
	 */
	public Contactsreferences[] findWhereContractTitleEquals(String contractTitle) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contract_title = ? ORDER BY contract_title", new Object[] { contractTitle } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contract_ref = :contractRef'.
	 */
	public Contactsreferences[] findWhereContractRefEquals(String contractRef) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contract_ref = ? ORDER BY contract_ref", new Object[] { contractRef } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'expiry_date = :expiryDate'.
	 */
	public Contactsreferences[] findWhereExpiryDateEquals(String expiryDate) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE expiry_date = ? ORDER BY expiry_date", new Object[] { expiryDate } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'hp_contract_mgr = :hpContractMgr'.
	 */
	public Contactsreferences[] findWhereHpContractMgrEquals(String hpContractMgr) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hp_contract_mgr = ? ORDER BY hp_contract_mgr", new Object[] { hpContractMgr } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'div_name_1 = :divName1'.
	 */
	public Contactsreferences[] findWhereDivName1Equals(String divName1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE div_name_1 = ? ORDER BY div_name_1", new Object[] { divName1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contact_name_1 = :contactName1'.
	 */
	public Contactsreferences[] findWhereContactName1Equals(String contactName1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_name_1 = ? ORDER BY contact_name_1", new Object[] { contactName1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'site_location_1 = :siteLocation1'.
	 */
	public Contactsreferences[] findWhereSiteLocation1Equals(String siteLocation1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE site_location_1 = ? ORDER BY site_location_1", new Object[] { siteLocation1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'last_meeting_date_1 = :lastMeetingDate1'.
	 */
	public Contactsreferences[] findWhereLastMeetingDate1Equals(Date lastMeetingDate1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE last_meeting_date_1 = ? ORDER BY last_meeting_date_1", new Object[] { lastMeetingDate1==null ? null : new java.sql.Timestamp( lastMeetingDate1.getTime() ) } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'approx_service_period_1 = :approxServicePeriod1'.
	 */
	public Contactsreferences[] findWhereApproxServicePeriod1Equals(String approxServicePeriod1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE approx_service_period_1 = ? ORDER BY approx_service_period_1", new Object[] { approxServicePeriod1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'div_name_2 = :divName2'.
	 */
	public Contactsreferences[] findWhereDivName2Equals(String divName2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE div_name_2 = ? ORDER BY div_name_2", new Object[] { divName2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'hp_contact_name_2 = :hpContactName2'.
	 */
	public Contactsreferences[] findWhereHpContactName2Equals(String hpContactName2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hp_contact_name_2 = ? ORDER BY hp_contact_name_2", new Object[] { hpContactName2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'site_location_2 = :siteLocation2'.
	 */
	public Contactsreferences[] findWhereSiteLocation2Equals(String siteLocation2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE site_location_2 = ? ORDER BY site_location_2", new Object[] { siteLocation2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'last_meeting_date_2 = :lastMeetingDate2'.
	 */
	public Contactsreferences[] findWhereLastMeetingDate2Equals(Date lastMeetingDate2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE last_meeting_date_2 = ? ORDER BY last_meeting_date_2", new Object[] { lastMeetingDate2==null ? null : new java.sql.Timestamp( lastMeetingDate2.getTime() ) } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'approx_service_period_2 = :approxServicePeriod2'.
	 */
	public Contactsreferences[] findWhereApproxServicePeriod2Equals(String approxServicePeriod2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE approx_service_period_2 = ? ORDER BY approx_service_period_2", new Object[] { approxServicePeriod2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'div_name_3 = :divName3'.
	 */
	public Contactsreferences[] findWhereDivName3Equals(String divName3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE div_name_3 = ? ORDER BY div_name_3", new Object[] { divName3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'hp_contact_name_3 = :hpContactName3'.
	 */
	public Contactsreferences[] findWhereHpContactName3Equals(String hpContactName3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hp_contact_name_3 = ? ORDER BY hp_contact_name_3", new Object[] { hpContactName3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'site_location_3 = :siteLocation3'.
	 */
	public Contactsreferences[] findWhereSiteLocation3Equals(String siteLocation3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE site_location_3 = ? ORDER BY site_location_3", new Object[] { siteLocation3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'last_meeting_date_3 = :lastMeetingDate3'.
	 */
	public Contactsreferences[] findWhereLastMeetingDate3Equals(Date lastMeetingDate3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE last_meeting_date_3 = ? ORDER BY last_meeting_date_3", new Object[] { lastMeetingDate3==null ? null : new java.sql.Timestamp( lastMeetingDate3.getTime() ) } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'approx_service_period_3 = :approxServicePeriod3'.
	 */
	public Contactsreferences[] findWhereApproxServicePeriod3Equals(String approxServicePeriod3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE approx_service_period_3 = ? ORDER BY approx_service_period_3", new Object[] { approxServicePeriod3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'organization_1 = :organization1'.
	 */
	public Contactsreferences[] findWhereOrganization1Equals(String organization1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE organization_1 = ? ORDER BY organization_1", new Object[] { organization1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'hp_contact_name_1 = :hpContactName1'.
	 */
	public Contactsreferences[] findWhereHpContactName1Equals(String hpContactName1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hp_contact_name_1 = ? ORDER BY hp_contact_name_1", new Object[] { hpContactName1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contact_title_1 = :contactTitle1'.
	 */
	public Contactsreferences[] findWhereContactTitle1Equals(String contactTitle1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_title_1 = ? ORDER BY contact_title_1", new Object[] { contactTitle1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'email_address_1 = :emailAddress1'.
	 */
	public Contactsreferences[] findWhereEmailAddress1Equals(String emailAddress1) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email_address_1 = ? ORDER BY email_address_1", new Object[] { emailAddress1 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'organization_2 = :organization2'.
	 */
	public Contactsreferences[] findWhereOrganization2Equals(String organization2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE organization_2 = ? ORDER BY organization_2", new Object[] { organization2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contact_name_2 = :contactName2'.
	 */
	public Contactsreferences[] findWhereContactName2Equals(String contactName2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_name_2 = ? ORDER BY contact_name_2", new Object[] { contactName2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contact_title_2 = :contactTitle2'.
	 */
	public Contactsreferences[] findWhereContactTitle2Equals(String contactTitle2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_title_2 = ? ORDER BY contact_title_2", new Object[] { contactTitle2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'email_address_2 = :emailAddress2'.
	 */
	public Contactsreferences[] findWhereEmailAddress2Equals(String emailAddress2) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email_address_2 = ? ORDER BY email_address_2", new Object[] { emailAddress2 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'organization_3 = :organization3'.
	 */
	public Contactsreferences[] findWhereOrganization3Equals(String organization3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE organization_3 = ? ORDER BY organization_3", new Object[] { organization3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contact_name_3 = :contactName3'.
	 */
	public Contactsreferences[] findWhereContactName3Equals(String contactName3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_name_3 = ? ORDER BY contact_name_3", new Object[] { contactName3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'contact_title_3 = :contactTitle3'.
	 */
	public Contactsreferences[] findWhereContactTitle3Equals(String contactTitle3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_title_3 = ? ORDER BY contact_title_3", new Object[] { contactTitle3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'email_address_3 = :emailAddress3'.
	 */
	public Contactsreferences[] findWhereEmailAddress3Equals(String emailAddress3) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email_address_3 = ? ORDER BY email_address_3", new Object[] { emailAddress3 } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'date_created = :dateCreated'.
	 */
	public Contactsreferences[] findWhereDateCreatedEquals(Date dateCreated) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the criteria 'date_modified = :dateModified'.
	 */
	public Contactsreferences[] findWhereDateModifiedEquals(Date dateModified) throws ContactsreferencesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modified = ? ORDER BY date_modified", new Object[] { dateModified==null ? null : new java.sql.Timestamp( dateModified.getTime() ) } );
	}

	/**
	 * Method 'ContactsreferencesDaoImpl'
	 * 
	 */
	public ContactsreferencesDaoImpl()
	{
	}

	/**
	 * Method 'ContactsreferencesDaoImpl'
	 * 
	 * @param userConn
	 */
	public ContactsreferencesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "supplierdb.contactsreferences";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Contactsreferences fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Contactsreferences dto = new Contactsreferences();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Contactsreferences[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Contactsreferences dto = new Contactsreferences();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Contactsreferences ret[] = new Contactsreferences[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Contactsreferences dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setSupplierId( rs.getInt( COLUMN_SUPPLIER_ID ) );
		dto.setIsHpTrader( rs.getString( COLUMN_IS_HP_TRADER ) );
		dto.setContractTitle( rs.getString( COLUMN_CONTRACT_TITLE ) );
		dto.setContractRef( rs.getString( COLUMN_CONTRACT_REF ) );
		dto.setExpiryDate( rs.getString( COLUMN_EXPIRY_DATE ) );
		dto.setHpContractMgr( rs.getString( COLUMN_HP_CONTRACT_MGR ) );
		dto.setDivName1( rs.getString( COLUMN_DIV_NAME1 ) );
		dto.setContactName1( rs.getString( COLUMN_CONTACT_NAME1 ) );
		dto.setSiteLocation1( rs.getString( COLUMN_SITE_LOCATION1 ) );
		dto.setLastMeetingDate1( rs.getTimestamp(COLUMN_LAST_MEETING_DATE1 ) );
		dto.setApproxServicePeriod1( rs.getString( COLUMN_APPROX_SERVICE_PERIOD1 ) );
		dto.setDivName2( rs.getString( COLUMN_DIV_NAME2 ) );
		dto.setHpContactName2( rs.getString( COLUMN_HP_CONTACT_NAME2 ) );
		dto.setSiteLocation2( rs.getString( COLUMN_SITE_LOCATION2 ) );
		dto.setLastMeetingDate2( rs.getTimestamp(COLUMN_LAST_MEETING_DATE2 ) );
		dto.setApproxServicePeriod2( rs.getString( COLUMN_APPROX_SERVICE_PERIOD2 ) );
		dto.setDivName3( rs.getString( COLUMN_DIV_NAME3 ) );
		dto.setHpContactName3( rs.getString( COLUMN_HP_CONTACT_NAME3 ) );
		dto.setSiteLocation3( rs.getString( COLUMN_SITE_LOCATION3 ) );
		dto.setLastMeetingDate3( rs.getTimestamp(COLUMN_LAST_MEETING_DATE3 ) );
		dto.setApproxServicePeriod3( rs.getString( COLUMN_APPROX_SERVICE_PERIOD3 ) );
		dto.setOrganization1( rs.getString( COLUMN_ORGANIZATION1 ) );
		dto.setHpContactName1( rs.getString( COLUMN_HP_CONTACT_NAME1 ) );
		dto.setContactTitle1( rs.getString( COLUMN_CONTACT_TITLE1 ) );
		dto.setEmailAddress1( rs.getString( COLUMN_EMAIL_ADDRESS1 ) );
		dto.setOrganization2( rs.getString( COLUMN_ORGANIZATION2 ) );
		dto.setContactName2( rs.getString( COLUMN_CONTACT_NAME2 ) );
		dto.setContactTitle2( rs.getString( COLUMN_CONTACT_TITLE2 ) );
		dto.setEmailAddress2( rs.getString( COLUMN_EMAIL_ADDRESS2 ) );
		dto.setOrganization3( rs.getString( COLUMN_ORGANIZATION3 ) );
		dto.setContactName3( rs.getString( COLUMN_CONTACT_NAME3 ) );
		dto.setContactTitle3( rs.getString( COLUMN_CONTACT_TITLE3 ) );
		dto.setEmailAddress3( rs.getString( COLUMN_EMAIL_ADDRESS3 ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModified( rs.getTimestamp(COLUMN_DATE_MODIFIED ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Contactsreferences dto)
	{
		dto.setIdModified( false );
		dto.setSupplierIdModified( false );
		dto.setIsHpTraderModified( false );
		dto.setContractTitleModified( false );
		dto.setContractRefModified( false );
		dto.setExpiryDateModified( false );
		dto.setHpContractMgrModified( false );
		dto.setDivName1Modified( false );
		dto.setContactName1Modified( false );
		dto.setSiteLocation1Modified( false );
		dto.setLastMeetingDate1Modified( false );
		dto.setApproxServicePeriod1Modified( false );
		dto.setDivName2Modified( false );
		dto.setHpContactName2Modified( false );
		dto.setSiteLocation2Modified( false );
		dto.setLastMeetingDate2Modified( false );
		dto.setApproxServicePeriod2Modified( false );
		dto.setDivName3Modified( false );
		dto.setHpContactName3Modified( false );
		dto.setSiteLocation3Modified( false );
		dto.setLastMeetingDate3Modified( false );
		dto.setApproxServicePeriod3Modified( false );
		dto.setOrganization1Modified( false );
		dto.setHpContactName1Modified( false );
		dto.setContactTitle1Modified( false );
		dto.setEmailAddress1Modified( false );
		dto.setOrganization2Modified( false );
		dto.setContactName2Modified( false );
		dto.setContactTitle2Modified( false );
		dto.setEmailAddress2Modified( false );
		dto.setOrganization3Modified( false );
		dto.setContactName3Modified( false );
		dto.setContactTitle3Modified( false );
		dto.setEmailAddress3Modified( false );
		dto.setDateCreatedModified( false );
		dto.setDateModifiedModified( false );
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the specified arbitrary SQL statement
	 */
	public Contactsreferences[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContactsreferencesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsreferencesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the contactsreferences table that match the specified arbitrary SQL statement
	 */
	public Contactsreferences[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContactsreferencesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsreferencesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
