/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.jdbc;

import com.hp.supplier.dao.*;
import com.hp.supplier.factory.*;
import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class OldDaoImpl extends AbstractDAO implements OldDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, supplier_id, is_manufacturing, is_professinal_services, is_construction, is_educational, is_facility_mgmt, is_financial_services, is_food_services, is_healthcare, is_ict, is_logistic, is_marketing, is_realestate, is_recruitment, is_retail, is_social_care, utilites, is_facilities, is_hardware, is_logistic_services, is_marketing_print, is_recruitment_HR, is_software, is_specialist_consultancy, is_telecom, is_other_services, is_building, is_computer, is_electronic, is_environmental, is_furniture, is_general, is_health_equip, is_it_Acc, is_laptop, is_mainframe, is_monitors, is_mobile, is_network, is_package, is_photo, is_printer_allinone, is_printer_inks, is_security, is_scanners, is_soft_package, is_touchpad, is_others_principal, is_asset_recovery, is_specialist_it, is_media, is_risk_mgmt, is_courier, is_facility_buld_mgmt, is_financial_mgmt, is_health_training, is_hrs, is_fright, is_media_pds, is_network_cabling, is_printing_services, is_photo_services, is_reseller, is_security_mgmt, is_sdrd, is_ssrd, is_ssm, is_tech_services, is_sitn, is_go, is_travel_services, is_utility_services, is_others_services, date_created, date_modified FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, supplier_id, is_manufacturing, is_professinal_services, is_construction, is_educational, is_facility_mgmt, is_financial_services, is_food_services, is_healthcare, is_ict, is_logistic, is_marketing, is_realestate, is_recruitment, is_retail, is_social_care, utilites, is_facilities, is_hardware, is_logistic_services, is_marketing_print, is_recruitment_HR, is_software, is_specialist_consultancy, is_telecom, is_other_services, is_building, is_computer, is_electronic, is_environmental, is_furniture, is_general, is_health_equip, is_it_Acc, is_laptop, is_mainframe, is_monitors, is_mobile, is_network, is_package, is_photo, is_printer_allinone, is_printer_inks, is_security, is_scanners, is_soft_package, is_touchpad, is_others_principal, is_asset_recovery, is_specialist_it, is_media, is_risk_mgmt, is_courier, is_facility_buld_mgmt, is_financial_mgmt, is_health_training, is_hrs, is_fright, is_media_pds, is_network_cabling, is_printing_services, is_photo_services, is_reseller, is_security_mgmt, is_sdrd, is_ssrd, is_ssm, is_tech_services, is_sitn, is_go, is_travel_services, is_utility_services, is_others_services, date_created, date_modified ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, supplier_id = ?, is_manufacturing = ?, is_professinal_services = ?, is_construction = ?, is_educational = ?, is_facility_mgmt = ?, is_financial_services = ?, is_food_services = ?, is_healthcare = ?, is_ict = ?, is_logistic = ?, is_marketing = ?, is_realestate = ?, is_recruitment = ?, is_retail = ?, is_social_care = ?, utilites = ?, is_facilities = ?, is_hardware = ?, is_logistic_services = ?, is_marketing_print = ?, is_recruitment_HR = ?, is_software = ?, is_specialist_consultancy = ?, is_telecom = ?, is_other_services = ?, is_building = ?, is_computer = ?, is_electronic = ?, is_environmental = ?, is_furniture = ?, is_general = ?, is_health_equip = ?, is_it_Acc = ?, is_laptop = ?, is_mainframe = ?, is_monitors = ?, is_mobile = ?, is_network = ?, is_package = ?, is_photo = ?, is_printer_allinone = ?, is_printer_inks = ?, is_security = ?, is_scanners = ?, is_soft_package = ?, is_touchpad = ?, is_others_principal = ?, is_asset_recovery = ?, is_specialist_it = ?, is_media = ?, is_risk_mgmt = ?, is_courier = ?, is_facility_buld_mgmt = ?, is_financial_mgmt = ?, is_health_training = ?, is_hrs = ?, is_fright = ?, is_media_pds = ?, is_network_cabling = ?, is_printing_services = ?, is_photo_services = ?, is_reseller = ?, is_security_mgmt = ?, is_sdrd = ?, is_ssrd = ?, is_ssm = ?, is_tech_services = ?, is_sitn = ?, is_go = ?, is_travel_services = ?, is_utility_services = ?, is_others_services = ?, date_created = ?, date_modified = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column supplier_id
	 */
	protected static final int COLUMN_SUPPLIER_ID = 2;

	/** 
	 * Index of column is_manufacturing
	 */
	protected static final int COLUMN_IS_MANUFACTURING = 3;

	/** 
	 * Index of column is_professinal_services
	 */
	protected static final int COLUMN_IS_PROFESSINAL_SERVICES = 4;

	/** 
	 * Index of column is_construction
	 */
	protected static final int COLUMN_IS_CONSTRUCTION = 5;

	/** 
	 * Index of column is_educational
	 */
	protected static final int COLUMN_IS_EDUCATIONAL = 6;

	/** 
	 * Index of column is_facility_mgmt
	 */
	protected static final int COLUMN_IS_FACILITY_MGMT = 7;

	/** 
	 * Index of column is_financial_services
	 */
	protected static final int COLUMN_IS_FINANCIAL_SERVICES = 8;

	/** 
	 * Index of column is_food_services
	 */
	protected static final int COLUMN_IS_FOOD_SERVICES = 9;

	/** 
	 * Index of column is_healthcare
	 */
	protected static final int COLUMN_IS_HEALTHCARE = 10;

	/** 
	 * Index of column is_ict
	 */
	protected static final int COLUMN_IS_ICT = 11;

	/** 
	 * Index of column is_logistic
	 */
	protected static final int COLUMN_IS_LOGISTIC = 12;

	/** 
	 * Index of column is_marketing
	 */
	protected static final int COLUMN_IS_MARKETING = 13;

	/** 
	 * Index of column is_realestate
	 */
	protected static final int COLUMN_IS_REALESTATE = 14;

	/** 
	 * Index of column is_recruitment
	 */
	protected static final int COLUMN_IS_RECRUITMENT = 15;

	/** 
	 * Index of column is_retail
	 */
	protected static final int COLUMN_IS_RETAIL = 16;

	/** 
	 * Index of column is_social_care
	 */
	protected static final int COLUMN_IS_SOCIAL_CARE = 17;

	/** 
	 * Index of column utilites
	 */
	protected static final int COLUMN_UTILITES = 18;

	/** 
	 * Index of column is_facilities
	 */
	protected static final int COLUMN_IS_FACILITIES = 19;

	/** 
	 * Index of column is_hardware
	 */
	protected static final int COLUMN_IS_HARDWARE = 20;

	/** 
	 * Index of column is_logistic_services
	 */
	protected static final int COLUMN_IS_LOGISTIC_SERVICES = 21;

	/** 
	 * Index of column is_marketing_print
	 */
	protected static final int COLUMN_IS_MARKETING_PRINT = 22;

	/** 
	 * Index of column is_recruitment_HR
	 */
	protected static final int COLUMN_IS_RECRUITMENT_HR = 23;

	/** 
	 * Index of column is_software
	 */
	protected static final int COLUMN_IS_SOFTWARE = 24;

	/** 
	 * Index of column is_specialist_consultancy
	 */
	protected static final int COLUMN_IS_SPECIALIST_CONSULTANCY = 25;

	/** 
	 * Index of column is_telecom
	 */
	protected static final int COLUMN_IS_TELECOM = 26;

	/** 
	 * Index of column is_other_services
	 */
	protected static final int COLUMN_IS_OTHER_SERVICES = 27;

	/** 
	 * Index of column is_building
	 */
	protected static final int COLUMN_IS_BUILDING = 28;

	/** 
	 * Index of column is_computer
	 */
	protected static final int COLUMN_IS_COMPUTER = 29;

	/** 
	 * Index of column is_electronic
	 */
	protected static final int COLUMN_IS_ELECTRONIC = 30;

	/** 
	 * Index of column is_environmental
	 */
	protected static final int COLUMN_IS_ENVIRONMENTAL = 31;

	/** 
	 * Index of column is_furniture
	 */
	protected static final int COLUMN_IS_FURNITURE = 32;

	/** 
	 * Index of column is_general
	 */
	protected static final int COLUMN_IS_GENERAL = 33;

	/** 
	 * Index of column is_health_equip
	 */
	protected static final int COLUMN_IS_HEALTH_EQUIP = 34;

	/** 
	 * Index of column is_it_Acc
	 */
	protected static final int COLUMN_IS_IT_ACC = 35;

	/** 
	 * Index of column is_laptop
	 */
	protected static final int COLUMN_IS_LAPTOP = 36;

	/** 
	 * Index of column is_mainframe
	 */
	protected static final int COLUMN_IS_MAINFRAME = 37;

	/** 
	 * Index of column is_monitors
	 */
	protected static final int COLUMN_IS_MONITORS = 38;

	/** 
	 * Index of column is_mobile
	 */
	protected static final int COLUMN_IS_MOBILE = 39;

	/** 
	 * Index of column is_network
	 */
	protected static final int COLUMN_IS_NETWORK = 40;

	/** 
	 * Index of column is_package
	 */
	protected static final int COLUMN_IS_PACKAGE = 41;

	/** 
	 * Index of column is_photo
	 */
	protected static final int COLUMN_IS_PHOTO = 42;

	/** 
	 * Index of column is_printer_allinone
	 */
	protected static final int COLUMN_IS_PRINTER_ALLINONE = 43;

	/** 
	 * Index of column is_printer_inks
	 */
	protected static final int COLUMN_IS_PRINTER_INKS = 44;

	/** 
	 * Index of column is_security
	 */
	protected static final int COLUMN_IS_SECURITY = 45;

	/** 
	 * Index of column is_scanners
	 */
	protected static final int COLUMN_IS_SCANNERS = 46;

	/** 
	 * Index of column is_soft_package
	 */
	protected static final int COLUMN_IS_SOFT_PACKAGE = 47;

	/** 
	 * Index of column is_touchpad
	 */
	protected static final int COLUMN_IS_TOUCHPAD = 48;

	/** 
	 * Index of column is_others_principal
	 */
	protected static final int COLUMN_IS_OTHERS_PRINCIPAL = 49;

	/** 
	 * Index of column is_asset_recovery
	 */
	protected static final int COLUMN_IS_ASSET_RECOVERY = 50;

	/** 
	 * Index of column is_specialist_it
	 */
	protected static final int COLUMN_IS_SPECIALIST_IT = 51;

	/** 
	 * Index of column is_media
	 */
	protected static final int COLUMN_IS_MEDIA = 52;

	/** 
	 * Index of column is_risk_mgmt
	 */
	protected static final int COLUMN_IS_RISK_MGMT = 53;

	/** 
	 * Index of column is_courier
	 */
	protected static final int COLUMN_IS_COURIER = 54;

	/** 
	 * Index of column is_facility_buld_mgmt
	 */
	protected static final int COLUMN_IS_FACILITY_BULD_MGMT = 55;

	/** 
	 * Index of column is_financial_mgmt
	 */
	protected static final int COLUMN_IS_FINANCIAL_MGMT = 56;

	/** 
	 * Index of column is_health_training
	 */
	protected static final int COLUMN_IS_HEALTH_TRAINING = 57;

	/** 
	 * Index of column is_hrs
	 */
	protected static final int COLUMN_IS_HRS = 58;

	/** 
	 * Index of column is_fright
	 */
	protected static final int COLUMN_IS_FRIGHT = 59;

	/** 
	 * Index of column is_media_pds
	 */
	protected static final int COLUMN_IS_MEDIA_PDS = 60;

	/** 
	 * Index of column is_network_cabling
	 */
	protected static final int COLUMN_IS_NETWORK_CABLING = 61;

	/** 
	 * Index of column is_printing_services
	 */
	protected static final int COLUMN_IS_PRINTING_SERVICES = 62;

	/** 
	 * Index of column is_photo_services
	 */
	protected static final int COLUMN_IS_PHOTO_SERVICES = 63;

	/** 
	 * Index of column is_reseller
	 */
	protected static final int COLUMN_IS_RESELLER = 64;

	/** 
	 * Index of column is_security_mgmt
	 */
	protected static final int COLUMN_IS_SECURITY_MGMT = 65;

	/** 
	 * Index of column is_sdrd
	 */
	protected static final int COLUMN_IS_SDRD = 66;

	/** 
	 * Index of column is_ssrd
	 */
	protected static final int COLUMN_IS_SSRD = 67;

	/** 
	 * Index of column is_ssm
	 */
	protected static final int COLUMN_IS_SSM = 68;

	/** 
	 * Index of column is_tech_services
	 */
	protected static final int COLUMN_IS_TECH_SERVICES = 69;

	/** 
	 * Index of column is_sitn
	 */
	protected static final int COLUMN_IS_SITN = 70;

	/** 
	 * Index of column is_go
	 */
	protected static final int COLUMN_IS_GO = 71;

	/** 
	 * Index of column is_travel_services
	 */
	protected static final int COLUMN_IS_TRAVEL_SERVICES = 72;

	/** 
	 * Index of column is_utility_services
	 */
	protected static final int COLUMN_IS_UTILITY_SERVICES = 73;

	/** 
	 * Index of column is_others_services
	 */
	protected static final int COLUMN_IS_OTHERS_SERVICES = 74;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 75;

	/** 
	 * Index of column date_modified
	 */
	protected static final int COLUMN_DATE_MODIFIED = 76;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 76;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the old table.
	 */
	public OldPk insert(Old dto) throws OldDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "supplier_id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsManufacturingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_manufacturing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsProfessinalServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_professinal_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsConstructionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_construction" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsEducationalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_educational" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_facility_mgmt" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFinancialServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_financial_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFoodServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_food_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHealthcareModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_healthcare" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsIctModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_ict" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLogisticModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_logistic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMarketingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_marketing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRealestateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_realestate" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRecruitmentModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_recruitment" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRetailModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_retail" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSocialCareModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_social_care" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUtilitesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "utilites" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFacilitiesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_facilities" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHardwareModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_hardware" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLogisticServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_logistic_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMarketingPrintModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_marketing_print" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_recruitment_HR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSoftwareModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_software" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSpecialistConsultancyModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_specialist_consultancy" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTelecomModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_telecom" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOtherServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_other_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsBuildingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_building" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsComputerModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_computer" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsElectronicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_electronic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsEnvironmentalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_environmental" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFurnitureModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_furniture" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsGeneralModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_general" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHealthEquipModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_health_equip" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsItAccModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_it_Acc" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLaptopModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_laptop" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMainframeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_mainframe" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMonitorsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_monitors" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMobileModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_mobile" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsNetworkModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_network" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPackageModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_package" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPhotoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_photo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPrinterAllinoneModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_printer_allinone" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPrinterInksModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_printer_inks" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSecurityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_security" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsScannersModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_scanners" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSoftPackageModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_soft_package" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTouchpadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_touchpad" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOthersPrincipalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_others_principal" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_asset_recovery" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSpecialistItModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_specialist_it" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMediaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_media" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRiskMgmtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_risk_mgmt" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsCourierModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_courier" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFacilityBuldMgmtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_facility_buld_mgmt" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFinancialMgmtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_financial_mgmt" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHealthTrainingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_health_training" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHrsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_hrs" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFrightModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_fright" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMediaPdsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_media_pds" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsNetworkCablingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_network_cabling" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPrintingServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_printing_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPhotoServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_photo_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsResellerModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_reseller" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSecurityMgmtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_security_mgmt" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSdrdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_sdrd" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSsrdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_ssrd" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSsmModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_ssm" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTechServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_tech_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSitnModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_sitn" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsGoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_go" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTravelServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_travel_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsUtilityServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_utility_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOthersServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_others_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_created" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_modified" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isIsManufacturingModified()) {
				stmt.setString( index++, dto.getIsManufacturing() );
			}
		
			if (dto.isIsProfessinalServicesModified()) {
				stmt.setString( index++, dto.getIsProfessinalServices() );
			}
		
			if (dto.isIsConstructionModified()) {
				stmt.setString( index++, dto.getIsConstruction() );
			}
		
			if (dto.isIsEducationalModified()) {
				stmt.setString( index++, dto.getIsEducational() );
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				stmt.setString( index++, dto.getIsFacilityMgmt() );
			}
		
			if (dto.isIsFinancialServicesModified()) {
				stmt.setString( index++, dto.getIsFinancialServices() );
			}
		
			if (dto.isIsFoodServicesModified()) {
				stmt.setString( index++, dto.getIsFoodServices() );
			}
		
			if (dto.isIsHealthcareModified()) {
				stmt.setString( index++, dto.getIsHealthcare() );
			}
		
			if (dto.isIsIctModified()) {
				stmt.setString( index++, dto.getIsIct() );
			}
		
			if (dto.isIsLogisticModified()) {
				stmt.setString( index++, dto.getIsLogistic() );
			}
		
			if (dto.isIsMarketingModified()) {
				stmt.setString( index++, dto.getIsMarketing() );
			}
		
			if (dto.isIsRealestateModified()) {
				stmt.setString( index++, dto.getIsRealestate() );
			}
		
			if (dto.isIsRecruitmentModified()) {
				stmt.setString( index++, dto.getIsRecruitment() );
			}
		
			if (dto.isIsRetailModified()) {
				stmt.setString( index++, dto.getIsRetail() );
			}
		
			if (dto.isIsSocialCareModified()) {
				stmt.setString( index++, dto.getIsSocialCare() );
			}
		
			if (dto.isUtilitesModified()) {
				stmt.setString( index++, dto.getUtilites() );
			}
		
			if (dto.isIsFacilitiesModified()) {
				stmt.setString( index++, dto.getIsFacilities() );
			}
		
			if (dto.isIsHardwareModified()) {
				stmt.setString( index++, dto.getIsHardware() );
			}
		
			if (dto.isIsLogisticServicesModified()) {
				stmt.setString( index++, dto.getIsLogisticServices() );
			}
		
			if (dto.isIsMarketingPrintModified()) {
				stmt.setString( index++, dto.getIsMarketingPrint() );
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				stmt.setString( index++, dto.getIsRecruitmentHr() );
			}
		
			if (dto.isIsSoftwareModified()) {
				stmt.setString( index++, dto.getIsSoftware() );
			}
		
			if (dto.isIsSpecialistConsultancyModified()) {
				stmt.setString( index++, dto.getIsSpecialistConsultancy() );
			}
		
			if (dto.isIsTelecomModified()) {
				stmt.setString( index++, dto.getIsTelecom() );
			}
		
			if (dto.isIsOtherServicesModified()) {
				stmt.setString( index++, dto.getIsOtherServices() );
			}
		
			if (dto.isIsBuildingModified()) {
				stmt.setString( index++, dto.getIsBuilding() );
			}
		
			if (dto.isIsComputerModified()) {
				stmt.setString( index++, dto.getIsComputer() );
			}
		
			if (dto.isIsElectronicModified()) {
				stmt.setString( index++, dto.getIsElectronic() );
			}
		
			if (dto.isIsEnvironmentalModified()) {
				stmt.setString( index++, dto.getIsEnvironmental() );
			}
		
			if (dto.isIsFurnitureModified()) {
				stmt.setString( index++, dto.getIsFurniture() );
			}
		
			if (dto.isIsGeneralModified()) {
				stmt.setString( index++, dto.getIsGeneral() );
			}
		
			if (dto.isIsHealthEquipModified()) {
				stmt.setString( index++, dto.getIsHealthEquip() );
			}
		
			if (dto.isIsItAccModified()) {
				stmt.setString( index++, dto.getIsItAcc() );
			}
		
			if (dto.isIsLaptopModified()) {
				stmt.setString( index++, dto.getIsLaptop() );
			}
		
			if (dto.isIsMainframeModified()) {
				stmt.setString( index++, dto.getIsMainframe() );
			}
		
			if (dto.isIsMonitorsModified()) {
				stmt.setString( index++, dto.getIsMonitors() );
			}
		
			if (dto.isIsMobileModified()) {
				stmt.setString( index++, dto.getIsMobile() );
			}
		
			if (dto.isIsNetworkModified()) {
				stmt.setString( index++, dto.getIsNetwork() );
			}
		
			if (dto.isIsPackageModified()) {
				stmt.setString( index++, dto.getIsPackage() );
			}
		
			if (dto.isIsPhotoModified()) {
				stmt.setString( index++, dto.getIsPhoto() );
			}
		
			if (dto.isIsPrinterAllinoneModified()) {
				stmt.setString( index++, dto.getIsPrinterAllinone() );
			}
		
			if (dto.isIsPrinterInksModified()) {
				stmt.setString( index++, dto.getIsPrinterInks() );
			}
		
			if (dto.isIsSecurityModified()) {
				stmt.setString( index++, dto.getIsSecurity() );
			}
		
			if (dto.isIsScannersModified()) {
				stmt.setString( index++, dto.getIsScanners() );
			}
		
			if (dto.isIsSoftPackageModified()) {
				stmt.setString( index++, dto.getIsSoftPackage() );
			}
		
			if (dto.isIsTouchpadModified()) {
				stmt.setString( index++, dto.getIsTouchpad() );
			}
		
			if (dto.isIsOthersPrincipalModified()) {
				stmt.setString( index++, dto.getIsOthersPrincipal() );
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				stmt.setString( index++, dto.getIsAssetRecovery() );
			}
		
			if (dto.isIsSpecialistItModified()) {
				stmt.setString( index++, dto.getIsSpecialistIt() );
			}
		
			if (dto.isIsMediaModified()) {
				stmt.setString( index++, dto.getIsMedia() );
			}
		
			if (dto.isIsRiskMgmtModified()) {
				stmt.setString( index++, dto.getIsRiskMgmt() );
			}
		
			if (dto.isIsCourierModified()) {
				stmt.setString( index++, dto.getIsCourier() );
			}
		
			if (dto.isIsFacilityBuldMgmtModified()) {
				stmt.setString( index++, dto.getIsFacilityBuldMgmt() );
			}
		
			if (dto.isIsFinancialMgmtModified()) {
				stmt.setString( index++, dto.getIsFinancialMgmt() );
			}
		
			if (dto.isIsHealthTrainingModified()) {
				stmt.setString( index++, dto.getIsHealthTraining() );
			}
		
			if (dto.isIsHrsModified()) {
				stmt.setString( index++, dto.getIsHrs() );
			}
		
			if (dto.isIsFrightModified()) {
				stmt.setString( index++, dto.getIsFright() );
			}
		
			if (dto.isIsMediaPdsModified()) {
				stmt.setString( index++, dto.getIsMediaPds() );
			}
		
			if (dto.isIsNetworkCablingModified()) {
				stmt.setString( index++, dto.getIsNetworkCabling() );
			}
		
			if (dto.isIsPrintingServicesModified()) {
				stmt.setString( index++, dto.getIsPrintingServices() );
			}
		
			if (dto.isIsPhotoServicesModified()) {
				stmt.setString( index++, dto.getIsPhotoServices() );
			}
		
			if (dto.isIsResellerModified()) {
				stmt.setString( index++, dto.getIsReseller() );
			}
		
			if (dto.isIsSecurityMgmtModified()) {
				stmt.setString( index++, dto.getIsSecurityMgmt() );
			}
		
			if (dto.isIsSdrdModified()) {
				stmt.setString( index++, dto.getIsSdrd() );
			}
		
			if (dto.isIsSsrdModified()) {
				stmt.setString( index++, dto.getIsSsrd() );
			}
		
			if (dto.isIsSsmModified()) {
				stmt.setString( index++, dto.getIsSsm() );
			}
		
			if (dto.isIsTechServicesModified()) {
				stmt.setString( index++, dto.getIsTechServices() );
			}
		
			if (dto.isIsSitnModified()) {
				stmt.setString( index++, dto.getIsSitn() );
			}
		
			if (dto.isIsGoModified()) {
				stmt.setString( index++, dto.getIsGo() );
			}
		
			if (dto.isIsTravelServicesModified()) {
				stmt.setString( index++, dto.getIsTravelServices() );
			}
		
			if (dto.isIsUtilityServicesModified()) {
				stmt.setString( index++, dto.getIsUtilityServices() );
			}
		
			if (dto.isIsOthersServicesModified()) {
				stmt.setString( index++, dto.getIsOthersServices() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OldDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the old table.
	 */
	public void update(OldPk pk, Old dto) throws OldDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "supplier_id=?" );
				modified=true;
			}
		
			if (dto.isIsManufacturingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_manufacturing=?" );
				modified=true;
			}
		
			if (dto.isIsProfessinalServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_professinal_services=?" );
				modified=true;
			}
		
			if (dto.isIsConstructionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_construction=?" );
				modified=true;
			}
		
			if (dto.isIsEducationalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_educational=?" );
				modified=true;
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_facility_mgmt=?" );
				modified=true;
			}
		
			if (dto.isIsFinancialServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_financial_services=?" );
				modified=true;
			}
		
			if (dto.isIsFoodServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_food_services=?" );
				modified=true;
			}
		
			if (dto.isIsHealthcareModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_healthcare=?" );
				modified=true;
			}
		
			if (dto.isIsIctModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_ict=?" );
				modified=true;
			}
		
			if (dto.isIsLogisticModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_logistic=?" );
				modified=true;
			}
		
			if (dto.isIsMarketingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_marketing=?" );
				modified=true;
			}
		
			if (dto.isIsRealestateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_realestate=?" );
				modified=true;
			}
		
			if (dto.isIsRecruitmentModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_recruitment=?" );
				modified=true;
			}
		
			if (dto.isIsRetailModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_retail=?" );
				modified=true;
			}
		
			if (dto.isIsSocialCareModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_social_care=?" );
				modified=true;
			}
		
			if (dto.isUtilitesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "utilites=?" );
				modified=true;
			}
		
			if (dto.isIsFacilitiesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_facilities=?" );
				modified=true;
			}
		
			if (dto.isIsHardwareModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_hardware=?" );
				modified=true;
			}
		
			if (dto.isIsLogisticServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_logistic_services=?" );
				modified=true;
			}
		
			if (dto.isIsMarketingPrintModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_marketing_print=?" );
				modified=true;
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_recruitment_HR=?" );
				modified=true;
			}
		
			if (dto.isIsSoftwareModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_software=?" );
				modified=true;
			}
		
			if (dto.isIsSpecialistConsultancyModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_specialist_consultancy=?" );
				modified=true;
			}
		
			if (dto.isIsTelecomModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_telecom=?" );
				modified=true;
			}
		
			if (dto.isIsOtherServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_other_services=?" );
				modified=true;
			}
		
			if (dto.isIsBuildingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_building=?" );
				modified=true;
			}
		
			if (dto.isIsComputerModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_computer=?" );
				modified=true;
			}
		
			if (dto.isIsElectronicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_electronic=?" );
				modified=true;
			}
		
			if (dto.isIsEnvironmentalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_environmental=?" );
				modified=true;
			}
		
			if (dto.isIsFurnitureModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_furniture=?" );
				modified=true;
			}
		
			if (dto.isIsGeneralModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_general=?" );
				modified=true;
			}
		
			if (dto.isIsHealthEquipModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_health_equip=?" );
				modified=true;
			}
		
			if (dto.isIsItAccModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_it_Acc=?" );
				modified=true;
			}
		
			if (dto.isIsLaptopModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_laptop=?" );
				modified=true;
			}
		
			if (dto.isIsMainframeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_mainframe=?" );
				modified=true;
			}
		
			if (dto.isIsMonitorsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_monitors=?" );
				modified=true;
			}
		
			if (dto.isIsMobileModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_mobile=?" );
				modified=true;
			}
		
			if (dto.isIsNetworkModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_network=?" );
				modified=true;
			}
		
			if (dto.isIsPackageModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_package=?" );
				modified=true;
			}
		
			if (dto.isIsPhotoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_photo=?" );
				modified=true;
			}
		
			if (dto.isIsPrinterAllinoneModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_printer_allinone=?" );
				modified=true;
			}
		
			if (dto.isIsPrinterInksModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_printer_inks=?" );
				modified=true;
			}
		
			if (dto.isIsSecurityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_security=?" );
				modified=true;
			}
		
			if (dto.isIsScannersModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_scanners=?" );
				modified=true;
			}
		
			if (dto.isIsSoftPackageModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_soft_package=?" );
				modified=true;
			}
		
			if (dto.isIsTouchpadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_touchpad=?" );
				modified=true;
			}
		
			if (dto.isIsOthersPrincipalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_others_principal=?" );
				modified=true;
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_asset_recovery=?" );
				modified=true;
			}
		
			if (dto.isIsSpecialistItModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_specialist_it=?" );
				modified=true;
			}
		
			if (dto.isIsMediaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_media=?" );
				modified=true;
			}
		
			if (dto.isIsRiskMgmtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_risk_mgmt=?" );
				modified=true;
			}
		
			if (dto.isIsCourierModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_courier=?" );
				modified=true;
			}
		
			if (dto.isIsFacilityBuldMgmtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_facility_buld_mgmt=?" );
				modified=true;
			}
		
			if (dto.isIsFinancialMgmtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_financial_mgmt=?" );
				modified=true;
			}
		
			if (dto.isIsHealthTrainingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_health_training=?" );
				modified=true;
			}
		
			if (dto.isIsHrsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_hrs=?" );
				modified=true;
			}
		
			if (dto.isIsFrightModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_fright=?" );
				modified=true;
			}
		
			if (dto.isIsMediaPdsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_media_pds=?" );
				modified=true;
			}
		
			if (dto.isIsNetworkCablingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_network_cabling=?" );
				modified=true;
			}
		
			if (dto.isIsPrintingServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_printing_services=?" );
				modified=true;
			}
		
			if (dto.isIsPhotoServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_photo_services=?" );
				modified=true;
			}
		
			if (dto.isIsResellerModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_reseller=?" );
				modified=true;
			}
		
			if (dto.isIsSecurityMgmtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_security_mgmt=?" );
				modified=true;
			}
		
			if (dto.isIsSdrdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_sdrd=?" );
				modified=true;
			}
		
			if (dto.isIsSsrdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_ssrd=?" );
				modified=true;
			}
		
			if (dto.isIsSsmModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_ssm=?" );
				modified=true;
			}
		
			if (dto.isIsTechServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_tech_services=?" );
				modified=true;
			}
		
			if (dto.isIsSitnModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_sitn=?" );
				modified=true;
			}
		
			if (dto.isIsGoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_go=?" );
				modified=true;
			}
		
			if (dto.isIsTravelServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_travel_services=?" );
				modified=true;
			}
		
			if (dto.isIsUtilityServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_utility_services=?" );
				modified=true;
			}
		
			if (dto.isIsOthersServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_others_services=?" );
				modified=true;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_created=?" );
				modified=true;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_modified=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isIsManufacturingModified()) {
				stmt.setString( index++, dto.getIsManufacturing() );
			}
		
			if (dto.isIsProfessinalServicesModified()) {
				stmt.setString( index++, dto.getIsProfessinalServices() );
			}
		
			if (dto.isIsConstructionModified()) {
				stmt.setString( index++, dto.getIsConstruction() );
			}
		
			if (dto.isIsEducationalModified()) {
				stmt.setString( index++, dto.getIsEducational() );
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				stmt.setString( index++, dto.getIsFacilityMgmt() );
			}
		
			if (dto.isIsFinancialServicesModified()) {
				stmt.setString( index++, dto.getIsFinancialServices() );
			}
		
			if (dto.isIsFoodServicesModified()) {
				stmt.setString( index++, dto.getIsFoodServices() );
			}
		
			if (dto.isIsHealthcareModified()) {
				stmt.setString( index++, dto.getIsHealthcare() );
			}
		
			if (dto.isIsIctModified()) {
				stmt.setString( index++, dto.getIsIct() );
			}
		
			if (dto.isIsLogisticModified()) {
				stmt.setString( index++, dto.getIsLogistic() );
			}
		
			if (dto.isIsMarketingModified()) {
				stmt.setString( index++, dto.getIsMarketing() );
			}
		
			if (dto.isIsRealestateModified()) {
				stmt.setString( index++, dto.getIsRealestate() );
			}
		
			if (dto.isIsRecruitmentModified()) {
				stmt.setString( index++, dto.getIsRecruitment() );
			}
		
			if (dto.isIsRetailModified()) {
				stmt.setString( index++, dto.getIsRetail() );
			}
		
			if (dto.isIsSocialCareModified()) {
				stmt.setString( index++, dto.getIsSocialCare() );
			}
		
			if (dto.isUtilitesModified()) {
				stmt.setString( index++, dto.getUtilites() );
			}
		
			if (dto.isIsFacilitiesModified()) {
				stmt.setString( index++, dto.getIsFacilities() );
			}
		
			if (dto.isIsHardwareModified()) {
				stmt.setString( index++, dto.getIsHardware() );
			}
		
			if (dto.isIsLogisticServicesModified()) {
				stmt.setString( index++, dto.getIsLogisticServices() );
			}
		
			if (dto.isIsMarketingPrintModified()) {
				stmt.setString( index++, dto.getIsMarketingPrint() );
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				stmt.setString( index++, dto.getIsRecruitmentHr() );
			}
		
			if (dto.isIsSoftwareModified()) {
				stmt.setString( index++, dto.getIsSoftware() );
			}
		
			if (dto.isIsSpecialistConsultancyModified()) {
				stmt.setString( index++, dto.getIsSpecialistConsultancy() );
			}
		
			if (dto.isIsTelecomModified()) {
				stmt.setString( index++, dto.getIsTelecom() );
			}
		
			if (dto.isIsOtherServicesModified()) {
				stmt.setString( index++, dto.getIsOtherServices() );
			}
		
			if (dto.isIsBuildingModified()) {
				stmt.setString( index++, dto.getIsBuilding() );
			}
		
			if (dto.isIsComputerModified()) {
				stmt.setString( index++, dto.getIsComputer() );
			}
		
			if (dto.isIsElectronicModified()) {
				stmt.setString( index++, dto.getIsElectronic() );
			}
		
			if (dto.isIsEnvironmentalModified()) {
				stmt.setString( index++, dto.getIsEnvironmental() );
			}
		
			if (dto.isIsFurnitureModified()) {
				stmt.setString( index++, dto.getIsFurniture() );
			}
		
			if (dto.isIsGeneralModified()) {
				stmt.setString( index++, dto.getIsGeneral() );
			}
		
			if (dto.isIsHealthEquipModified()) {
				stmt.setString( index++, dto.getIsHealthEquip() );
			}
		
			if (dto.isIsItAccModified()) {
				stmt.setString( index++, dto.getIsItAcc() );
			}
		
			if (dto.isIsLaptopModified()) {
				stmt.setString( index++, dto.getIsLaptop() );
			}
		
			if (dto.isIsMainframeModified()) {
				stmt.setString( index++, dto.getIsMainframe() );
			}
		
			if (dto.isIsMonitorsModified()) {
				stmt.setString( index++, dto.getIsMonitors() );
			}
		
			if (dto.isIsMobileModified()) {
				stmt.setString( index++, dto.getIsMobile() );
			}
		
			if (dto.isIsNetworkModified()) {
				stmt.setString( index++, dto.getIsNetwork() );
			}
		
			if (dto.isIsPackageModified()) {
				stmt.setString( index++, dto.getIsPackage() );
			}
		
			if (dto.isIsPhotoModified()) {
				stmt.setString( index++, dto.getIsPhoto() );
			}
		
			if (dto.isIsPrinterAllinoneModified()) {
				stmt.setString( index++, dto.getIsPrinterAllinone() );
			}
		
			if (dto.isIsPrinterInksModified()) {
				stmt.setString( index++, dto.getIsPrinterInks() );
			}
		
			if (dto.isIsSecurityModified()) {
				stmt.setString( index++, dto.getIsSecurity() );
			}
		
			if (dto.isIsScannersModified()) {
				stmt.setString( index++, dto.getIsScanners() );
			}
		
			if (dto.isIsSoftPackageModified()) {
				stmt.setString( index++, dto.getIsSoftPackage() );
			}
		
			if (dto.isIsTouchpadModified()) {
				stmt.setString( index++, dto.getIsTouchpad() );
			}
		
			if (dto.isIsOthersPrincipalModified()) {
				stmt.setString( index++, dto.getIsOthersPrincipal() );
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				stmt.setString( index++, dto.getIsAssetRecovery() );
			}
		
			if (dto.isIsSpecialistItModified()) {
				stmt.setString( index++, dto.getIsSpecialistIt() );
			}
		
			if (dto.isIsMediaModified()) {
				stmt.setString( index++, dto.getIsMedia() );
			}
		
			if (dto.isIsRiskMgmtModified()) {
				stmt.setString( index++, dto.getIsRiskMgmt() );
			}
		
			if (dto.isIsCourierModified()) {
				stmt.setString( index++, dto.getIsCourier() );
			}
		
			if (dto.isIsFacilityBuldMgmtModified()) {
				stmt.setString( index++, dto.getIsFacilityBuldMgmt() );
			}
		
			if (dto.isIsFinancialMgmtModified()) {
				stmt.setString( index++, dto.getIsFinancialMgmt() );
			}
		
			if (dto.isIsHealthTrainingModified()) {
				stmt.setString( index++, dto.getIsHealthTraining() );
			}
		
			if (dto.isIsHrsModified()) {
				stmt.setString( index++, dto.getIsHrs() );
			}
		
			if (dto.isIsFrightModified()) {
				stmt.setString( index++, dto.getIsFright() );
			}
		
			if (dto.isIsMediaPdsModified()) {
				stmt.setString( index++, dto.getIsMediaPds() );
			}
		
			if (dto.isIsNetworkCablingModified()) {
				stmt.setString( index++, dto.getIsNetworkCabling() );
			}
		
			if (dto.isIsPrintingServicesModified()) {
				stmt.setString( index++, dto.getIsPrintingServices() );
			}
		
			if (dto.isIsPhotoServicesModified()) {
				stmt.setString( index++, dto.getIsPhotoServices() );
			}
		
			if (dto.isIsResellerModified()) {
				stmt.setString( index++, dto.getIsReseller() );
			}
		
			if (dto.isIsSecurityMgmtModified()) {
				stmt.setString( index++, dto.getIsSecurityMgmt() );
			}
		
			if (dto.isIsSdrdModified()) {
				stmt.setString( index++, dto.getIsSdrd() );
			}
		
			if (dto.isIsSsrdModified()) {
				stmt.setString( index++, dto.getIsSsrd() );
			}
		
			if (dto.isIsSsmModified()) {
				stmt.setString( index++, dto.getIsSsm() );
			}
		
			if (dto.isIsTechServicesModified()) {
				stmt.setString( index++, dto.getIsTechServices() );
			}
		
			if (dto.isIsSitnModified()) {
				stmt.setString( index++, dto.getIsSitn() );
			}
		
			if (dto.isIsGoModified()) {
				stmt.setString( index++, dto.getIsGo() );
			}
		
			if (dto.isIsTravelServicesModified()) {
				stmt.setString( index++, dto.getIsTravelServices() );
			}
		
			if (dto.isIsUtilityServicesModified()) {
				stmt.setString( index++, dto.getIsUtilityServices() );
			}
		
			if (dto.isIsOthersServicesModified()) {
				stmt.setString( index++, dto.getIsOthersServices() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OldDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the old table.
	 */
	public void delete(OldPk pk) throws OldDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OldDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the old table that matches the specified primary-key value.
	 */
	public Old findByPrimaryKey(OldPk pk) throws OldDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'id = :id'.
	 */
	public Old findByPrimaryKey(int id) throws OldDaoException
	{
		Old ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the old table that match the criteria ''.
	 */
	public Old[] findAll() throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'id = :id'.
	 */
	public Old[] findWhereIdEquals(int id) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Old[] findWhereSupplierIdEquals(int supplierId) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ? ORDER BY supplier_id", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_manufacturing = :isManufacturing'.
	 */
	public Old[] findWhereIsManufacturingEquals(String isManufacturing) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_manufacturing = ? ORDER BY is_manufacturing", new Object[] { isManufacturing } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_professinal_services = :isProfessinalServices'.
	 */
	public Old[] findWhereIsProfessinalServicesEquals(String isProfessinalServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_professinal_services = ? ORDER BY is_professinal_services", new Object[] { isProfessinalServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_construction = :isConstruction'.
	 */
	public Old[] findWhereIsConstructionEquals(String isConstruction) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_construction = ? ORDER BY is_construction", new Object[] { isConstruction } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_educational = :isEducational'.
	 */
	public Old[] findWhereIsEducationalEquals(String isEducational) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_educational = ? ORDER BY is_educational", new Object[] { isEducational } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_facility_mgmt = :isFacilityMgmt'.
	 */
	public Old[] findWhereIsFacilityMgmtEquals(String isFacilityMgmt) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_facility_mgmt = ? ORDER BY is_facility_mgmt", new Object[] { isFacilityMgmt } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_financial_services = :isFinancialServices'.
	 */
	public Old[] findWhereIsFinancialServicesEquals(String isFinancialServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_financial_services = ? ORDER BY is_financial_services", new Object[] { isFinancialServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_food_services = :isFoodServices'.
	 */
	public Old[] findWhereIsFoodServicesEquals(String isFoodServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_food_services = ? ORDER BY is_food_services", new Object[] { isFoodServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_healthcare = :isHealthcare'.
	 */
	public Old[] findWhereIsHealthcareEquals(String isHealthcare) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_healthcare = ? ORDER BY is_healthcare", new Object[] { isHealthcare } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_ict = :isIct'.
	 */
	public Old[] findWhereIsIctEquals(String isIct) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_ict = ? ORDER BY is_ict", new Object[] { isIct } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_logistic = :isLogistic'.
	 */
	public Old[] findWhereIsLogisticEquals(String isLogistic) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_logistic = ? ORDER BY is_logistic", new Object[] { isLogistic } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_marketing = :isMarketing'.
	 */
	public Old[] findWhereIsMarketingEquals(String isMarketing) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_marketing = ? ORDER BY is_marketing", new Object[] { isMarketing } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_realestate = :isRealestate'.
	 */
	public Old[] findWhereIsRealestateEquals(String isRealestate) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_realestate = ? ORDER BY is_realestate", new Object[] { isRealestate } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_recruitment = :isRecruitment'.
	 */
	public Old[] findWhereIsRecruitmentEquals(String isRecruitment) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_recruitment = ? ORDER BY is_recruitment", new Object[] { isRecruitment } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_retail = :isRetail'.
	 */
	public Old[] findWhereIsRetailEquals(String isRetail) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_retail = ? ORDER BY is_retail", new Object[] { isRetail } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_social_care = :isSocialCare'.
	 */
	public Old[] findWhereIsSocialCareEquals(String isSocialCare) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_social_care = ? ORDER BY is_social_care", new Object[] { isSocialCare } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'utilites = :utilites'.
	 */
	public Old[] findWhereUtilitesEquals(String utilites) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE utilites = ? ORDER BY utilites", new Object[] { utilites } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_facilities = :isFacilities'.
	 */
	public Old[] findWhereIsFacilitiesEquals(String isFacilities) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_facilities = ? ORDER BY is_facilities", new Object[] { isFacilities } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_hardware = :isHardware'.
	 */
	public Old[] findWhereIsHardwareEquals(String isHardware) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_hardware = ? ORDER BY is_hardware", new Object[] { isHardware } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_logistic_services = :isLogisticServices'.
	 */
	public Old[] findWhereIsLogisticServicesEquals(String isLogisticServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_logistic_services = ? ORDER BY is_logistic_services", new Object[] { isLogisticServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_marketing_print = :isMarketingPrint'.
	 */
	public Old[] findWhereIsMarketingPrintEquals(String isMarketingPrint) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_marketing_print = ? ORDER BY is_marketing_print", new Object[] { isMarketingPrint } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_recruitment_HR = :isRecruitmentHr'.
	 */
	public Old[] findWhereIsRecruitmentHrEquals(String isRecruitmentHr) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_recruitment_HR = ? ORDER BY is_recruitment_HR", new Object[] { isRecruitmentHr } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_software = :isSoftware'.
	 */
	public Old[] findWhereIsSoftwareEquals(String isSoftware) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_software = ? ORDER BY is_software", new Object[] { isSoftware } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_specialist_consultancy = :isSpecialistConsultancy'.
	 */
	public Old[] findWhereIsSpecialistConsultancyEquals(String isSpecialistConsultancy) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_specialist_consultancy = ? ORDER BY is_specialist_consultancy", new Object[] { isSpecialistConsultancy } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_telecom = :isTelecom'.
	 */
	public Old[] findWhereIsTelecomEquals(String isTelecom) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_telecom = ? ORDER BY is_telecom", new Object[] { isTelecom } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_other_services = :isOtherServices'.
	 */
	public Old[] findWhereIsOtherServicesEquals(String isOtherServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_other_services = ? ORDER BY is_other_services", new Object[] { isOtherServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_building = :isBuilding'.
	 */
	public Old[] findWhereIsBuildingEquals(String isBuilding) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_building = ? ORDER BY is_building", new Object[] { isBuilding } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_computer = :isComputer'.
	 */
	public Old[] findWhereIsComputerEquals(String isComputer) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_computer = ? ORDER BY is_computer", new Object[] { isComputer } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_electronic = :isElectronic'.
	 */
	public Old[] findWhereIsElectronicEquals(String isElectronic) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_electronic = ? ORDER BY is_electronic", new Object[] { isElectronic } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_environmental = :isEnvironmental'.
	 */
	public Old[] findWhereIsEnvironmentalEquals(String isEnvironmental) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_environmental = ? ORDER BY is_environmental", new Object[] { isEnvironmental } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_furniture = :isFurniture'.
	 */
	public Old[] findWhereIsFurnitureEquals(String isFurniture) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_furniture = ? ORDER BY is_furniture", new Object[] { isFurniture } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_general = :isGeneral'.
	 */
	public Old[] findWhereIsGeneralEquals(String isGeneral) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_general = ? ORDER BY is_general", new Object[] { isGeneral } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_health_equip = :isHealthEquip'.
	 */
	public Old[] findWhereIsHealthEquipEquals(String isHealthEquip) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_health_equip = ? ORDER BY is_health_equip", new Object[] { isHealthEquip } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_it_Acc = :isItAcc'.
	 */
	public Old[] findWhereIsItAccEquals(String isItAcc) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_it_Acc = ? ORDER BY is_it_Acc", new Object[] { isItAcc } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_laptop = :isLaptop'.
	 */
	public Old[] findWhereIsLaptopEquals(String isLaptop) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_laptop = ? ORDER BY is_laptop", new Object[] { isLaptop } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_mainframe = :isMainframe'.
	 */
	public Old[] findWhereIsMainframeEquals(String isMainframe) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_mainframe = ? ORDER BY is_mainframe", new Object[] { isMainframe } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_monitors = :isMonitors'.
	 */
	public Old[] findWhereIsMonitorsEquals(String isMonitors) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_monitors = ? ORDER BY is_monitors", new Object[] { isMonitors } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_mobile = :isMobile'.
	 */
	public Old[] findWhereIsMobileEquals(String isMobile) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_mobile = ? ORDER BY is_mobile", new Object[] { isMobile } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_network = :isNetwork'.
	 */
	public Old[] findWhereIsNetworkEquals(String isNetwork) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_network = ? ORDER BY is_network", new Object[] { isNetwork } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_package = :isPackage'.
	 */
	public Old[] findWhereIsPackageEquals(String isPackage) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_package = ? ORDER BY is_package", new Object[] { isPackage } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_photo = :isPhoto'.
	 */
	public Old[] findWhereIsPhotoEquals(String isPhoto) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_photo = ? ORDER BY is_photo", new Object[] { isPhoto } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_printer_allinone = :isPrinterAllinone'.
	 */
	public Old[] findWhereIsPrinterAllinoneEquals(String isPrinterAllinone) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_printer_allinone = ? ORDER BY is_printer_allinone", new Object[] { isPrinterAllinone } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_printer_inks = :isPrinterInks'.
	 */
	public Old[] findWhereIsPrinterInksEquals(String isPrinterInks) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_printer_inks = ? ORDER BY is_printer_inks", new Object[] { isPrinterInks } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_security = :isSecurity'.
	 */
	public Old[] findWhereIsSecurityEquals(String isSecurity) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_security = ? ORDER BY is_security", new Object[] { isSecurity } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_scanners = :isScanners'.
	 */
	public Old[] findWhereIsScannersEquals(String isScanners) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_scanners = ? ORDER BY is_scanners", new Object[] { isScanners } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_soft_package = :isSoftPackage'.
	 */
	public Old[] findWhereIsSoftPackageEquals(String isSoftPackage) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_soft_package = ? ORDER BY is_soft_package", new Object[] { isSoftPackage } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_touchpad = :isTouchpad'.
	 */
	public Old[] findWhereIsTouchpadEquals(String isTouchpad) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_touchpad = ? ORDER BY is_touchpad", new Object[] { isTouchpad } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_others_principal = :isOthersPrincipal'.
	 */
	public Old[] findWhereIsOthersPrincipalEquals(String isOthersPrincipal) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_others_principal = ? ORDER BY is_others_principal", new Object[] { isOthersPrincipal } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_asset_recovery = :isAssetRecovery'.
	 */
	public Old[] findWhereIsAssetRecoveryEquals(String isAssetRecovery) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_asset_recovery = ? ORDER BY is_asset_recovery", new Object[] { isAssetRecovery } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_specialist_it = :isSpecialistIt'.
	 */
	public Old[] findWhereIsSpecialistItEquals(String isSpecialistIt) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_specialist_it = ? ORDER BY is_specialist_it", new Object[] { isSpecialistIt } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_media = :isMedia'.
	 */
	public Old[] findWhereIsMediaEquals(String isMedia) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_media = ? ORDER BY is_media", new Object[] { isMedia } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_risk_mgmt = :isRiskMgmt'.
	 */
	public Old[] findWhereIsRiskMgmtEquals(String isRiskMgmt) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_risk_mgmt = ? ORDER BY is_risk_mgmt", new Object[] { isRiskMgmt } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_courier = :isCourier'.
	 */
	public Old[] findWhereIsCourierEquals(String isCourier) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_courier = ? ORDER BY is_courier", new Object[] { isCourier } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_facility_buld_mgmt = :isFacilityBuldMgmt'.
	 */
	public Old[] findWhereIsFacilityBuldMgmtEquals(String isFacilityBuldMgmt) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_facility_buld_mgmt = ? ORDER BY is_facility_buld_mgmt", new Object[] { isFacilityBuldMgmt } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_financial_mgmt = :isFinancialMgmt'.
	 */
	public Old[] findWhereIsFinancialMgmtEquals(String isFinancialMgmt) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_financial_mgmt = ? ORDER BY is_financial_mgmt", new Object[] { isFinancialMgmt } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_health_training = :isHealthTraining'.
	 */
	public Old[] findWhereIsHealthTrainingEquals(String isHealthTraining) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_health_training = ? ORDER BY is_health_training", new Object[] { isHealthTraining } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_hrs = :isHrs'.
	 */
	public Old[] findWhereIsHrsEquals(String isHrs) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_hrs = ? ORDER BY is_hrs", new Object[] { isHrs } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_fright = :isFright'.
	 */
	public Old[] findWhereIsFrightEquals(String isFright) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_fright = ? ORDER BY is_fright", new Object[] { isFright } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_media_pds = :isMediaPds'.
	 */
	public Old[] findWhereIsMediaPdsEquals(String isMediaPds) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_media_pds = ? ORDER BY is_media_pds", new Object[] { isMediaPds } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_network_cabling = :isNetworkCabling'.
	 */
	public Old[] findWhereIsNetworkCablingEquals(String isNetworkCabling) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_network_cabling = ? ORDER BY is_network_cabling", new Object[] { isNetworkCabling } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_printing_services = :isPrintingServices'.
	 */
	public Old[] findWhereIsPrintingServicesEquals(String isPrintingServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_printing_services = ? ORDER BY is_printing_services", new Object[] { isPrintingServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_photo_services = :isPhotoServices'.
	 */
	public Old[] findWhereIsPhotoServicesEquals(String isPhotoServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_photo_services = ? ORDER BY is_photo_services", new Object[] { isPhotoServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_reseller = :isReseller'.
	 */
	public Old[] findWhereIsResellerEquals(String isReseller) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_reseller = ? ORDER BY is_reseller", new Object[] { isReseller } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_security_mgmt = :isSecurityMgmt'.
	 */
	public Old[] findWhereIsSecurityMgmtEquals(String isSecurityMgmt) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_security_mgmt = ? ORDER BY is_security_mgmt", new Object[] { isSecurityMgmt } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_sdrd = :isSdrd'.
	 */
	public Old[] findWhereIsSdrdEquals(String isSdrd) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_sdrd = ? ORDER BY is_sdrd", new Object[] { isSdrd } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_ssrd = :isSsrd'.
	 */
	public Old[] findWhereIsSsrdEquals(String isSsrd) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_ssrd = ? ORDER BY is_ssrd", new Object[] { isSsrd } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_ssm = :isSsm'.
	 */
	public Old[] findWhereIsSsmEquals(String isSsm) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_ssm = ? ORDER BY is_ssm", new Object[] { isSsm } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_tech_services = :isTechServices'.
	 */
	public Old[] findWhereIsTechServicesEquals(String isTechServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_tech_services = ? ORDER BY is_tech_services", new Object[] { isTechServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_sitn = :isSitn'.
	 */
	public Old[] findWhereIsSitnEquals(String isSitn) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_sitn = ? ORDER BY is_sitn", new Object[] { isSitn } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_go = :isGo'.
	 */
	public Old[] findWhereIsGoEquals(String isGo) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_go = ? ORDER BY is_go", new Object[] { isGo } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_travel_services = :isTravelServices'.
	 */
	public Old[] findWhereIsTravelServicesEquals(String isTravelServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_travel_services = ? ORDER BY is_travel_services", new Object[] { isTravelServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_utility_services = :isUtilityServices'.
	 */
	public Old[] findWhereIsUtilityServicesEquals(String isUtilityServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_utility_services = ? ORDER BY is_utility_services", new Object[] { isUtilityServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'is_others_services = :isOthersServices'.
	 */
	public Old[] findWhereIsOthersServicesEquals(String isOthersServices) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_others_services = ? ORDER BY is_others_services", new Object[] { isOthersServices } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'date_created = :dateCreated'.
	 */
	public Old[] findWhereDateCreatedEquals(Date dateCreated) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the old table that match the criteria 'date_modified = :dateModified'.
	 */
	public Old[] findWhereDateModifiedEquals(Date dateModified) throws OldDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modified = ? ORDER BY date_modified", new Object[] { dateModified==null ? null : new java.sql.Timestamp( dateModified.getTime() ) } );
	}

	/**
	 * Method 'OldDaoImpl'
	 * 
	 */
	public OldDaoImpl()
	{
	}

	/**
	 * Method 'OldDaoImpl'
	 * 
	 * @param userConn
	 */
	public OldDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "supplierdb.old";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Old fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Old dto = new Old();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Old[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Old dto = new Old();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Old ret[] = new Old[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Old dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setSupplierId( rs.getInt( COLUMN_SUPPLIER_ID ) );
		dto.setIsManufacturing( rs.getString( COLUMN_IS_MANUFACTURING ) );
		dto.setIsProfessinalServices( rs.getString( COLUMN_IS_PROFESSINAL_SERVICES ) );
		dto.setIsConstruction( rs.getString( COLUMN_IS_CONSTRUCTION ) );
		dto.setIsEducational( rs.getString( COLUMN_IS_EDUCATIONAL ) );
		dto.setIsFacilityMgmt( rs.getString( COLUMN_IS_FACILITY_MGMT ) );
		dto.setIsFinancialServices( rs.getString( COLUMN_IS_FINANCIAL_SERVICES ) );
		dto.setIsFoodServices( rs.getString( COLUMN_IS_FOOD_SERVICES ) );
		dto.setIsHealthcare( rs.getString( COLUMN_IS_HEALTHCARE ) );
		dto.setIsIct( rs.getString( COLUMN_IS_ICT ) );
		dto.setIsLogistic( rs.getString( COLUMN_IS_LOGISTIC ) );
		dto.setIsMarketing( rs.getString( COLUMN_IS_MARKETING ) );
		dto.setIsRealestate( rs.getString( COLUMN_IS_REALESTATE ) );
		dto.setIsRecruitment( rs.getString( COLUMN_IS_RECRUITMENT ) );
		dto.setIsRetail( rs.getString( COLUMN_IS_RETAIL ) );
		dto.setIsSocialCare( rs.getString( COLUMN_IS_SOCIAL_CARE ) );
		dto.setUtilites( rs.getString( COLUMN_UTILITES ) );
		dto.setIsFacilities( rs.getString( COLUMN_IS_FACILITIES ) );
		dto.setIsHardware( rs.getString( COLUMN_IS_HARDWARE ) );
		dto.setIsLogisticServices( rs.getString( COLUMN_IS_LOGISTIC_SERVICES ) );
		dto.setIsMarketingPrint( rs.getString( COLUMN_IS_MARKETING_PRINT ) );
		dto.setIsRecruitmentHr( rs.getString( COLUMN_IS_RECRUITMENT_HR ) );
		dto.setIsSoftware( rs.getString( COLUMN_IS_SOFTWARE ) );
		dto.setIsSpecialistConsultancy( rs.getString( COLUMN_IS_SPECIALIST_CONSULTANCY ) );
		dto.setIsTelecom( rs.getString( COLUMN_IS_TELECOM ) );
		dto.setIsOtherServices( rs.getString( COLUMN_IS_OTHER_SERVICES ) );
		dto.setIsBuilding( rs.getString( COLUMN_IS_BUILDING ) );
		dto.setIsComputer( rs.getString( COLUMN_IS_COMPUTER ) );
		dto.setIsElectronic( rs.getString( COLUMN_IS_ELECTRONIC ) );
		dto.setIsEnvironmental( rs.getString( COLUMN_IS_ENVIRONMENTAL ) );
		dto.setIsFurniture( rs.getString( COLUMN_IS_FURNITURE ) );
		dto.setIsGeneral( rs.getString( COLUMN_IS_GENERAL ) );
		dto.setIsHealthEquip( rs.getString( COLUMN_IS_HEALTH_EQUIP ) );
		dto.setIsItAcc( rs.getString( COLUMN_IS_IT_ACC ) );
		dto.setIsLaptop( rs.getString( COLUMN_IS_LAPTOP ) );
		dto.setIsMainframe( rs.getString( COLUMN_IS_MAINFRAME ) );
		dto.setIsMonitors( rs.getString( COLUMN_IS_MONITORS ) );
		dto.setIsMobile( rs.getString( COLUMN_IS_MOBILE ) );
		dto.setIsNetwork( rs.getString( COLUMN_IS_NETWORK ) );
		dto.setIsPackage( rs.getString( COLUMN_IS_PACKAGE ) );
		dto.setIsPhoto( rs.getString( COLUMN_IS_PHOTO ) );
		dto.setIsPrinterAllinone( rs.getString( COLUMN_IS_PRINTER_ALLINONE ) );
		dto.setIsPrinterInks( rs.getString( COLUMN_IS_PRINTER_INKS ) );
		dto.setIsSecurity( rs.getString( COLUMN_IS_SECURITY ) );
		dto.setIsScanners( rs.getString( COLUMN_IS_SCANNERS ) );
		dto.setIsSoftPackage( rs.getString( COLUMN_IS_SOFT_PACKAGE ) );
		dto.setIsTouchpad( rs.getString( COLUMN_IS_TOUCHPAD ) );
		dto.setIsOthersPrincipal( rs.getString( COLUMN_IS_OTHERS_PRINCIPAL ) );
		dto.setIsAssetRecovery( rs.getString( COLUMN_IS_ASSET_RECOVERY ) );
		dto.setIsSpecialistIt( rs.getString( COLUMN_IS_SPECIALIST_IT ) );
		dto.setIsMedia( rs.getString( COLUMN_IS_MEDIA ) );
		dto.setIsRiskMgmt( rs.getString( COLUMN_IS_RISK_MGMT ) );
		dto.setIsCourier( rs.getString( COLUMN_IS_COURIER ) );
		dto.setIsFacilityBuldMgmt( rs.getString( COLUMN_IS_FACILITY_BULD_MGMT ) );
		dto.setIsFinancialMgmt( rs.getString( COLUMN_IS_FINANCIAL_MGMT ) );
		dto.setIsHealthTraining( rs.getString( COLUMN_IS_HEALTH_TRAINING ) );
		dto.setIsHrs( rs.getString( COLUMN_IS_HRS ) );
		dto.setIsFright( rs.getString( COLUMN_IS_FRIGHT ) );
		dto.setIsMediaPds( rs.getString( COLUMN_IS_MEDIA_PDS ) );
		dto.setIsNetworkCabling( rs.getString( COLUMN_IS_NETWORK_CABLING ) );
		dto.setIsPrintingServices( rs.getString( COLUMN_IS_PRINTING_SERVICES ) );
		dto.setIsPhotoServices( rs.getString( COLUMN_IS_PHOTO_SERVICES ) );
		dto.setIsReseller( rs.getString( COLUMN_IS_RESELLER ) );
		dto.setIsSecurityMgmt( rs.getString( COLUMN_IS_SECURITY_MGMT ) );
		dto.setIsSdrd( rs.getString( COLUMN_IS_SDRD ) );
		dto.setIsSsrd( rs.getString( COLUMN_IS_SSRD ) );
		dto.setIsSsm( rs.getString( COLUMN_IS_SSM ) );
		dto.setIsTechServices( rs.getString( COLUMN_IS_TECH_SERVICES ) );
		dto.setIsSitn( rs.getString( COLUMN_IS_SITN ) );
		dto.setIsGo( rs.getString( COLUMN_IS_GO ) );
		dto.setIsTravelServices( rs.getString( COLUMN_IS_TRAVEL_SERVICES ) );
		dto.setIsUtilityServices( rs.getString( COLUMN_IS_UTILITY_SERVICES ) );
		dto.setIsOthersServices( rs.getString( COLUMN_IS_OTHERS_SERVICES ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModified( rs.getTimestamp(COLUMN_DATE_MODIFIED ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Old dto)
	{
		dto.setIdModified( false );
		dto.setSupplierIdModified( false );
		dto.setIsManufacturingModified( false );
		dto.setIsProfessinalServicesModified( false );
		dto.setIsConstructionModified( false );
		dto.setIsEducationalModified( false );
		dto.setIsFacilityMgmtModified( false );
		dto.setIsFinancialServicesModified( false );
		dto.setIsFoodServicesModified( false );
		dto.setIsHealthcareModified( false );
		dto.setIsIctModified( false );
		dto.setIsLogisticModified( false );
		dto.setIsMarketingModified( false );
		dto.setIsRealestateModified( false );
		dto.setIsRecruitmentModified( false );
		dto.setIsRetailModified( false );
		dto.setIsSocialCareModified( false );
		dto.setUtilitesModified( false );
		dto.setIsFacilitiesModified( false );
		dto.setIsHardwareModified( false );
		dto.setIsLogisticServicesModified( false );
		dto.setIsMarketingPrintModified( false );
		dto.setIsRecruitmentHrModified( false );
		dto.setIsSoftwareModified( false );
		dto.setIsSpecialistConsultancyModified( false );
		dto.setIsTelecomModified( false );
		dto.setIsOtherServicesModified( false );
		dto.setIsBuildingModified( false );
		dto.setIsComputerModified( false );
		dto.setIsElectronicModified( false );
		dto.setIsEnvironmentalModified( false );
		dto.setIsFurnitureModified( false );
		dto.setIsGeneralModified( false );
		dto.setIsHealthEquipModified( false );
		dto.setIsItAccModified( false );
		dto.setIsLaptopModified( false );
		dto.setIsMainframeModified( false );
		dto.setIsMonitorsModified( false );
		dto.setIsMobileModified( false );
		dto.setIsNetworkModified( false );
		dto.setIsPackageModified( false );
		dto.setIsPhotoModified( false );
		dto.setIsPrinterAllinoneModified( false );
		dto.setIsPrinterInksModified( false );
		dto.setIsSecurityModified( false );
		dto.setIsScannersModified( false );
		dto.setIsSoftPackageModified( false );
		dto.setIsTouchpadModified( false );
		dto.setIsOthersPrincipalModified( false );
		dto.setIsAssetRecoveryModified( false );
		dto.setIsSpecialistItModified( false );
		dto.setIsMediaModified( false );
		dto.setIsRiskMgmtModified( false );
		dto.setIsCourierModified( false );
		dto.setIsFacilityBuldMgmtModified( false );
		dto.setIsFinancialMgmtModified( false );
		dto.setIsHealthTrainingModified( false );
		dto.setIsHrsModified( false );
		dto.setIsFrightModified( false );
		dto.setIsMediaPdsModified( false );
		dto.setIsNetworkCablingModified( false );
		dto.setIsPrintingServicesModified( false );
		dto.setIsPhotoServicesModified( false );
		dto.setIsResellerModified( false );
		dto.setIsSecurityMgmtModified( false );
		dto.setIsSdrdModified( false );
		dto.setIsSsrdModified( false );
		dto.setIsSsmModified( false );
		dto.setIsTechServicesModified( false );
		dto.setIsSitnModified( false );
		dto.setIsGoModified( false );
		dto.setIsTravelServicesModified( false );
		dto.setIsUtilityServicesModified( false );
		dto.setIsOthersServicesModified( false );
		dto.setDateCreatedModified( false );
		dto.setDateModifiedModified( false );
	}

	/** 
	 * Returns all rows from the old table that match the specified arbitrary SQL statement
	 */
	public Old[] findByDynamicSelect(String sql, Object[] sqlParams) throws OldDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OldDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the old table that match the specified arbitrary SQL statement
	 */
	public Old[] findByDynamicWhere(String sql, Object[] sqlParams) throws OldDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new OldDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
