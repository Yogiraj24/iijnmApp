/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.jdbc;

import com.hp.supplier.dao.*;
import com.hp.supplier.factory.*;
import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProcessrecordDaoImpl extends AbstractDAO implements ProcessrecordDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, supplier_id, yesno, date, done_by, bus_unit_contact, date_created, date_modifed FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, supplier_id, yesno, date, done_by, bus_unit_contact, date_created, date_modifed ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, supplier_id = ?, yesno = ?, date = ?, done_by = ?, bus_unit_contact = ?, date_created = ?, date_modifed = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column supplier_id
	 */
	protected static final int COLUMN_SUPPLIER_ID = 2;

	/** 
	 * Index of column yesno
	 */
	protected static final int COLUMN_YESNO = 3;

	/** 
	 * Index of column date
	 */
	protected static final int COLUMN_DATE = 4;

	/** 
	 * Index of column done_by
	 */
	protected static final int COLUMN_DONE_BY = 5;

	/** 
	 * Index of column bus_unit_contact
	 */
	protected static final int COLUMN_BUS_UNIT_CONTACT = 6;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 7;

	/** 
	 * Index of column date_modifed
	 */
	protected static final int COLUMN_DATE_MODIFED = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the processrecord table.
	 */
	public ProcessrecordPk insert(Processrecord dto) throws ProcessrecordDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "supplier_id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isYesnoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "yesno" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDoneByModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "done_by" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isBusUnitContactModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "bus_unit_contact" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_created" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateModifedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_modifed" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isYesnoModified()) {
				stmt.setString( index++, dto.getYesno() );
			}
		
			if (dto.isDateModified()) {
				stmt.setTimestamp(index++, dto.getDate()==null ? null : new java.sql.Timestamp( dto.getDate().getTime() ) );
			}
		
			if (dto.isDoneByModified()) {
				stmt.setString( index++, dto.getDoneBy() );
			}
		
			if (dto.isBusUnitContactModified()) {
				stmt.setString( index++, dto.getBusUnitContact() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifedModified()) {
				stmt.setTimestamp(index++, dto.getDateModifed()==null ? null : new java.sql.Timestamp( dto.getDateModifed().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcessrecordDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the processrecord table.
	 */
	public void update(ProcessrecordPk pk, Processrecord dto) throws ProcessrecordDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "supplier_id=?" );
				modified=true;
			}
		
			if (dto.isYesnoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "yesno=?" );
				modified=true;
			}
		
			if (dto.isDateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date=?" );
				modified=true;
			}
		
			if (dto.isDoneByModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "done_by=?" );
				modified=true;
			}
		
			if (dto.isBusUnitContactModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "bus_unit_contact=?" );
				modified=true;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_created=?" );
				modified=true;
			}
		
			if (dto.isDateModifedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_modifed=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isYesnoModified()) {
				stmt.setString( index++, dto.getYesno() );
			}
		
			if (dto.isDateModified()) {
				stmt.setTimestamp(index++, dto.getDate()==null ? null : new java.sql.Timestamp( dto.getDate().getTime() ) );
			}
		
			if (dto.isDoneByModified()) {
				stmt.setString( index++, dto.getDoneBy() );
			}
		
			if (dto.isBusUnitContactModified()) {
				stmt.setString( index++, dto.getBusUnitContact() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifedModified()) {
				stmt.setTimestamp(index++, dto.getDateModifed()==null ? null : new java.sql.Timestamp( dto.getDateModifed().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcessrecordDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the processrecord table.
	 */
	public void delete(ProcessrecordPk pk) throws ProcessrecordDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcessrecordDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the processrecord table that matches the specified primary-key value.
	 */
	public Processrecord findByPrimaryKey(ProcessrecordPk pk) throws ProcessrecordDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'id = :id'.
	 */
	public Processrecord findByPrimaryKey(int id) throws ProcessrecordDaoException
	{
		Processrecord ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria ''.
	 */
	public Processrecord[] findAll() throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Processrecord[] findBySubmissionForm(int supplierId) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ?", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'id = :id'.
	 */
	public Processrecord[] findWhereIdEquals(int id) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Processrecord[] findWhereSupplierIdEquals(int supplierId) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ? ORDER BY supplier_id", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'yesno = :yesno'.
	 */
	public Processrecord[] findWhereYesnoEquals(String yesno) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE yesno = ? ORDER BY yesno", new Object[] { yesno } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'date = :date'.
	 */
	public Processrecord[] findWhereDateEquals(Date date) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date = ? ORDER BY date", new Object[] { date==null ? null : new java.sql.Timestamp( date.getTime() ) } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'done_by = :doneBy'.
	 */
	public Processrecord[] findWhereDoneByEquals(String doneBy) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE done_by = ? ORDER BY done_by", new Object[] { doneBy } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'bus_unit_contact = :busUnitContact'.
	 */
	public Processrecord[] findWhereBusUnitContactEquals(String busUnitContact) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE bus_unit_contact = ? ORDER BY bus_unit_contact", new Object[] { busUnitContact } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'date_created = :dateCreated'.
	 */
	public Processrecord[] findWhereDateCreatedEquals(Date dateCreated) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the processrecord table that match the criteria 'date_modifed = :dateModifed'.
	 */
	public Processrecord[] findWhereDateModifedEquals(Date dateModifed) throws ProcessrecordDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modifed = ? ORDER BY date_modifed", new Object[] { dateModifed==null ? null : new java.sql.Timestamp( dateModifed.getTime() ) } );
	}

	/**
	 * Method 'ProcessrecordDaoImpl'
	 * 
	 */
	public ProcessrecordDaoImpl()
	{
	}

	/**
	 * Method 'ProcessrecordDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProcessrecordDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "supplierdb.processrecord";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Processrecord fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Processrecord dto = new Processrecord();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Processrecord[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Processrecord dto = new Processrecord();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Processrecord ret[] = new Processrecord[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Processrecord dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setSupplierId( rs.getInt( COLUMN_SUPPLIER_ID ) );
		dto.setYesno( rs.getString( COLUMN_YESNO ) );
		dto.setDate( rs.getTimestamp(COLUMN_DATE ) );
		dto.setDoneBy( rs.getString( COLUMN_DONE_BY ) );
		dto.setBusUnitContact( rs.getString( COLUMN_BUS_UNIT_CONTACT ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModifed( rs.getTimestamp(COLUMN_DATE_MODIFED ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Processrecord dto)
	{
		dto.setIdModified( false );
		dto.setSupplierIdModified( false );
		dto.setYesnoModified( false );
		dto.setDateModified( false );
		dto.setDoneByModified( false );
		dto.setBusUnitContactModified( false );
		dto.setDateCreatedModified( false );
		dto.setDateModifedModified( false );
	}

	/** 
	 * Returns all rows from the processrecord table that match the specified arbitrary SQL statement
	 */
	public Processrecord[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProcessrecordDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcessrecordDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the processrecord table that match the specified arbitrary SQL statement
	 */
	public Processrecord[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProcessrecordDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcessrecordDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
