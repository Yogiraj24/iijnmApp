/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.jdbc;

import com.hp.supplier.dao.*;
import com.hp.supplier.factory.*;
import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProductservicesDaoImpl extends AbstractDAO implements ProductservicesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, supplier_id, is_manufacturing, is_business, is_construction, is_edu, is_facility, is_fanancial, is_food, is_health, is_itc, is_logistic_service, is_marketing, is_realestate, is_recruitment, is_retail, is_social, is_utilities, is_other_business, is_facilities_service, is_hardware, is_logistic, is_marketing_service, is_recruitment_hr, is_software, is_specilist, is_telecom, is_other_services, is_building_products, is_computer, is_electronic, is_envionmental, is_furniture, is_general_1, is_health_safety_1, is_it_access, is_laptop, is_mainframe, is_monitors, is_mobile_tech, is_networking, is_packaging, is_photocopiers, is_printers, is_printer_ink, is_security_1, is_scanners, is_softwate_pkg, is_touchpad, is_other_products, is_asset_recovery, is_con_it, is_con_media, is_con_facility, is_courier, is_facility_mgmt, is_financial_services, is_health_safety, is_is_hr, is_frieght, is_media_marketing, is_network_cabeling, is_printing, is_photograpic, is_reseller, is_security, is_sd_rd, is_ssm, is_tech_services, is_training_it, is_general, is_travel, is_utility_services, is_others_services, date_created, date_modified FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, supplier_id, is_manufacturing, is_business, is_construction, is_edu, is_facility, is_fanancial, is_food, is_health, is_itc, is_logistic_service, is_marketing, is_realestate, is_recruitment, is_retail, is_social, is_utilities, is_other_business, is_facilities_service, is_hardware, is_logistic, is_marketing_service, is_recruitment_hr, is_software, is_specilist, is_telecom, is_other_services, is_building_products, is_computer, is_electronic, is_envionmental, is_furniture, is_general_1, is_health_safety_1, is_it_access, is_laptop, is_mainframe, is_monitors, is_mobile_tech, is_networking, is_packaging, is_photocopiers, is_printers, is_printer_ink, is_security_1, is_scanners, is_softwate_pkg, is_touchpad, is_other_products, is_asset_recovery, is_con_it, is_con_media, is_con_facility, is_courier, is_facility_mgmt, is_financial_services, is_health_safety, is_is_hr, is_frieght, is_media_marketing, is_network_cabeling, is_printing, is_photograpic, is_reseller, is_security, is_sd_rd, is_ssm, is_tech_services, is_training_it, is_general, is_travel, is_utility_services, is_others_services, date_created, date_modified ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, supplier_id = ?, is_manufacturing = ?, is_business = ?, is_construction = ?, is_edu = ?, is_facility = ?, is_fanancial = ?, is_food = ?, is_health = ?, is_itc = ?, is_logistic_service = ?, is_marketing = ?, is_realestate = ?, is_recruitment = ?, is_retail = ?, is_social = ?, is_utilities = ?, is_other_business = ?, is_facilities_service = ?, is_hardware = ?, is_logistic = ?, is_marketing_service = ?, is_recruitment_hr = ?, is_software = ?, is_specilist = ?, is_telecom = ?, is_other_services = ?, is_building_products = ?, is_computer = ?, is_electronic = ?, is_envionmental = ?, is_furniture = ?, is_general_1 = ?, is_health_safety_1 = ?, is_it_access = ?, is_laptop = ?, is_mainframe = ?, is_monitors = ?, is_mobile_tech = ?, is_networking = ?, is_packaging = ?, is_photocopiers = ?, is_printers = ?, is_printer_ink = ?, is_security_1 = ?, is_scanners = ?, is_softwate_pkg = ?, is_touchpad = ?, is_other_products = ?, is_asset_recovery = ?, is_con_it = ?, is_con_media = ?, is_con_facility = ?, is_courier = ?, is_facility_mgmt = ?, is_financial_services = ?, is_health_safety = ?, is_is_hr = ?, is_frieght = ?, is_media_marketing = ?, is_network_cabeling = ?, is_printing = ?, is_photograpic = ?, is_reseller = ?, is_security = ?, is_sd_rd = ?, is_ssm = ?, is_tech_services = ?, is_training_it = ?, is_general = ?, is_travel = ?, is_utility_services = ?, is_others_services = ?, date_created = ?, date_modified = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column supplier_id
	 */
	protected static final int COLUMN_SUPPLIER_ID = 2;

	/** 
	 * Index of column is_manufacturing
	 */
	protected static final int COLUMN_IS_MANUFACTURING = 3;

	/** 
	 * Index of column is_business
	 */
	protected static final int COLUMN_IS_BUSINESS = 4;

	/** 
	 * Index of column is_construction
	 */
	protected static final int COLUMN_IS_CONSTRUCTION = 5;

	/** 
	 * Index of column is_edu
	 */
	protected static final int COLUMN_IS_EDU = 6;

	/** 
	 * Index of column is_facility
	 */
	protected static final int COLUMN_IS_FACILITY = 7;

	/** 
	 * Index of column is_fanancial
	 */
	protected static final int COLUMN_IS_FANANCIAL = 8;

	/** 
	 * Index of column is_food
	 */
	protected static final int COLUMN_IS_FOOD = 9;

	/** 
	 * Index of column is_health
	 */
	protected static final int COLUMN_IS_HEALTH = 10;

	/** 
	 * Index of column is_itc
	 */
	protected static final int COLUMN_IS_ITC = 11;

	/** 
	 * Index of column is_logistic_service
	 */
	protected static final int COLUMN_IS_LOGISTIC_SERVICE = 12;

	/** 
	 * Index of column is_marketing
	 */
	protected static final int COLUMN_IS_MARKETING = 13;

	/** 
	 * Index of column is_realestate
	 */
	protected static final int COLUMN_IS_REALESTATE = 14;

	/** 
	 * Index of column is_recruitment
	 */
	protected static final int COLUMN_IS_RECRUITMENT = 15;

	/** 
	 * Index of column is_retail
	 */
	protected static final int COLUMN_IS_RETAIL = 16;

	/** 
	 * Index of column is_social
	 */
	protected static final int COLUMN_IS_SOCIAL = 17;

	/** 
	 * Index of column is_utilities
	 */
	protected static final int COLUMN_IS_UTILITIES = 18;

	/** 
	 * Index of column is_other_business
	 */
	protected static final int COLUMN_IS_OTHER_BUSINESS = 19;

	/** 
	 * Index of column is_facilities_service
	 */
	protected static final int COLUMN_IS_FACILITIES_SERVICE = 20;

	/** 
	 * Index of column is_hardware
	 */
	protected static final int COLUMN_IS_HARDWARE = 21;

	/** 
	 * Index of column is_logistic
	 */
	protected static final int COLUMN_IS_LOGISTIC = 22;

	/** 
	 * Index of column is_marketing_service
	 */
	protected static final int COLUMN_IS_MARKETING_SERVICE = 23;

	/** 
	 * Index of column is_recruitment_hr
	 */
	protected static final int COLUMN_IS_RECRUITMENT_HR = 24;

	/** 
	 * Index of column is_software
	 */
	protected static final int COLUMN_IS_SOFTWARE = 25;

	/** 
	 * Index of column is_specilist
	 */
	protected static final int COLUMN_IS_SPECILIST = 26;

	/** 
	 * Index of column is_telecom
	 */
	protected static final int COLUMN_IS_TELECOM = 27;

	/** 
	 * Index of column is_other_services
	 */
	protected static final int COLUMN_IS_OTHER_SERVICES = 28;

	/** 
	 * Index of column is_building_products
	 */
	protected static final int COLUMN_IS_BUILDING_PRODUCTS = 29;

	/** 
	 * Index of column is_computer
	 */
	protected static final int COLUMN_IS_COMPUTER = 30;

	/** 
	 * Index of column is_electronic
	 */
	protected static final int COLUMN_IS_ELECTRONIC = 31;

	/** 
	 * Index of column is_envionmental
	 */
	protected static final int COLUMN_IS_ENVIONMENTAL = 32;

	/** 
	 * Index of column is_furniture
	 */
	protected static final int COLUMN_IS_FURNITURE = 33;

	/** 
	 * Index of column is_general_1
	 */
	protected static final int COLUMN_IS_GENERAL1 = 34;

	/** 
	 * Index of column is_health_safety_1
	 */
	protected static final int COLUMN_IS_HEALTH_SAFETY1 = 35;

	/** 
	 * Index of column is_it_access
	 */
	protected static final int COLUMN_IS_IT_ACCESS = 36;

	/** 
	 * Index of column is_laptop
	 */
	protected static final int COLUMN_IS_LAPTOP = 37;

	/** 
	 * Index of column is_mainframe
	 */
	protected static final int COLUMN_IS_MAINFRAME = 38;

	/** 
	 * Index of column is_monitors
	 */
	protected static final int COLUMN_IS_MONITORS = 39;

	/** 
	 * Index of column is_mobile_tech
	 */
	protected static final int COLUMN_IS_MOBILE_TECH = 40;

	/** 
	 * Index of column is_networking
	 */
	protected static final int COLUMN_IS_NETWORKING = 41;

	/** 
	 * Index of column is_packaging
	 */
	protected static final int COLUMN_IS_PACKAGING = 42;

	/** 
	 * Index of column is_photocopiers
	 */
	protected static final int COLUMN_IS_PHOTOCOPIERS = 43;

	/** 
	 * Index of column is_printers
	 */
	protected static final int COLUMN_IS_PRINTERS = 44;

	/** 
	 * Index of column is_printer_ink
	 */
	protected static final int COLUMN_IS_PRINTER_INK = 45;

	/** 
	 * Index of column is_security_1
	 */
	protected static final int COLUMN_IS_SECURITY1 = 46;

	/** 
	 * Index of column is_scanners
	 */
	protected static final int COLUMN_IS_SCANNERS = 47;

	/** 
	 * Index of column is_softwate_pkg
	 */
	protected static final int COLUMN_IS_SOFTWATE_PKG = 48;

	/** 
	 * Index of column is_touchpad
	 */
	protected static final int COLUMN_IS_TOUCHPAD = 49;

	/** 
	 * Index of column is_other_products
	 */
	protected static final int COLUMN_IS_OTHER_PRODUCTS = 50;

	/** 
	 * Index of column is_asset_recovery
	 */
	protected static final int COLUMN_IS_ASSET_RECOVERY = 51;

	/** 
	 * Index of column is_con_it
	 */
	protected static final int COLUMN_IS_CON_IT = 52;

	/** 
	 * Index of column is_con_media
	 */
	protected static final int COLUMN_IS_CON_MEDIA = 53;

	/** 
	 * Index of column is_con_facility
	 */
	protected static final int COLUMN_IS_CON_FACILITY = 54;

	/** 
	 * Index of column is_courier
	 */
	protected static final int COLUMN_IS_COURIER = 55;

	/** 
	 * Index of column is_facility_mgmt
	 */
	protected static final int COLUMN_IS_FACILITY_MGMT = 56;

	/** 
	 * Index of column is_financial_services
	 */
	protected static final int COLUMN_IS_FINANCIAL_SERVICES = 57;

	/** 
	 * Index of column is_health_safety
	 */
	protected static final int COLUMN_IS_HEALTH_SAFETY = 58;

	/** 
	 * Index of column is_is_hr
	 */
	protected static final int COLUMN_IS_IS_HR = 59;

	/** 
	 * Index of column is_frieght
	 */
	protected static final int COLUMN_IS_FRIEGHT = 60;

	/** 
	 * Index of column is_media_marketing
	 */
	protected static final int COLUMN_IS_MEDIA_MARKETING = 61;

	/** 
	 * Index of column is_network_cabeling
	 */
	protected static final int COLUMN_IS_NETWORK_CABELING = 62;

	/** 
	 * Index of column is_printing
	 */
	protected static final int COLUMN_IS_PRINTING = 63;

	/** 
	 * Index of column is_photograpic
	 */
	protected static final int COLUMN_IS_PHOTOGRAPIC = 64;

	/** 
	 * Index of column is_reseller
	 */
	protected static final int COLUMN_IS_RESELLER = 65;

	/** 
	 * Index of column is_security
	 */
	protected static final int COLUMN_IS_SECURITY = 66;

	/** 
	 * Index of column is_sd_rd
	 */
	protected static final int COLUMN_IS_SD_RD = 67;

	/** 
	 * Index of column is_ssm
	 */
	protected static final int COLUMN_IS_SSM = 68;

	/** 
	 * Index of column is_tech_services
	 */
	protected static final int COLUMN_IS_TECH_SERVICES = 69;

	/** 
	 * Index of column is_training_it
	 */
	protected static final int COLUMN_IS_TRAINING_IT = 70;

	/** 
	 * Index of column is_general
	 */
	protected static final int COLUMN_IS_GENERAL = 71;

	/** 
	 * Index of column is_travel
	 */
	protected static final int COLUMN_IS_TRAVEL = 72;

	/** 
	 * Index of column is_utility_services
	 */
	protected static final int COLUMN_IS_UTILITY_SERVICES = 73;

	/** 
	 * Index of column is_others_services
	 */
	protected static final int COLUMN_IS_OTHERS_SERVICES = 74;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 75;

	/** 
	 * Index of column date_modified
	 */
	protected static final int COLUMN_DATE_MODIFIED = 76;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 76;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the productservices table.
	 */
	public ProductservicesPk insert(Productservices dto) throws ProductservicesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "supplier_id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsManufacturingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_manufacturing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsBusinessModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_business" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsConstructionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_construction" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsEduModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_edu" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFacilityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_facility" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFanancialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_fanancial" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFoodModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_food" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHealthModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_health" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsItcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_itc" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLogisticServiceModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_logistic_service" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMarketingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_marketing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRealestateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_realestate" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRecruitmentModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_recruitment" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRetailModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_retail" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_social" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsUtilitiesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_utilities" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOtherBusinessModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_other_business" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFacilitiesServiceModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_facilities_service" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHardwareModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_hardware" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLogisticModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_logistic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMarketingServiceModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_marketing_service" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_recruitment_hr" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSoftwareModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_software" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSpecilistModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_specilist" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTelecomModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_telecom" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOtherServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_other_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsBuildingProductsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_building_products" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsComputerModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_computer" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsElectronicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_electronic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsEnvionmentalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_envionmental" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFurnitureModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_furniture" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsGeneral1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_general_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHealthSafety1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_health_safety_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsItAccessModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_it_access" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsLaptopModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_laptop" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMainframeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_mainframe" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMonitorsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_monitors" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMobileTechModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_mobile_tech" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsNetworkingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_networking" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPackagingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_packaging" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPhotocopiersModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_photocopiers" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPrintersModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_printers" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPrinterInkModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_printer_ink" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSecurity1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_security_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsScannersModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_scanners" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSoftwatePkgModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_softwate_pkg" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTouchpadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_touchpad" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOtherProductsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_other_products" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_asset_recovery" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsConItModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_con_it" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsConMediaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_con_media" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsConFacilityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_con_facility" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsCourierModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_courier" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_facility_mgmt" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFinancialServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_financial_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsHealthSafetyModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_health_safety" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsIsHrModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_is_hr" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsFrieghtModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_frieght" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsMediaMarketingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_media_marketing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsNetworkCabelingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_network_cabeling" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPrintingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_printing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsPhotograpicModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_photograpic" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsResellerModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_reseller" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSecurityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_security" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSdRdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_sd_rd" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsSsmModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_ssm" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTechServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_tech_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTrainingItModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_training_it" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsGeneralModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_general" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsTravelModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_travel" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsUtilityServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_utility_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIsOthersServicesModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "is_others_services" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_created" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_modified" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isIsManufacturingModified()) {
				stmt.setString( index++, dto.getIsManufacturing() );
			}
		
			if (dto.isIsBusinessModified()) {
				stmt.setString( index++, dto.getIsBusiness() );
			}
		
			if (dto.isIsConstructionModified()) {
				stmt.setString( index++, dto.getIsConstruction() );
			}
		
			if (dto.isIsEduModified()) {
				stmt.setString( index++, dto.getIsEdu() );
			}
		
			if (dto.isIsFacilityModified()) {
				stmt.setString( index++, dto.getIsFacility() );
			}
		
			if (dto.isIsFanancialModified()) {
				stmt.setString( index++, dto.getIsFanancial() );
			}
		
			if (dto.isIsFoodModified()) {
				stmt.setString( index++, dto.getIsFood() );
			}
		
			if (dto.isIsHealthModified()) {
				stmt.setString( index++, dto.getIsHealth() );
			}
		
			if (dto.isIsItcModified()) {
				stmt.setString( index++, dto.getIsItc() );
			}
		
			if (dto.isIsLogisticServiceModified()) {
				stmt.setString( index++, dto.getIsLogisticService() );
			}
		
			if (dto.isIsMarketingModified()) {
				stmt.setString( index++, dto.getIsMarketing() );
			}
		
			if (dto.isIsRealestateModified()) {
				stmt.setString( index++, dto.getIsRealestate() );
			}
		
			if (dto.isIsRecruitmentModified()) {
				stmt.setString( index++, dto.getIsRecruitment() );
			}
		
			if (dto.isIsRetailModified()) {
				stmt.setString( index++, dto.getIsRetail() );
			}
		
			if (dto.isIsSocialModified()) {
				stmt.setString( index++, dto.getIsSocial() );
			}
		
			if (dto.isIsUtilitiesModified()) {
				stmt.setString( index++, dto.getIsUtilities() );
			}
		
			if (dto.isIsOtherBusinessModified()) {
				stmt.setString( index++, dto.getIsOtherBusiness() );
			}
		
			if (dto.isIsFacilitiesServiceModified()) {
				stmt.setString( index++, dto.getIsFacilitiesService() );
			}
		
			if (dto.isIsHardwareModified()) {
				stmt.setString( index++, dto.getIsHardware() );
			}
		
			if (dto.isIsLogisticModified()) {
				stmt.setString( index++, dto.getIsLogistic() );
			}
		
			if (dto.isIsMarketingServiceModified()) {
				stmt.setString( index++, dto.getIsMarketingService() );
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				stmt.setString( index++, dto.getIsRecruitmentHr() );
			}
		
			if (dto.isIsSoftwareModified()) {
				stmt.setString( index++, dto.getIsSoftware() );
			}
		
			if (dto.isIsSpecilistModified()) {
				stmt.setString( index++, dto.getIsSpecilist() );
			}
		
			if (dto.isIsTelecomModified()) {
				stmt.setString( index++, dto.getIsTelecom() );
			}
		
			if (dto.isIsOtherServicesModified()) {
				stmt.setString( index++, dto.getIsOtherServices() );
			}
		
			if (dto.isIsBuildingProductsModified()) {
				stmt.setString( index++, dto.getIsBuildingProducts() );
			}
		
			if (dto.isIsComputerModified()) {
				stmt.setString( index++, dto.getIsComputer() );
			}
		
			if (dto.isIsElectronicModified()) {
				stmt.setString( index++, dto.getIsElectronic() );
			}
		
			if (dto.isIsEnvionmentalModified()) {
				stmt.setString( index++, dto.getIsEnvionmental() );
			}
		
			if (dto.isIsFurnitureModified()) {
				stmt.setString( index++, dto.getIsFurniture() );
			}
		
			if (dto.isIsGeneral1Modified()) {
				stmt.setString( index++, dto.getIsGeneral1() );
			}
		
			if (dto.isIsHealthSafety1Modified()) {
				stmt.setString( index++, dto.getIsHealthSafety1() );
			}
		
			if (dto.isIsItAccessModified()) {
				stmt.setString( index++, dto.getIsItAccess() );
			}
		
			if (dto.isIsLaptopModified()) {
				stmt.setString( index++, dto.getIsLaptop() );
			}
		
			if (dto.isIsMainframeModified()) {
				stmt.setString( index++, dto.getIsMainframe() );
			}
		
			if (dto.isIsMonitorsModified()) {
				stmt.setString( index++, dto.getIsMonitors() );
			}
		
			if (dto.isIsMobileTechModified()) {
				stmt.setString( index++, dto.getIsMobileTech() );
			}
		
			if (dto.isIsNetworkingModified()) {
				stmt.setString( index++, dto.getIsNetworking() );
			}
		
			if (dto.isIsPackagingModified()) {
				stmt.setString( index++, dto.getIsPackaging() );
			}
		
			if (dto.isIsPhotocopiersModified()) {
				stmt.setString( index++, dto.getIsPhotocopiers() );
			}
		
			if (dto.isIsPrintersModified()) {
				stmt.setString( index++, dto.getIsPrinters() );
			}
		
			if (dto.isIsPrinterInkModified()) {
				stmt.setString( index++, dto.getIsPrinterInk() );
			}
		
			if (dto.isIsSecurity1Modified()) {
				stmt.setString( index++, dto.getIsSecurity1() );
			}
		
			if (dto.isIsScannersModified()) {
				stmt.setString( index++, dto.getIsScanners() );
			}
		
			if (dto.isIsSoftwatePkgModified()) {
				stmt.setString( index++, dto.getIsSoftwatePkg() );
			}
		
			if (dto.isIsTouchpadModified()) {
				stmt.setString( index++, dto.getIsTouchpad() );
			}
		
			if (dto.isIsOtherProductsModified()) {
				stmt.setString( index++, dto.getIsOtherProducts() );
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				stmt.setString( index++, dto.getIsAssetRecovery() );
			}
		
			if (dto.isIsConItModified()) {
				stmt.setString( index++, dto.getIsConIt() );
			}
		
			if (dto.isIsConMediaModified()) {
				stmt.setString( index++, dto.getIsConMedia() );
			}
		
			if (dto.isIsConFacilityModified()) {
				stmt.setString( index++, dto.getIsConFacility() );
			}
		
			if (dto.isIsCourierModified()) {
				stmt.setString( index++, dto.getIsCourier() );
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				stmt.setString( index++, dto.getIsFacilityMgmt() );
			}
		
			if (dto.isIsFinancialServicesModified()) {
				stmt.setString( index++, dto.getIsFinancialServices() );
			}
		
			if (dto.isIsHealthSafetyModified()) {
				stmt.setString( index++, dto.getIsHealthSafety() );
			}
		
			if (dto.isIsIsHrModified()) {
				stmt.setString( index++, dto.getIsIsHr() );
			}
		
			if (dto.isIsFrieghtModified()) {
				stmt.setString( index++, dto.getIsFrieght() );
			}
		
			if (dto.isIsMediaMarketingModified()) {
				stmt.setString( index++, dto.getIsMediaMarketing() );
			}
		
			if (dto.isIsNetworkCabelingModified()) {
				stmt.setString( index++, dto.getIsNetworkCabeling() );
			}
		
			if (dto.isIsPrintingModified()) {
				stmt.setString( index++, dto.getIsPrinting() );
			}
		
			if (dto.isIsPhotograpicModified()) {
				stmt.setString( index++, dto.getIsPhotograpic() );
			}
		
			if (dto.isIsResellerModified()) {
				stmt.setString( index++, dto.getIsReseller() );
			}
		
			if (dto.isIsSecurityModified()) {
				stmt.setString( index++, dto.getIsSecurity() );
			}
		
			if (dto.isIsSdRdModified()) {
				stmt.setString( index++, dto.getIsSdRd() );
			}
		
			if (dto.isIsSsmModified()) {
				stmt.setString( index++, dto.getIsSsm() );
			}
		
			if (dto.isIsTechServicesModified()) {
				stmt.setString( index++, dto.getIsTechServices() );
			}
		
			if (dto.isIsTrainingItModified()) {
				stmt.setString( index++, dto.getIsTrainingIt() );
			}
		
			if (dto.isIsGeneralModified()) {
				stmt.setString( index++, dto.getIsGeneral() );
			}
		
			if (dto.isIsTravelModified()) {
				stmt.setString( index++, dto.getIsTravel() );
			}
		
			if (dto.isIsUtilityServicesModified()) {
				stmt.setString( index++, dto.getIsUtilityServices() );
			}
		
			if (dto.isIsOthersServicesModified()) {
				stmt.setString( index++, dto.getIsOthersServices() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductservicesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the productservices table.
	 */
	public void update(ProductservicesPk pk, Productservices dto) throws ProductservicesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isSupplierIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "supplier_id=?" );
				modified=true;
			}
		
			if (dto.isIsManufacturingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_manufacturing=?" );
				modified=true;
			}
		
			if (dto.isIsBusinessModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_business=?" );
				modified=true;
			}
		
			if (dto.isIsConstructionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_construction=?" );
				modified=true;
			}
		
			if (dto.isIsEduModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_edu=?" );
				modified=true;
			}
		
			if (dto.isIsFacilityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_facility=?" );
				modified=true;
			}
		
			if (dto.isIsFanancialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_fanancial=?" );
				modified=true;
			}
		
			if (dto.isIsFoodModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_food=?" );
				modified=true;
			}
		
			if (dto.isIsHealthModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_health=?" );
				modified=true;
			}
		
			if (dto.isIsItcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_itc=?" );
				modified=true;
			}
		
			if (dto.isIsLogisticServiceModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_logistic_service=?" );
				modified=true;
			}
		
			if (dto.isIsMarketingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_marketing=?" );
				modified=true;
			}
		
			if (dto.isIsRealestateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_realestate=?" );
				modified=true;
			}
		
			if (dto.isIsRecruitmentModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_recruitment=?" );
				modified=true;
			}
		
			if (dto.isIsRetailModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_retail=?" );
				modified=true;
			}
		
			if (dto.isIsSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_social=?" );
				modified=true;
			}
		
			if (dto.isIsUtilitiesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_utilities=?" );
				modified=true;
			}
		
			if (dto.isIsOtherBusinessModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_other_business=?" );
				modified=true;
			}
		
			if (dto.isIsFacilitiesServiceModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_facilities_service=?" );
				modified=true;
			}
		
			if (dto.isIsHardwareModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_hardware=?" );
				modified=true;
			}
		
			if (dto.isIsLogisticModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_logistic=?" );
				modified=true;
			}
		
			if (dto.isIsMarketingServiceModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_marketing_service=?" );
				modified=true;
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_recruitment_hr=?" );
				modified=true;
			}
		
			if (dto.isIsSoftwareModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_software=?" );
				modified=true;
			}
		
			if (dto.isIsSpecilistModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_specilist=?" );
				modified=true;
			}
		
			if (dto.isIsTelecomModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_telecom=?" );
				modified=true;
			}
		
			if (dto.isIsOtherServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_other_services=?" );
				modified=true;
			}
		
			if (dto.isIsBuildingProductsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_building_products=?" );
				modified=true;
			}
		
			if (dto.isIsComputerModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_computer=?" );
				modified=true;
			}
		
			if (dto.isIsElectronicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_electronic=?" );
				modified=true;
			}
		
			if (dto.isIsEnvionmentalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_envionmental=?" );
				modified=true;
			}
		
			if (dto.isIsFurnitureModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_furniture=?" );
				modified=true;
			}
		
			if (dto.isIsGeneral1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_general_1=?" );
				modified=true;
			}
		
			if (dto.isIsHealthSafety1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_health_safety_1=?" );
				modified=true;
			}
		
			if (dto.isIsItAccessModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_it_access=?" );
				modified=true;
			}
		
			if (dto.isIsLaptopModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_laptop=?" );
				modified=true;
			}
		
			if (dto.isIsMainframeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_mainframe=?" );
				modified=true;
			}
		
			if (dto.isIsMonitorsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_monitors=?" );
				modified=true;
			}
		
			if (dto.isIsMobileTechModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_mobile_tech=?" );
				modified=true;
			}
		
			if (dto.isIsNetworkingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_networking=?" );
				modified=true;
			}
		
			if (dto.isIsPackagingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_packaging=?" );
				modified=true;
			}
		
			if (dto.isIsPhotocopiersModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_photocopiers=?" );
				modified=true;
			}
		
			if (dto.isIsPrintersModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_printers=?" );
				modified=true;
			}
		
			if (dto.isIsPrinterInkModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_printer_ink=?" );
				modified=true;
			}
		
			if (dto.isIsSecurity1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_security_1=?" );
				modified=true;
			}
		
			if (dto.isIsScannersModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_scanners=?" );
				modified=true;
			}
		
			if (dto.isIsSoftwatePkgModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_softwate_pkg=?" );
				modified=true;
			}
		
			if (dto.isIsTouchpadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_touchpad=?" );
				modified=true;
			}
		
			if (dto.isIsOtherProductsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_other_products=?" );
				modified=true;
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_asset_recovery=?" );
				modified=true;
			}
		
			if (dto.isIsConItModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_con_it=?" );
				modified=true;
			}
		
			if (dto.isIsConMediaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_con_media=?" );
				modified=true;
			}
		
			if (dto.isIsConFacilityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_con_facility=?" );
				modified=true;
			}
		
			if (dto.isIsCourierModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_courier=?" );
				modified=true;
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_facility_mgmt=?" );
				modified=true;
			}
		
			if (dto.isIsFinancialServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_financial_services=?" );
				modified=true;
			}
		
			if (dto.isIsHealthSafetyModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_health_safety=?" );
				modified=true;
			}
		
			if (dto.isIsIsHrModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_is_hr=?" );
				modified=true;
			}
		
			if (dto.isIsFrieghtModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_frieght=?" );
				modified=true;
			}
		
			if (dto.isIsMediaMarketingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_media_marketing=?" );
				modified=true;
			}
		
			if (dto.isIsNetworkCabelingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_network_cabeling=?" );
				modified=true;
			}
		
			if (dto.isIsPrintingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_printing=?" );
				modified=true;
			}
		
			if (dto.isIsPhotograpicModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_photograpic=?" );
				modified=true;
			}
		
			if (dto.isIsResellerModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_reseller=?" );
				modified=true;
			}
		
			if (dto.isIsSecurityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_security=?" );
				modified=true;
			}
		
			if (dto.isIsSdRdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_sd_rd=?" );
				modified=true;
			}
		
			if (dto.isIsSsmModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_ssm=?" );
				modified=true;
			}
		
			if (dto.isIsTechServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_tech_services=?" );
				modified=true;
			}
		
			if (dto.isIsTrainingItModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_training_it=?" );
				modified=true;
			}
		
			if (dto.isIsGeneralModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_general=?" );
				modified=true;
			}
		
			if (dto.isIsTravelModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_travel=?" );
				modified=true;
			}
		
			if (dto.isIsUtilityServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_utility_services=?" );
				modified=true;
			}
		
			if (dto.isIsOthersServicesModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "is_others_services=?" );
				modified=true;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_created=?" );
				modified=true;
			}
		
			if (dto.isDateModifiedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_modified=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isSupplierIdModified()) {
				stmt.setInt( index++, dto.getSupplierId() );
			}
		
			if (dto.isIsManufacturingModified()) {
				stmt.setString( index++, dto.getIsManufacturing() );
			}
		
			if (dto.isIsBusinessModified()) {
				stmt.setString( index++, dto.getIsBusiness() );
			}
		
			if (dto.isIsConstructionModified()) {
				stmt.setString( index++, dto.getIsConstruction() );
			}
		
			if (dto.isIsEduModified()) {
				stmt.setString( index++, dto.getIsEdu() );
			}
		
			if (dto.isIsFacilityModified()) {
				stmt.setString( index++, dto.getIsFacility() );
			}
		
			if (dto.isIsFanancialModified()) {
				stmt.setString( index++, dto.getIsFanancial() );
			}
		
			if (dto.isIsFoodModified()) {
				stmt.setString( index++, dto.getIsFood() );
			}
		
			if (dto.isIsHealthModified()) {
				stmt.setString( index++, dto.getIsHealth() );
			}
		
			if (dto.isIsItcModified()) {
				stmt.setString( index++, dto.getIsItc() );
			}
		
			if (dto.isIsLogisticServiceModified()) {
				stmt.setString( index++, dto.getIsLogisticService() );
			}
		
			if (dto.isIsMarketingModified()) {
				stmt.setString( index++, dto.getIsMarketing() );
			}
		
			if (dto.isIsRealestateModified()) {
				stmt.setString( index++, dto.getIsRealestate() );
			}
		
			if (dto.isIsRecruitmentModified()) {
				stmt.setString( index++, dto.getIsRecruitment() );
			}
		
			if (dto.isIsRetailModified()) {
				stmt.setString( index++, dto.getIsRetail() );
			}
		
			if (dto.isIsSocialModified()) {
				stmt.setString( index++, dto.getIsSocial() );
			}
		
			if (dto.isIsUtilitiesModified()) {
				stmt.setString( index++, dto.getIsUtilities() );
			}
		
			if (dto.isIsOtherBusinessModified()) {
				stmt.setString( index++, dto.getIsOtherBusiness() );
			}
		
			if (dto.isIsFacilitiesServiceModified()) {
				stmt.setString( index++, dto.getIsFacilitiesService() );
			}
		
			if (dto.isIsHardwareModified()) {
				stmt.setString( index++, dto.getIsHardware() );
			}
		
			if (dto.isIsLogisticModified()) {
				stmt.setString( index++, dto.getIsLogistic() );
			}
		
			if (dto.isIsMarketingServiceModified()) {
				stmt.setString( index++, dto.getIsMarketingService() );
			}
		
			if (dto.isIsRecruitmentHrModified()) {
				stmt.setString( index++, dto.getIsRecruitmentHr() );
			}
		
			if (dto.isIsSoftwareModified()) {
				stmt.setString( index++, dto.getIsSoftware() );
			}
		
			if (dto.isIsSpecilistModified()) {
				stmt.setString( index++, dto.getIsSpecilist() );
			}
		
			if (dto.isIsTelecomModified()) {
				stmt.setString( index++, dto.getIsTelecom() );
			}
		
			if (dto.isIsOtherServicesModified()) {
				stmt.setString( index++, dto.getIsOtherServices() );
			}
		
			if (dto.isIsBuildingProductsModified()) {
				stmt.setString( index++, dto.getIsBuildingProducts() );
			}
		
			if (dto.isIsComputerModified()) {
				stmt.setString( index++, dto.getIsComputer() );
			}
		
			if (dto.isIsElectronicModified()) {
				stmt.setString( index++, dto.getIsElectronic() );
			}
		
			if (dto.isIsEnvionmentalModified()) {
				stmt.setString( index++, dto.getIsEnvionmental() );
			}
		
			if (dto.isIsFurnitureModified()) {
				stmt.setString( index++, dto.getIsFurniture() );
			}
		
			if (dto.isIsGeneral1Modified()) {
				stmt.setString( index++, dto.getIsGeneral1() );
			}
		
			if (dto.isIsHealthSafety1Modified()) {
				stmt.setString( index++, dto.getIsHealthSafety1() );
			}
		
			if (dto.isIsItAccessModified()) {
				stmt.setString( index++, dto.getIsItAccess() );
			}
		
			if (dto.isIsLaptopModified()) {
				stmt.setString( index++, dto.getIsLaptop() );
			}
		
			if (dto.isIsMainframeModified()) {
				stmt.setString( index++, dto.getIsMainframe() );
			}
		
			if (dto.isIsMonitorsModified()) {
				stmt.setString( index++, dto.getIsMonitors() );
			}
		
			if (dto.isIsMobileTechModified()) {
				stmt.setString( index++, dto.getIsMobileTech() );
			}
		
			if (dto.isIsNetworkingModified()) {
				stmt.setString( index++, dto.getIsNetworking() );
			}
		
			if (dto.isIsPackagingModified()) {
				stmt.setString( index++, dto.getIsPackaging() );
			}
		
			if (dto.isIsPhotocopiersModified()) {
				stmt.setString( index++, dto.getIsPhotocopiers() );
			}
		
			if (dto.isIsPrintersModified()) {
				stmt.setString( index++, dto.getIsPrinters() );
			}
		
			if (dto.isIsPrinterInkModified()) {
				stmt.setString( index++, dto.getIsPrinterInk() );
			}
		
			if (dto.isIsSecurity1Modified()) {
				stmt.setString( index++, dto.getIsSecurity1() );
			}
		
			if (dto.isIsScannersModified()) {
				stmt.setString( index++, dto.getIsScanners() );
			}
		
			if (dto.isIsSoftwatePkgModified()) {
				stmt.setString( index++, dto.getIsSoftwatePkg() );
			}
		
			if (dto.isIsTouchpadModified()) {
				stmt.setString( index++, dto.getIsTouchpad() );
			}
		
			if (dto.isIsOtherProductsModified()) {
				stmt.setString( index++, dto.getIsOtherProducts() );
			}
		
			if (dto.isIsAssetRecoveryModified()) {
				stmt.setString( index++, dto.getIsAssetRecovery() );
			}
		
			if (dto.isIsConItModified()) {
				stmt.setString( index++, dto.getIsConIt() );
			}
		
			if (dto.isIsConMediaModified()) {
				stmt.setString( index++, dto.getIsConMedia() );
			}
		
			if (dto.isIsConFacilityModified()) {
				stmt.setString( index++, dto.getIsConFacility() );
			}
		
			if (dto.isIsCourierModified()) {
				stmt.setString( index++, dto.getIsCourier() );
			}
		
			if (dto.isIsFacilityMgmtModified()) {
				stmt.setString( index++, dto.getIsFacilityMgmt() );
			}
		
			if (dto.isIsFinancialServicesModified()) {
				stmt.setString( index++, dto.getIsFinancialServices() );
			}
		
			if (dto.isIsHealthSafetyModified()) {
				stmt.setString( index++, dto.getIsHealthSafety() );
			}
		
			if (dto.isIsIsHrModified()) {
				stmt.setString( index++, dto.getIsIsHr() );
			}
		
			if (dto.isIsFrieghtModified()) {
				stmt.setString( index++, dto.getIsFrieght() );
			}
		
			if (dto.isIsMediaMarketingModified()) {
				stmt.setString( index++, dto.getIsMediaMarketing() );
			}
		
			if (dto.isIsNetworkCabelingModified()) {
				stmt.setString( index++, dto.getIsNetworkCabeling() );
			}
		
			if (dto.isIsPrintingModified()) {
				stmt.setString( index++, dto.getIsPrinting() );
			}
		
			if (dto.isIsPhotograpicModified()) {
				stmt.setString( index++, dto.getIsPhotograpic() );
			}
		
			if (dto.isIsResellerModified()) {
				stmt.setString( index++, dto.getIsReseller() );
			}
		
			if (dto.isIsSecurityModified()) {
				stmt.setString( index++, dto.getIsSecurity() );
			}
		
			if (dto.isIsSdRdModified()) {
				stmt.setString( index++, dto.getIsSdRd() );
			}
		
			if (dto.isIsSsmModified()) {
				stmt.setString( index++, dto.getIsSsm() );
			}
		
			if (dto.isIsTechServicesModified()) {
				stmt.setString( index++, dto.getIsTechServices() );
			}
		
			if (dto.isIsTrainingItModified()) {
				stmt.setString( index++, dto.getIsTrainingIt() );
			}
		
			if (dto.isIsGeneralModified()) {
				stmt.setString( index++, dto.getIsGeneral() );
			}
		
			if (dto.isIsTravelModified()) {
				stmt.setString( index++, dto.getIsTravel() );
			}
		
			if (dto.isIsUtilityServicesModified()) {
				stmt.setString( index++, dto.getIsUtilityServices() );
			}
		
			if (dto.isIsOthersServicesModified()) {
				stmt.setString( index++, dto.getIsOthersServices() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifiedModified()) {
				stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductservicesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the productservices table.
	 */
	public void delete(ProductservicesPk pk) throws ProductservicesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductservicesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the productservices table that matches the specified primary-key value.
	 */
	public Productservices findByPrimaryKey(ProductservicesPk pk) throws ProductservicesDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'id = :id'.
	 */
	public Productservices findByPrimaryKey(int id) throws ProductservicesDaoException
	{
		Productservices ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria ''.
	 */
	public Productservices[] findAll() throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Productservices[] findBySubmissionForm(int supplierId) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ?", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'id = :id'.
	 */
	public Productservices[] findWhereIdEquals(int id) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'supplier_id = :supplierId'.
	 */
	public Productservices[] findWhereSupplierIdEquals(int supplierId) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE supplier_id = ? ORDER BY supplier_id", new Object[] {  new Integer(supplierId) } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_manufacturing = :isManufacturing'.
	 */
	public Productservices[] findWhereIsManufacturingEquals(String isManufacturing) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_manufacturing = ? ORDER BY is_manufacturing", new Object[] { isManufacturing } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_business = :isBusiness'.
	 */
	public Productservices[] findWhereIsBusinessEquals(String isBusiness) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_business = ? ORDER BY is_business", new Object[] { isBusiness } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_construction = :isConstruction'.
	 */
	public Productservices[] findWhereIsConstructionEquals(String isConstruction) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_construction = ? ORDER BY is_construction", new Object[] { isConstruction } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_edu = :isEdu'.
	 */
	public Productservices[] findWhereIsEduEquals(String isEdu) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_edu = ? ORDER BY is_edu", new Object[] { isEdu } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_facility = :isFacility'.
	 */
	public Productservices[] findWhereIsFacilityEquals(String isFacility) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_facility = ? ORDER BY is_facility", new Object[] { isFacility } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_fanancial = :isFanancial'.
	 */
	public Productservices[] findWhereIsFanancialEquals(String isFanancial) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_fanancial = ? ORDER BY is_fanancial", new Object[] { isFanancial } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_food = :isFood'.
	 */
	public Productservices[] findWhereIsFoodEquals(String isFood) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_food = ? ORDER BY is_food", new Object[] { isFood } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_health = :isHealth'.
	 */
	public Productservices[] findWhereIsHealthEquals(String isHealth) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_health = ? ORDER BY is_health", new Object[] { isHealth } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_itc = :isItc'.
	 */
	public Productservices[] findWhereIsItcEquals(String isItc) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_itc = ? ORDER BY is_itc", new Object[] { isItc } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_logistic_service = :isLogisticService'.
	 */
	public Productservices[] findWhereIsLogisticServiceEquals(String isLogisticService) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_logistic_service = ? ORDER BY is_logistic_service", new Object[] { isLogisticService } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_marketing = :isMarketing'.
	 */
	public Productservices[] findWhereIsMarketingEquals(String isMarketing) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_marketing = ? ORDER BY is_marketing", new Object[] { isMarketing } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_realestate = :isRealestate'.
	 */
	public Productservices[] findWhereIsRealestateEquals(String isRealestate) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_realestate = ? ORDER BY is_realestate", new Object[] { isRealestate } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_recruitment = :isRecruitment'.
	 */
	public Productservices[] findWhereIsRecruitmentEquals(String isRecruitment) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_recruitment = ? ORDER BY is_recruitment", new Object[] { isRecruitment } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_retail = :isRetail'.
	 */
	public Productservices[] findWhereIsRetailEquals(String isRetail) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_retail = ? ORDER BY is_retail", new Object[] { isRetail } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_social = :isSocial'.
	 */
	public Productservices[] findWhereIsSocialEquals(String isSocial) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_social = ? ORDER BY is_social", new Object[] { isSocial } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_utilities = :isUtilities'.
	 */
	public Productservices[] findWhereIsUtilitiesEquals(String isUtilities) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_utilities = ? ORDER BY is_utilities", new Object[] { isUtilities } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_other_business = :isOtherBusiness'.
	 */
	public Productservices[] findWhereIsOtherBusinessEquals(String isOtherBusiness) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_other_business = ? ORDER BY is_other_business", new Object[] { isOtherBusiness } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_facilities_service = :isFacilitiesService'.
	 */
	public Productservices[] findWhereIsFacilitiesServiceEquals(String isFacilitiesService) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_facilities_service = ? ORDER BY is_facilities_service", new Object[] { isFacilitiesService } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_hardware = :isHardware'.
	 */
	public Productservices[] findWhereIsHardwareEquals(String isHardware) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_hardware = ? ORDER BY is_hardware", new Object[] { isHardware } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_logistic = :isLogistic'.
	 */
	public Productservices[] findWhereIsLogisticEquals(String isLogistic) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_logistic = ? ORDER BY is_logistic", new Object[] { isLogistic } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_marketing_service = :isMarketingService'.
	 */
	public Productservices[] findWhereIsMarketingServiceEquals(String isMarketingService) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_marketing_service = ? ORDER BY is_marketing_service", new Object[] { isMarketingService } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_recruitment_hr = :isRecruitmentHr'.
	 */
	public Productservices[] findWhereIsRecruitmentHrEquals(String isRecruitmentHr) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_recruitment_hr = ? ORDER BY is_recruitment_hr", new Object[] { isRecruitmentHr } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_software = :isSoftware'.
	 */
	public Productservices[] findWhereIsSoftwareEquals(String isSoftware) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_software = ? ORDER BY is_software", new Object[] { isSoftware } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_specilist = :isSpecilist'.
	 */
	public Productservices[] findWhereIsSpecilistEquals(String isSpecilist) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_specilist = ? ORDER BY is_specilist", new Object[] { isSpecilist } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_telecom = :isTelecom'.
	 */
	public Productservices[] findWhereIsTelecomEquals(String isTelecom) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_telecom = ? ORDER BY is_telecom", new Object[] { isTelecom } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_other_services = :isOtherServices'.
	 */
	public Productservices[] findWhereIsOtherServicesEquals(String isOtherServices) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_other_services = ? ORDER BY is_other_services", new Object[] { isOtherServices } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_building_products = :isBuildingProducts'.
	 */
	public Productservices[] findWhereIsBuildingProductsEquals(String isBuildingProducts) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_building_products = ? ORDER BY is_building_products", new Object[] { isBuildingProducts } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_computer = :isComputer'.
	 */
	public Productservices[] findWhereIsComputerEquals(String isComputer) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_computer = ? ORDER BY is_computer", new Object[] { isComputer } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_electronic = :isElectronic'.
	 */
	public Productservices[] findWhereIsElectronicEquals(String isElectronic) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_electronic = ? ORDER BY is_electronic", new Object[] { isElectronic } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_envionmental = :isEnvionmental'.
	 */
	public Productservices[] findWhereIsEnvionmentalEquals(String isEnvionmental) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_envionmental = ? ORDER BY is_envionmental", new Object[] { isEnvionmental } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_furniture = :isFurniture'.
	 */
	public Productservices[] findWhereIsFurnitureEquals(String isFurniture) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_furniture = ? ORDER BY is_furniture", new Object[] { isFurniture } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_general_1 = :isGeneral1'.
	 */
	public Productservices[] findWhereIsGeneral1Equals(String isGeneral1) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_general_1 = ? ORDER BY is_general_1", new Object[] { isGeneral1 } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_health_safety_1 = :isHealthSafety1'.
	 */
	public Productservices[] findWhereIsHealthSafety1Equals(String isHealthSafety1) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_health_safety_1 = ? ORDER BY is_health_safety_1", new Object[] { isHealthSafety1 } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_it_access = :isItAccess'.
	 */
	public Productservices[] findWhereIsItAccessEquals(String isItAccess) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_it_access = ? ORDER BY is_it_access", new Object[] { isItAccess } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_laptop = :isLaptop'.
	 */
	public Productservices[] findWhereIsLaptopEquals(String isLaptop) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_laptop = ? ORDER BY is_laptop", new Object[] { isLaptop } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_mainframe = :isMainframe'.
	 */
	public Productservices[] findWhereIsMainframeEquals(String isMainframe) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_mainframe = ? ORDER BY is_mainframe", new Object[] { isMainframe } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_monitors = :isMonitors'.
	 */
	public Productservices[] findWhereIsMonitorsEquals(String isMonitors) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_monitors = ? ORDER BY is_monitors", new Object[] { isMonitors } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_mobile_tech = :isMobileTech'.
	 */
	public Productservices[] findWhereIsMobileTechEquals(String isMobileTech) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_mobile_tech = ? ORDER BY is_mobile_tech", new Object[] { isMobileTech } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_networking = :isNetworking'.
	 */
	public Productservices[] findWhereIsNetworkingEquals(String isNetworking) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_networking = ? ORDER BY is_networking", new Object[] { isNetworking } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_packaging = :isPackaging'.
	 */
	public Productservices[] findWhereIsPackagingEquals(String isPackaging) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_packaging = ? ORDER BY is_packaging", new Object[] { isPackaging } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_photocopiers = :isPhotocopiers'.
	 */
	public Productservices[] findWhereIsPhotocopiersEquals(String isPhotocopiers) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_photocopiers = ? ORDER BY is_photocopiers", new Object[] { isPhotocopiers } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_printers = :isPrinters'.
	 */
	public Productservices[] findWhereIsPrintersEquals(String isPrinters) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_printers = ? ORDER BY is_printers", new Object[] { isPrinters } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_printer_ink = :isPrinterInk'.
	 */
	public Productservices[] findWhereIsPrinterInkEquals(String isPrinterInk) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_printer_ink = ? ORDER BY is_printer_ink", new Object[] { isPrinterInk } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_security_1 = :isSecurity1'.
	 */
	public Productservices[] findWhereIsSecurity1Equals(String isSecurity1) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_security_1 = ? ORDER BY is_security_1", new Object[] { isSecurity1 } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_scanners = :isScanners'.
	 */
	public Productservices[] findWhereIsScannersEquals(String isScanners) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_scanners = ? ORDER BY is_scanners", new Object[] { isScanners } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_softwate_pkg = :isSoftwatePkg'.
	 */
	public Productservices[] findWhereIsSoftwatePkgEquals(String isSoftwatePkg) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_softwate_pkg = ? ORDER BY is_softwate_pkg", new Object[] { isSoftwatePkg } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_touchpad = :isTouchpad'.
	 */
	public Productservices[] findWhereIsTouchpadEquals(String isTouchpad) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_touchpad = ? ORDER BY is_touchpad", new Object[] { isTouchpad } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_other_products = :isOtherProducts'.
	 */
	public Productservices[] findWhereIsOtherProductsEquals(String isOtherProducts) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_other_products = ? ORDER BY is_other_products", new Object[] { isOtherProducts } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_asset_recovery = :isAssetRecovery'.
	 */
	public Productservices[] findWhereIsAssetRecoveryEquals(String isAssetRecovery) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_asset_recovery = ? ORDER BY is_asset_recovery", new Object[] { isAssetRecovery } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_con_it = :isConIt'.
	 */
	public Productservices[] findWhereIsConItEquals(String isConIt) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_con_it = ? ORDER BY is_con_it", new Object[] { isConIt } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_con_media = :isConMedia'.
	 */
	public Productservices[] findWhereIsConMediaEquals(String isConMedia) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_con_media = ? ORDER BY is_con_media", new Object[] { isConMedia } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_con_facility = :isConFacility'.
	 */
	public Productservices[] findWhereIsConFacilityEquals(String isConFacility) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_con_facility = ? ORDER BY is_con_facility", new Object[] { isConFacility } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_courier = :isCourier'.
	 */
	public Productservices[] findWhereIsCourierEquals(String isCourier) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_courier = ? ORDER BY is_courier", new Object[] { isCourier } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_facility_mgmt = :isFacilityMgmt'.
	 */
	public Productservices[] findWhereIsFacilityMgmtEquals(String isFacilityMgmt) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_facility_mgmt = ? ORDER BY is_facility_mgmt", new Object[] { isFacilityMgmt } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_financial_services = :isFinancialServices'.
	 */
	public Productservices[] findWhereIsFinancialServicesEquals(String isFinancialServices) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_financial_services = ? ORDER BY is_financial_services", new Object[] { isFinancialServices } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_health_safety = :isHealthSafety'.
	 */
	public Productservices[] findWhereIsHealthSafetyEquals(String isHealthSafety) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_health_safety = ? ORDER BY is_health_safety", new Object[] { isHealthSafety } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_is_hr = :isIsHr'.
	 */
	public Productservices[] findWhereIsIsHrEquals(String isIsHr) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_is_hr = ? ORDER BY is_is_hr", new Object[] { isIsHr } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_frieght = :isFrieght'.
	 */
	public Productservices[] findWhereIsFrieghtEquals(String isFrieght) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_frieght = ? ORDER BY is_frieght", new Object[] { isFrieght } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_media_marketing = :isMediaMarketing'.
	 */
	public Productservices[] findWhereIsMediaMarketingEquals(String isMediaMarketing) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_media_marketing = ? ORDER BY is_media_marketing", new Object[] { isMediaMarketing } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_network_cabeling = :isNetworkCabeling'.
	 */
	public Productservices[] findWhereIsNetworkCabelingEquals(String isNetworkCabeling) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_network_cabeling = ? ORDER BY is_network_cabeling", new Object[] { isNetworkCabeling } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_printing = :isPrinting'.
	 */
	public Productservices[] findWhereIsPrintingEquals(String isPrinting) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_printing = ? ORDER BY is_printing", new Object[] { isPrinting } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_photograpic = :isPhotograpic'.
	 */
	public Productservices[] findWhereIsPhotograpicEquals(String isPhotograpic) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_photograpic = ? ORDER BY is_photograpic", new Object[] { isPhotograpic } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_reseller = :isReseller'.
	 */
	public Productservices[] findWhereIsResellerEquals(String isReseller) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_reseller = ? ORDER BY is_reseller", new Object[] { isReseller } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_security = :isSecurity'.
	 */
	public Productservices[] findWhereIsSecurityEquals(String isSecurity) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_security = ? ORDER BY is_security", new Object[] { isSecurity } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_sd_rd = :isSdRd'.
	 */
	public Productservices[] findWhereIsSdRdEquals(String isSdRd) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_sd_rd = ? ORDER BY is_sd_rd", new Object[] { isSdRd } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_ssm = :isSsm'.
	 */
	public Productservices[] findWhereIsSsmEquals(String isSsm) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_ssm = ? ORDER BY is_ssm", new Object[] { isSsm } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_tech_services = :isTechServices'.
	 */
	public Productservices[] findWhereIsTechServicesEquals(String isTechServices) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_tech_services = ? ORDER BY is_tech_services", new Object[] { isTechServices } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_training_it = :isTrainingIt'.
	 */
	public Productservices[] findWhereIsTrainingItEquals(String isTrainingIt) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_training_it = ? ORDER BY is_training_it", new Object[] { isTrainingIt } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_general = :isGeneral'.
	 */
	public Productservices[] findWhereIsGeneralEquals(String isGeneral) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_general = ? ORDER BY is_general", new Object[] { isGeneral } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_travel = :isTravel'.
	 */
	public Productservices[] findWhereIsTravelEquals(String isTravel) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_travel = ? ORDER BY is_travel", new Object[] { isTravel } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_utility_services = :isUtilityServices'.
	 */
	public Productservices[] findWhereIsUtilityServicesEquals(String isUtilityServices) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_utility_services = ? ORDER BY is_utility_services", new Object[] { isUtilityServices } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'is_others_services = :isOthersServices'.
	 */
	public Productservices[] findWhereIsOthersServicesEquals(String isOthersServices) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_others_services = ? ORDER BY is_others_services", new Object[] { isOthersServices } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'date_created = :dateCreated'.
	 */
	public Productservices[] findWhereDateCreatedEquals(Date dateCreated) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the productservices table that match the criteria 'date_modified = :dateModified'.
	 */
	public Productservices[] findWhereDateModifiedEquals(Date dateModified) throws ProductservicesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modified = ? ORDER BY date_modified", new Object[] { dateModified==null ? null : new java.sql.Timestamp( dateModified.getTime() ) } );
	}

	/**
	 * Method 'ProductservicesDaoImpl'
	 * 
	 */
	public ProductservicesDaoImpl()
	{
	}

	/**
	 * Method 'ProductservicesDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProductservicesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "supplierdb.productservices";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Productservices fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Productservices dto = new Productservices();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Productservices[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Productservices dto = new Productservices();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Productservices ret[] = new Productservices[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Productservices dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setSupplierId( rs.getInt( COLUMN_SUPPLIER_ID ) );
		dto.setIsManufacturing( rs.getString( COLUMN_IS_MANUFACTURING ) );
		dto.setIsBusiness( rs.getString( COLUMN_IS_BUSINESS ) );
		dto.setIsConstruction( rs.getString( COLUMN_IS_CONSTRUCTION ) );
		dto.setIsEdu( rs.getString( COLUMN_IS_EDU ) );
		dto.setIsFacility( rs.getString( COLUMN_IS_FACILITY ) );
		dto.setIsFanancial( rs.getString( COLUMN_IS_FANANCIAL ) );
		dto.setIsFood( rs.getString( COLUMN_IS_FOOD ) );
		dto.setIsHealth( rs.getString( COLUMN_IS_HEALTH ) );
		dto.setIsItc( rs.getString( COLUMN_IS_ITC ) );
		dto.setIsLogisticService( rs.getString( COLUMN_IS_LOGISTIC_SERVICE ) );
		dto.setIsMarketing( rs.getString( COLUMN_IS_MARKETING ) );
		dto.setIsRealestate( rs.getString( COLUMN_IS_REALESTATE ) );
		dto.setIsRecruitment( rs.getString( COLUMN_IS_RECRUITMENT ) );
		dto.setIsRetail( rs.getString( COLUMN_IS_RETAIL ) );
		dto.setIsSocial( rs.getString( COLUMN_IS_SOCIAL ) );
		dto.setIsUtilities( rs.getString( COLUMN_IS_UTILITIES ) );
		dto.setIsOtherBusiness( rs.getString( COLUMN_IS_OTHER_BUSINESS ) );
		dto.setIsFacilitiesService( rs.getString( COLUMN_IS_FACILITIES_SERVICE ) );
		dto.setIsHardware( rs.getString( COLUMN_IS_HARDWARE ) );
		dto.setIsLogistic( rs.getString( COLUMN_IS_LOGISTIC ) );
		dto.setIsMarketingService( rs.getString( COLUMN_IS_MARKETING_SERVICE ) );
		dto.setIsRecruitmentHr( rs.getString( COLUMN_IS_RECRUITMENT_HR ) );
		dto.setIsSoftware( rs.getString( COLUMN_IS_SOFTWARE ) );
		dto.setIsSpecilist( rs.getString( COLUMN_IS_SPECILIST ) );
		dto.setIsTelecom( rs.getString( COLUMN_IS_TELECOM ) );
		dto.setIsOtherServices( rs.getString( COLUMN_IS_OTHER_SERVICES ) );
		dto.setIsBuildingProducts( rs.getString( COLUMN_IS_BUILDING_PRODUCTS ) );
		dto.setIsComputer( rs.getString( COLUMN_IS_COMPUTER ) );
		dto.setIsElectronic( rs.getString( COLUMN_IS_ELECTRONIC ) );
		dto.setIsEnvionmental( rs.getString( COLUMN_IS_ENVIONMENTAL ) );
		dto.setIsFurniture( rs.getString( COLUMN_IS_FURNITURE ) );
		dto.setIsGeneral1( rs.getString( COLUMN_IS_GENERAL1 ) );
		dto.setIsHealthSafety1( rs.getString( COLUMN_IS_HEALTH_SAFETY1 ) );
		dto.setIsItAccess( rs.getString( COLUMN_IS_IT_ACCESS ) );
		dto.setIsLaptop( rs.getString( COLUMN_IS_LAPTOP ) );
		dto.setIsMainframe( rs.getString( COLUMN_IS_MAINFRAME ) );
		dto.setIsMonitors( rs.getString( COLUMN_IS_MONITORS ) );
		dto.setIsMobileTech( rs.getString( COLUMN_IS_MOBILE_TECH ) );
		dto.setIsNetworking( rs.getString( COLUMN_IS_NETWORKING ) );
		dto.setIsPackaging( rs.getString( COLUMN_IS_PACKAGING ) );
		dto.setIsPhotocopiers( rs.getString( COLUMN_IS_PHOTOCOPIERS ) );
		dto.setIsPrinters( rs.getString( COLUMN_IS_PRINTERS ) );
		dto.setIsPrinterInk( rs.getString( COLUMN_IS_PRINTER_INK ) );
		dto.setIsSecurity1( rs.getString( COLUMN_IS_SECURITY1 ) );
		dto.setIsScanners( rs.getString( COLUMN_IS_SCANNERS ) );
		dto.setIsSoftwatePkg( rs.getString( COLUMN_IS_SOFTWATE_PKG ) );
		dto.setIsTouchpad( rs.getString( COLUMN_IS_TOUCHPAD ) );
		dto.setIsOtherProducts( rs.getString( COLUMN_IS_OTHER_PRODUCTS ) );
		dto.setIsAssetRecovery( rs.getString( COLUMN_IS_ASSET_RECOVERY ) );
		dto.setIsConIt( rs.getString( COLUMN_IS_CON_IT ) );
		dto.setIsConMedia( rs.getString( COLUMN_IS_CON_MEDIA ) );
		dto.setIsConFacility( rs.getString( COLUMN_IS_CON_FACILITY ) );
		dto.setIsCourier( rs.getString( COLUMN_IS_COURIER ) );
		dto.setIsFacilityMgmt( rs.getString( COLUMN_IS_FACILITY_MGMT ) );
		dto.setIsFinancialServices( rs.getString( COLUMN_IS_FINANCIAL_SERVICES ) );
		dto.setIsHealthSafety( rs.getString( COLUMN_IS_HEALTH_SAFETY ) );
		dto.setIsIsHr( rs.getString( COLUMN_IS_IS_HR ) );
		dto.setIsFrieght( rs.getString( COLUMN_IS_FRIEGHT ) );
		dto.setIsMediaMarketing( rs.getString( COLUMN_IS_MEDIA_MARKETING ) );
		dto.setIsNetworkCabeling( rs.getString( COLUMN_IS_NETWORK_CABELING ) );
		dto.setIsPrinting( rs.getString( COLUMN_IS_PRINTING ) );
		dto.setIsPhotograpic( rs.getString( COLUMN_IS_PHOTOGRAPIC ) );
		dto.setIsReseller( rs.getString( COLUMN_IS_RESELLER ) );
		dto.setIsSecurity( rs.getString( COLUMN_IS_SECURITY ) );
		dto.setIsSdRd( rs.getString( COLUMN_IS_SD_RD ) );
		dto.setIsSsm( rs.getString( COLUMN_IS_SSM ) );
		dto.setIsTechServices( rs.getString( COLUMN_IS_TECH_SERVICES ) );
		dto.setIsTrainingIt( rs.getString( COLUMN_IS_TRAINING_IT ) );
		dto.setIsGeneral( rs.getString( COLUMN_IS_GENERAL ) );
		dto.setIsTravel( rs.getString( COLUMN_IS_TRAVEL ) );
		dto.setIsUtilityServices( rs.getString( COLUMN_IS_UTILITY_SERVICES ) );
		dto.setIsOthersServices( rs.getString( COLUMN_IS_OTHERS_SERVICES ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModified( rs.getTimestamp(COLUMN_DATE_MODIFIED ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Productservices dto)
	{
		dto.setIdModified( false );
		dto.setSupplierIdModified( false );
		dto.setIsManufacturingModified( false );
		dto.setIsBusinessModified( false );
		dto.setIsConstructionModified( false );
		dto.setIsEduModified( false );
		dto.setIsFacilityModified( false );
		dto.setIsFanancialModified( false );
		dto.setIsFoodModified( false );
		dto.setIsHealthModified( false );
		dto.setIsItcModified( false );
		dto.setIsLogisticServiceModified( false );
		dto.setIsMarketingModified( false );
		dto.setIsRealestateModified( false );
		dto.setIsRecruitmentModified( false );
		dto.setIsRetailModified( false );
		dto.setIsSocialModified( false );
		dto.setIsUtilitiesModified( false );
		dto.setIsOtherBusinessModified( false );
		dto.setIsFacilitiesServiceModified( false );
		dto.setIsHardwareModified( false );
		dto.setIsLogisticModified( false );
		dto.setIsMarketingServiceModified( false );
		dto.setIsRecruitmentHrModified( false );
		dto.setIsSoftwareModified( false );
		dto.setIsSpecilistModified( false );
		dto.setIsTelecomModified( false );
		dto.setIsOtherServicesModified( false );
		dto.setIsBuildingProductsModified( false );
		dto.setIsComputerModified( false );
		dto.setIsElectronicModified( false );
		dto.setIsEnvionmentalModified( false );
		dto.setIsFurnitureModified( false );
		dto.setIsGeneral1Modified( false );
		dto.setIsHealthSafety1Modified( false );
		dto.setIsItAccessModified( false );
		dto.setIsLaptopModified( false );
		dto.setIsMainframeModified( false );
		dto.setIsMonitorsModified( false );
		dto.setIsMobileTechModified( false );
		dto.setIsNetworkingModified( false );
		dto.setIsPackagingModified( false );
		dto.setIsPhotocopiersModified( false );
		dto.setIsPrintersModified( false );
		dto.setIsPrinterInkModified( false );
		dto.setIsSecurity1Modified( false );
		dto.setIsScannersModified( false );
		dto.setIsSoftwatePkgModified( false );
		dto.setIsTouchpadModified( false );
		dto.setIsOtherProductsModified( false );
		dto.setIsAssetRecoveryModified( false );
		dto.setIsConItModified( false );
		dto.setIsConMediaModified( false );
		dto.setIsConFacilityModified( false );
		dto.setIsCourierModified( false );
		dto.setIsFacilityMgmtModified( false );
		dto.setIsFinancialServicesModified( false );
		dto.setIsHealthSafetyModified( false );
		dto.setIsIsHrModified( false );
		dto.setIsFrieghtModified( false );
		dto.setIsMediaMarketingModified( false );
		dto.setIsNetworkCabelingModified( false );
		dto.setIsPrintingModified( false );
		dto.setIsPhotograpicModified( false );
		dto.setIsResellerModified( false );
		dto.setIsSecurityModified( false );
		dto.setIsSdRdModified( false );
		dto.setIsSsmModified( false );
		dto.setIsTechServicesModified( false );
		dto.setIsTrainingItModified( false );
		dto.setIsGeneralModified( false );
		dto.setIsTravelModified( false );
		dto.setIsUtilityServicesModified( false );
		dto.setIsOthersServicesModified( false );
		dto.setDateCreatedModified( false );
		dto.setDateModifiedModified( false );
	}

	/** 
	 * Returns all rows from the productservices table that match the specified arbitrary SQL statement
	 */
	public Productservices[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProductservicesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductservicesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the productservices table that match the specified arbitrary SQL statement
	 */
	public Productservices[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProductservicesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductservicesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
