/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.jdbc;

import com.hp.supplier.dao.*;
import com.hp.supplier.factory.*;
import java.util.Date;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SubmissionFormDaoImpl extends AbstractDAO implements SubmissionFormDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, auto_sign, organization, contact_name, contact_title, email_adress, phone_number, date_created, date_modifed FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, auto_sign, organization, contact_name, contact_title, email_adress, phone_number, date_created, date_modifed ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, auto_sign = ?, organization = ?, contact_name = ?, contact_title = ?, email_adress = ?, phone_number = ?, date_created = ?, date_modifed = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column auto_sign
	 */
	protected static final int COLUMN_AUTO_SIGN = 2;

	/** 
	 * Index of column organization
	 */
	protected static final int COLUMN_ORGANIZATION = 3;

	/** 
	 * Index of column contact_name
	 */
	protected static final int COLUMN_CONTACT_NAME = 4;

	/** 
	 * Index of column contact_title
	 */
	protected static final int COLUMN_CONTACT_TITLE = 5;

	/** 
	 * Index of column email_adress
	 */
	protected static final int COLUMN_EMAIL_ADRESS = 6;

	/** 
	 * Index of column phone_number
	 */
	protected static final int COLUMN_PHONE_NUMBER = 7;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 8;

	/** 
	 * Index of column date_modifed
	 */
	protected static final int COLUMN_DATE_MODIFED = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the submission_form table.
	 */
	public SubmissionFormPk insert(SubmissionForm dto) throws SubmissionFormDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAutoSignModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "auto_sign" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOrganizationModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "organization" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactTitleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_title" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmailAdressModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "email_adress" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPhoneNumberModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "phone_number" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_created" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDateModifedModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "date_modifed" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isAutoSignModified()) {
				stmt.setString( index++, dto.getAutoSign() );
			}
		
			if (dto.isOrganizationModified()) {
				stmt.setString( index++, dto.getOrganization() );
			}
		
			if (dto.isContactNameModified()) {
				stmt.setString( index++, dto.getContactName() );
			}
		
			if (dto.isContactTitleModified()) {
				stmt.setString( index++, dto.getContactTitle() );
			}
		
			if (dto.isEmailAdressModified()) {
				stmt.setString( index++, dto.getEmailAdress() );
			}
		
			if (dto.isPhoneNumberModified()) {
				stmt.setString( index++, dto.getPhoneNumber() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifedModified()) {
				stmt.setTimestamp(index++, dto.getDateModifed()==null ? null : new java.sql.Timestamp( dto.getDateModifed().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SubmissionFormDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the submission_form table.
	 */
	public void update(SubmissionFormPk pk, SubmissionForm dto) throws SubmissionFormDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isAutoSignModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "auto_sign=?" );
				modified=true;
			}
		
			if (dto.isOrganizationModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "organization=?" );
				modified=true;
			}
		
			if (dto.isContactNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_name=?" );
				modified=true;
			}
		
			if (dto.isContactTitleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_title=?" );
				modified=true;
			}
		
			if (dto.isEmailAdressModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "email_adress=?" );
				modified=true;
			}
		
			if (dto.isPhoneNumberModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "phone_number=?" );
				modified=true;
			}
		
			if (dto.isDateCreatedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_created=?" );
				modified=true;
			}
		
			if (dto.isDateModifedModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "date_modifed=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isAutoSignModified()) {
				stmt.setString( index++, dto.getAutoSign() );
			}
		
			if (dto.isOrganizationModified()) {
				stmt.setString( index++, dto.getOrganization() );
			}
		
			if (dto.isContactNameModified()) {
				stmt.setString( index++, dto.getContactName() );
			}
		
			if (dto.isContactTitleModified()) {
				stmt.setString( index++, dto.getContactTitle() );
			}
		
			if (dto.isEmailAdressModified()) {
				stmt.setString( index++, dto.getEmailAdress() );
			}
		
			if (dto.isPhoneNumberModified()) {
				stmt.setString( index++, dto.getPhoneNumber() );
			}
		
			if (dto.isDateCreatedModified()) {
				stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			}
		
			if (dto.isDateModifedModified()) {
				stmt.setTimestamp(index++, dto.getDateModifed()==null ? null : new java.sql.Timestamp( dto.getDateModifed().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SubmissionFormDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the submission_form table.
	 */
	public void delete(SubmissionFormPk pk) throws SubmissionFormDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SubmissionFormDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the submission_form table that matches the specified primary-key value.
	 */
	public SubmissionForm findByPrimaryKey(SubmissionFormPk pk) throws SubmissionFormDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'id = :id'.
	 */
	public SubmissionForm findByPrimaryKey(int id) throws SubmissionFormDaoException
	{
		SubmissionForm ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria ''.
	 */
	public SubmissionForm[] findAll() throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'id = :id'.
	 */
	public SubmissionForm[] findWhereIdEquals(int id) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'auto_sign = :autoSign'.
	 */
	public SubmissionForm[] findWhereAutoSignEquals(String autoSign) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE auto_sign = ? ORDER BY auto_sign", new Object[] { autoSign } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'organization = :organization'.
	 */
	public SubmissionForm[] findWhereOrganizationEquals(String organization) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE organization = ? ORDER BY organization", new Object[] { organization } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'contact_name = :contactName'.
	 */
	public SubmissionForm[] findWhereContactNameEquals(String contactName) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_name = ? ORDER BY contact_name", new Object[] { contactName } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'contact_title = :contactTitle'.
	 */
	public SubmissionForm[] findWhereContactTitleEquals(String contactTitle) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_title = ? ORDER BY contact_title", new Object[] { contactTitle } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'email_adress = :emailAdress'.
	 */
	public SubmissionForm[] findWhereEmailAdressEquals(String emailAdress) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email_adress = ? ORDER BY email_adress", new Object[] { emailAdress } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'phone_number = :phoneNumber'.
	 */
	public SubmissionForm[] findWherePhoneNumberEquals(String phoneNumber) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE phone_number = ? ORDER BY phone_number", new Object[] { phoneNumber } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'date_created = :dateCreated'.
	 */
	public SubmissionForm[] findWhereDateCreatedEquals(Date dateCreated) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the submission_form table that match the criteria 'date_modifed = :dateModifed'.
	 */
	public SubmissionForm[] findWhereDateModifedEquals(Date dateModifed) throws SubmissionFormDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modifed = ? ORDER BY date_modifed", new Object[] { dateModifed==null ? null : new java.sql.Timestamp( dateModifed.getTime() ) } );
	}

	/**
	 * Method 'SubmissionFormDaoImpl'
	 * 
	 */
	public SubmissionFormDaoImpl()
	{
	}

	/**
	 * Method 'SubmissionFormDaoImpl'
	 * 
	 * @param userConn
	 */
	public SubmissionFormDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "supplierdb.submission_form";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SubmissionForm fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SubmissionForm dto = new SubmissionForm();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SubmissionForm[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SubmissionForm dto = new SubmissionForm();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SubmissionForm ret[] = new SubmissionForm[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SubmissionForm dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setAutoSign( rs.getString( COLUMN_AUTO_SIGN ) );
		dto.setOrganization( rs.getString( COLUMN_ORGANIZATION ) );
		dto.setContactName( rs.getString( COLUMN_CONTACT_NAME ) );
		dto.setContactTitle( rs.getString( COLUMN_CONTACT_TITLE ) );
		dto.setEmailAdress( rs.getString( COLUMN_EMAIL_ADRESS ) );
		dto.setPhoneNumber( rs.getString( COLUMN_PHONE_NUMBER ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModifed( rs.getTimestamp(COLUMN_DATE_MODIFED ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SubmissionForm dto)
	{
		dto.setIdModified( false );
		dto.setAutoSignModified( false );
		dto.setOrganizationModified( false );
		dto.setContactNameModified( false );
		dto.setContactTitleModified( false );
		dto.setEmailAdressModified( false );
		dto.setPhoneNumberModified( false );
		dto.setDateCreatedModified( false );
		dto.setDateModifedModified( false );
	}

	/** 
	 * Returns all rows from the submission_form table that match the specified arbitrary SQL statement
	 */
	public SubmissionForm[] findByDynamicSelect(String sql, Object[] sqlParams) throws SubmissionFormDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SubmissionFormDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the submission_form table that match the specified arbitrary SQL statement
	 */
	public SubmissionForm[] findByDynamicWhere(String sql, Object[] sqlParams) throws SubmissionFormDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SubmissionFormDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
