/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hp.supplier.jdbc;

import com.hp.supplier.dao.*;
import com.hp.supplier.factory.*;
import com.hp.supplier.dto.*;
import com.hp.supplier.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SupplierDetailsDaoImpl extends AbstractDAO implements SupplierDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, name, contactno, address, remarks, contact_person FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, name, contactno, address, remarks, contact_person ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, name = ?, contactno = ?, address = ?, remarks = ?, contact_person = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column name
	 */
	protected static final int COLUMN_NAME = 2;

	/** 
	 * Index of column contactno
	 */
	protected static final int COLUMN_CONTACTNO = 3;

	/** 
	 * Index of column address
	 */
	protected static final int COLUMN_ADDRESS = 4;

	/** 
	 * Index of column remarks
	 */
	protected static final int COLUMN_REMARKS = 5;

	/** 
	 * Index of column contact_person
	 */
	protected static final int COLUMN_CONTACT_PERSON = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the supplier_details table.
	 */
	public SupplierDetailsPk insert(SupplierDetails dto) throws SupplierDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactnoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contactno" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAddressModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "address" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRemarksModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "remarks" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContactPersonModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "contact_person" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isNameModified()) {
				stmt.setString( index++, dto.getName() );
			}
		
			if (dto.isContactnoModified()) {
				stmt.setString( index++, dto.getContactno() );
			}
		
			if (dto.isAddressModified()) {
				stmt.setString( index++, dto.getAddress() );
			}
		
			if (dto.isRemarksModified()) {
				stmt.setString( index++, dto.getRemarks() );
			}
		
			if (dto.isContactPersonModified()) {
				stmt.setString( index++, dto.getContactPerson() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SupplierDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the supplier_details table.
	 */
	public void update(SupplierDetailsPk pk, SupplierDetails dto) throws SupplierDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "name=?" );
				modified=true;
			}
		
			if (dto.isContactnoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contactno=?" );
				modified=true;
			}
		
			if (dto.isAddressModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "address=?" );
				modified=true;
			}
		
			if (dto.isRemarksModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "remarks=?" );
				modified=true;
			}
		
			if (dto.isContactPersonModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "contact_person=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isNameModified()) {
				stmt.setString( index++, dto.getName() );
			}
		
			if (dto.isContactnoModified()) {
				stmt.setString( index++, dto.getContactno() );
			}
		
			if (dto.isAddressModified()) {
				stmt.setString( index++, dto.getAddress() );
			}
		
			if (dto.isRemarksModified()) {
				stmt.setString( index++, dto.getRemarks() );
			}
		
			if (dto.isContactPersonModified()) {
				stmt.setString( index++, dto.getContactPerson() );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SupplierDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the supplier_details table.
	 */
	public void delete(SupplierDetailsPk pk) throws SupplierDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SupplierDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the supplier_details table that matches the specified primary-key value.
	 */
	public SupplierDetails findByPrimaryKey(SupplierDetailsPk pk) throws SupplierDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria 'id = :id'.
	 */
	public SupplierDetails findByPrimaryKey(int id) throws SupplierDetailsDaoException
	{
		SupplierDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria ''.
	 */
	public SupplierDetails[] findAll() throws SupplierDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria 'id = :id'.
	 */
	public SupplierDetails[] findWhereIdEquals(int id) throws SupplierDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria 'name = :name'.
	 */
	public SupplierDetails[] findWhereNameEquals(String name) throws SupplierDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name = ? ORDER BY name", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria 'contactno = :contactno'.
	 */
	public SupplierDetails[] findWhereContactnoEquals(String contactno) throws SupplierDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contactno = ? ORDER BY contactno", new Object[] { contactno } );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria 'address = :address'.
	 */
	public SupplierDetails[] findWhereAddressEquals(String address) throws SupplierDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE address = ? ORDER BY address", new Object[] { address } );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria 'remarks = :remarks'.
	 */
	public SupplierDetails[] findWhereRemarksEquals(String remarks) throws SupplierDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE remarks = ? ORDER BY remarks", new Object[] { remarks } );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the criteria 'contact_person = :contactPerson'.
	 */
	public SupplierDetails[] findWhereContactPersonEquals(String contactPerson) throws SupplierDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_person = ? ORDER BY contact_person", new Object[] { contactPerson } );
	}

	/**
	 * Method 'SupplierDetailsDaoImpl'
	 * 
	 */
	public SupplierDetailsDaoImpl()
	{
	}

	/**
	 * Method 'SupplierDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public SupplierDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "supplierdb.supplier_details";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SupplierDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SupplierDetails dto = new SupplierDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SupplierDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SupplierDetails dto = new SupplierDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SupplierDetails ret[] = new SupplierDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SupplierDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setContactno( rs.getString( COLUMN_CONTACTNO ) );
		dto.setAddress( rs.getString( COLUMN_ADDRESS ) );
		dto.setRemarks( rs.getString( COLUMN_REMARKS ) );
		dto.setContactPerson( rs.getString( COLUMN_CONTACT_PERSON ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SupplierDetails dto)
	{
		dto.setIdModified( false );
		dto.setNameModified( false );
		dto.setContactnoModified( false );
		dto.setAddressModified( false );
		dto.setRemarksModified( false );
		dto.setContactPersonModified( false );
	}

	/** 
	 * Returns all rows from the supplier_details table that match the specified arbitrary SQL statement
	 */
	public SupplierDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws SupplierDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SupplierDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the supplier_details table that match the specified arbitrary SQL statement
	 */
	public SupplierDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws SupplierDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SupplierDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
