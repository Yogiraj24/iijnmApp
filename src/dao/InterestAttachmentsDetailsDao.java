/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.edu.iijnm.dao;

import java.util.Date;
import com.edu.iijnm.dto.*;
import com.edu.iijnm.exceptions.*;

public interface InterestAttachmentsDetailsDao
{
	/** 
	 * Inserts a new row in the interest_attachments_details table.
	 */
	public InterestAttachmentsDetailsPk insert(InterestAttachmentsDetails dto) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Updates a single row in the interest_attachments_details table.
	 */
	public void update(InterestAttachmentsDetailsPk pk, InterestAttachmentsDetails dto) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Deletes a single row in the interest_attachments_details table.
	 */
	public void delete(InterestAttachmentsDetailsPk pk) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns the rows from the interest_attachments_details table that matches the specified primary-key value.
	 */
	public InterestAttachmentsDetails findByPrimaryKey(InterestAttachmentsDetailsPk pk) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'id = :id'.
	 */
	public InterestAttachmentsDetails findByPrimaryKey(int id) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria ''.
	 */
	public InterestAttachmentsDetails[] findAll() throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'student_id = :studentId'.
	 */
	public InterestAttachmentsDetails[] findByPersonalDetails(int studentId) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'id = :id'.
	 */
	public InterestAttachmentsDetails[] findWhereIdEquals(int id) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'student_id = :studentId'.
	 */
	public InterestAttachmentsDetails[] findWhereStudentIdEquals(int studentId) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'accomplishments = :accomplishments'.
	 */
	public InterestAttachmentsDetails[] findWhereAccomplishmentsEquals(String accomplishments) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'special_skills = :specialSkills'.
	 */
	public InterestAttachmentsDetails[] findWhereSpecialSkillsEquals(String specialSkills) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'hobbies = :hobbies'.
	 */
	public InterestAttachmentsDetails[] findWhereHobbiesEquals(String hobbies) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'other_interests = :otherInterests'.
	 */
	public InterestAttachmentsDetails[] findWhereOtherInterestsEquals(String otherInterests) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'upload_reference = :uploadReference'.
	 */
	public InterestAttachmentsDetails[] findWhereUploadReferenceEquals(byte[] uploadReference) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'academic_certificates = :academicCertificates'.
	 */
	public InterestAttachmentsDetails[] findWhereAcademicCertificatesEquals(byte[] academicCertificates) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'supporting_docs = :supportingDocs'.
	 */
	public InterestAttachmentsDetails[] findWhereSupportingDocsEquals(byte[] supportingDocs) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'upload_essay = :uploadEssay'.
	 */
	public InterestAttachmentsDetails[] findWhereUploadEssayEquals(byte[] uploadEssay) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'how_iijnm = :howIijnm'.
	 */
	public InterestAttachmentsDetails[] findWhereHowIijnmEquals(String howIijnm) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'created_date = :createdDate'.
	 */
	public InterestAttachmentsDetails[] findWhereCreatedDateEquals(Date createdDate) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the criteria 'modified_date = :modifiedDate'.
	 */
	public InterestAttachmentsDetails[] findWhereModifiedDateEquals(Date modifiedDate) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the interest_attachments_details table that match the specified arbitrary SQL statement
	 */
	public InterestAttachmentsDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws InterestAttachmentsDetailsDaoException;

	/** 
	 * Returns all rows from the interest_attachments_details table that match the specified arbitrary SQL statement
	 */
	public InterestAttachmentsDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws InterestAttachmentsDetailsDaoException;

}
