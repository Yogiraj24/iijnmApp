/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.edu.iijnm.dao;

import java.util.Date;
import com.edu.iijnm.dto.*;
import com.edu.iijnm.exceptions.*;

public interface LoginDetailsDao
{
	/** 
	 * Inserts a new row in the login_details table.
	 */
	public LoginDetailsPk insert(LoginDetails dto) throws LoginDetailsDaoException;

	/** 
	 * Updates a single row in the login_details table.
	 */
	public void update(LoginDetailsPk pk, LoginDetails dto) throws LoginDetailsDaoException;

	/** 
	 * Deletes a single row in the login_details table.
	 */
	public void delete(LoginDetailsPk pk) throws LoginDetailsDaoException;

	/** 
	 * Returns the rows from the login_details table that matches the specified primary-key value.
	 */
	public LoginDetails findByPrimaryKey(LoginDetailsPk pk) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'id = :id'.
	 */
	public LoginDetails findByPrimaryKey(int id) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria ''.
	 */
	public LoginDetails[] findAll() throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'login_id = :loginId'.
	 */
	public LoginDetails[] findByPersonalDetails(int loginId) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'id = :id'.
	 */
	public LoginDetails[] findWhereIdEquals(int id) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'login_id = :loginId'.
	 */
	public LoginDetails[] findWhereLoginIdEquals(int loginId) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'username = :username'.
	 */
	public LoginDetails[] findWhereUsernameEquals(String username) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'password = :password'.
	 */
	public LoginDetails[] findWherePasswordEquals(String password) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'created_date = :createdDate'.
	 */
	public LoginDetails[] findWhereCreatedDateEquals(Date createdDate) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the criteria 'modified_date = :modifiedDate'.
	 */
	public LoginDetails[] findWhereModifiedDateEquals(Date modifiedDate) throws LoginDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the login_details table that match the specified arbitrary SQL statement
	 */
	public LoginDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws LoginDetailsDaoException;

	/** 
	 * Returns all rows from the login_details table that match the specified arbitrary SQL statement
	 */
	public LoginDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws LoginDetailsDaoException;

}
