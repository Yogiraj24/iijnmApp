/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.edu.iijnm.dao;

import java.util.Date;
import com.edu.iijnm.dto.*;
import com.edu.iijnm.exceptions.*;

public interface PersonalDetailsDao
{
	/** 
	 * Inserts a new row in the personal_details table.
	 */
	public PersonalDetailsPk insert(PersonalDetails dto) throws PersonalDetailsDaoException;

	/** 
	 * Updates a single row in the personal_details table.
	 */
	public void update(PersonalDetailsPk pk, PersonalDetails dto) throws PersonalDetailsDaoException;

	/** 
	 * Deletes a single row in the personal_details table.
	 */
	public void delete(PersonalDetailsPk pk) throws PersonalDetailsDaoException;

	/** 
	 * Returns the rows from the personal_details table that matches the specified primary-key value.
	 */
	public PersonalDetails findByPrimaryKey(PersonalDetailsPk pk) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'id = :id'.
	 */
	public PersonalDetails findByPrimaryKey(int id) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria ''.
	 */
	public PersonalDetails[] findAll() throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'id = :id'.
	 */
	public PersonalDetails[] findWhereIdEquals(int id) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'full_name = :fullName'.
	 */
	public PersonalDetails[] findWhereFullNameEquals(String fullName) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'email_id = :emailId'.
	 */
	public PersonalDetails[] findWhereEmailIdEquals(String emailId) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mobile_number = :mobileNumber'.
	 */
	public PersonalDetails[] findWhereMobileNumberEquals(String mobileNumber) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'dob = :dob'.
	 */
	public PersonalDetails[] findWhereDobEquals(String dob) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'nationality = :nationality'.
	 */
	public PersonalDetails[] findWhereNationalityEquals(String nationality) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'gender = :gender'.
	 */
	public PersonalDetails[] findWhereGenderEquals(String gender) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'city = :city'.
	 */
	public PersonalDetails[] findWhereCityEquals(String city) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'state = :state'.
	 */
	public PersonalDetails[] findWhereStateEquals(String state) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'country = :country'.
	 */
	public PersonalDetails[] findWhereCountryEquals(String country) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'pincode = :pincode'.
	 */
	public PersonalDetails[] findWherePincodeEquals(String pincode) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'applied_programme = :appliedProgramme'.
	 */
	public PersonalDetails[] findWhereAppliedProgrammeEquals(String appliedProgramme) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'first_choice = :firstChoice'.
	 */
	public PersonalDetails[] findWhereFirstChoiceEquals(String firstChoice) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'second_choice = :secondChoice'.
	 */
	public PersonalDetails[] findWhereSecondChoiceEquals(String secondChoice) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'third_choice = :thirdChoice'.
	 */
	public PersonalDetails[] findWhereThirdChoiceEquals(String thirdChoice) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'father_name = :fatherName'.
	 */
	public PersonalDetails[] findWhereFatherNameEquals(String fatherName) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'father_phone = :fatherPhone'.
	 */
	public PersonalDetails[] findWhereFatherPhoneEquals(String fatherPhone) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'father_email = :fatherEmail'.
	 */
	public PersonalDetails[] findWhereFatherEmailEquals(String fatherEmail) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mother_name = :motherName'.
	 */
	public PersonalDetails[] findWhereMotherNameEquals(String motherName) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mother_phone = :motherPhone'.
	 */
	public PersonalDetails[] findWhereMotherPhoneEquals(String motherPhone) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mother_email = :motherEmail'.
	 */
	public PersonalDetails[] findWhereMotherEmailEquals(String motherEmail) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'current_address = :currentAddress'.
	 */
	public PersonalDetails[] findWhereCurrentAddressEquals(String currentAddress) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'pin_code = :pinCode'.
	 */
	public PersonalDetails[] findWherePinCodeEquals(String pinCode) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'landline_phone = :landlinePhone'.
	 */
	public PersonalDetails[] findWhereLandlinePhoneEquals(String landlinePhone) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'guardian_address = :guardianAddress'.
	 */
	public PersonalDetails[] findWhereGuardianAddressEquals(String guardianAddress) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'guardian_phone = :guardianPhone'.
	 */
	public PersonalDetails[] findWhereGuardianPhoneEquals(String guardianPhone) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'guardian_email = :guardianEmail'.
	 */
	public PersonalDetails[] findWhereGuardianEmailEquals(String guardianEmail) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'created_by = :createdBy'.
	 */
	public PersonalDetails[] findWhereCreatedByEquals(String createdBy) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'modified_by = :modifiedBy'.
	 */
	public PersonalDetails[] findWhereModifiedByEquals(String modifiedBy) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'created_date = :createdDate'.
	 */
	public PersonalDetails[] findWhereCreatedDateEquals(Date createdDate) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'modified_date = :modifiedDate'.
	 */
	public PersonalDetails[] findWhereModifiedDateEquals(Date modifiedDate) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'remark = :remark'.
	 */
	public PersonalDetails[] findWhereRemarkEquals(String remark) throws PersonalDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the personal_details table that match the specified arbitrary SQL statement
	 */
	public PersonalDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws PersonalDetailsDaoException;

	/** 
	 * Returns all rows from the personal_details table that match the specified arbitrary SQL statement
	 */
	public PersonalDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws PersonalDetailsDaoException;

}
