/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.edu.iijnm.dao;

import java.util.Date;
import com.edu.iijnm.dto.*;
import com.edu.iijnm.exceptions.*;

public interface WorkExperienceDao
{
	/** 
	 * Inserts a new row in the work_experience table.
	 */
	public WorkExperiencePk insert(WorkExperience dto) throws WorkExperienceDaoException;

	/** 
	 * Updates a single row in the work_experience table.
	 */
	public void update(WorkExperiencePk pk, WorkExperience dto) throws WorkExperienceDaoException;

	/** 
	 * Deletes a single row in the work_experience table.
	 */
	public void delete(WorkExperiencePk pk) throws WorkExperienceDaoException;

	/** 
	 * Returns the rows from the work_experience table that matches the specified primary-key value.
	 */
	public WorkExperience findByPrimaryKey(WorkExperiencePk pk) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'id = :id'.
	 */
	public WorkExperience findByPrimaryKey(int id) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria ''.
	 */
	public WorkExperience[] findAll() throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'student_id = :studentId'.
	 */
	public WorkExperience[] findByPersonalDetails(int studentId) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'id = :id'.
	 */
	public WorkExperience[] findWhereIdEquals(int id) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'student_id = :studentId'.
	 */
	public WorkExperience[] findWhereStudentIdEquals(int studentId) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'location_address = :locationAddress'.
	 */
	public WorkExperience[] findWhereLocationAddressEquals(String locationAddress) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'org_name = :orgName'.
	 */
	public WorkExperience[] findWhereOrgNameEquals(String orgName) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'job_nature = :jobNature'.
	 */
	public WorkExperience[] findWhereJobNatureEquals(String jobNature) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'org_designation = :orgDesignation'.
	 */
	public WorkExperience[] findWhereOrgDesignationEquals(String orgDesignation) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'org_phone = :orgPhone'.
	 */
	public WorkExperience[] findWhereOrgPhoneEquals(String orgPhone) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'created_date = :createdDate'.
	 */
	public WorkExperience[] findWhereCreatedDateEquals(Date createdDate) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the criteria 'modified_date = :modifiedDate'.
	 */
	public WorkExperience[] findWhereModifiedDateEquals(Date modifiedDate) throws WorkExperienceDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the work_experience table that match the specified arbitrary SQL statement
	 */
	public WorkExperience[] findByDynamicSelect(String sql, Object[] sqlParams) throws WorkExperienceDaoException;

	/** 
	 * Returns all rows from the work_experience table that match the specified arbitrary SQL statement
	 */
	public WorkExperience[] findByDynamicWhere(String sql, Object[] sqlParams) throws WorkExperienceDaoException;

}
