/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.edu.iijnm.jdbc;

import com.edu.iijnm.dao.*;
import com.edu.iijnm.factory.*;
import java.util.Date;
import com.edu.iijnm.dto.*;
import com.edu.iijnm.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EducationDetailsDaoImpl extends AbstractDAO implements EducationDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, student_id, school_name, leaving_certiticate, school_passing, schoole_grade, college_name, college_degree, college_year, degree_subjects, college_grade, master_college_name, master_degree, master_passing, master_subjects, master_grade, other_qualification, computer_literate, computer_applications, language_1, language_2, language_3, created_date, modified_date FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, student_id, school_name, leaving_certiticate, school_passing, schoole_grade, college_name, college_degree, college_year, degree_subjects, college_grade, master_college_name, master_degree, master_passing, master_subjects, master_grade, other_qualification, computer_literate, computer_applications, language_1, language_2, language_3, created_date, modified_date ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, student_id = ?, school_name = ?, leaving_certiticate = ?, school_passing = ?, schoole_grade = ?, college_name = ?, college_degree = ?, college_year = ?, degree_subjects = ?, college_grade = ?, master_college_name = ?, master_degree = ?, master_passing = ?, master_subjects = ?, master_grade = ?, other_qualification = ?, computer_literate = ?, computer_applications = ?, language_1 = ?, language_2 = ?, language_3 = ?, created_date = ?, modified_date = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column student_id
	 */
	protected static final int COLUMN_STUDENT_ID = 2;

	/** 
	 * Index of column school_name
	 */
	protected static final int COLUMN_SCHOOL_NAME = 3;

	/** 
	 * Index of column leaving_certiticate
	 */
	protected static final int COLUMN_LEAVING_CERTITICATE = 4;

	/** 
	 * Index of column school_passing
	 */
	protected static final int COLUMN_SCHOOL_PASSING = 5;

	/** 
	 * Index of column schoole_grade
	 */
	protected static final int COLUMN_SCHOOLE_GRADE = 6;

	/** 
	 * Index of column college_name
	 */
	protected static final int COLUMN_COLLEGE_NAME = 7;

	/** 
	 * Index of column college_degree
	 */
	protected static final int COLUMN_COLLEGE_DEGREE = 8;

	/** 
	 * Index of column college_year
	 */
	protected static final int COLUMN_COLLEGE_YEAR = 9;

	/** 
	 * Index of column degree_subjects
	 */
	protected static final int COLUMN_DEGREE_SUBJECTS = 10;

	/** 
	 * Index of column college_grade
	 */
	protected static final int COLUMN_COLLEGE_GRADE = 11;

	/** 
	 * Index of column master_college_name
	 */
	protected static final int COLUMN_MASTER_COLLEGE_NAME = 12;

	/** 
	 * Index of column master_degree
	 */
	protected static final int COLUMN_MASTER_DEGREE = 13;

	/** 
	 * Index of column master_passing
	 */
	protected static final int COLUMN_MASTER_PASSING = 14;

	/** 
	 * Index of column master_subjects
	 */
	protected static final int COLUMN_MASTER_SUBJECTS = 15;

	/** 
	 * Index of column master_grade
	 */
	protected static final int COLUMN_MASTER_GRADE = 16;

	/** 
	 * Index of column other_qualification
	 */
	protected static final int COLUMN_OTHER_QUALIFICATION = 17;

	/** 
	 * Index of column computer_literate
	 */
	protected static final int COLUMN_COMPUTER_LITERATE = 18;

	/** 
	 * Index of column computer_applications
	 */
	protected static final int COLUMN_COMPUTER_APPLICATIONS = 19;

	/** 
	 * Index of column language_1
	 */
	protected static final int COLUMN_LANGUAGE1 = 20;

	/** 
	 * Index of column language_2
	 */
	protected static final int COLUMN_LANGUAGE2 = 21;

	/** 
	 * Index of column language_3
	 */
	protected static final int COLUMN_LANGUAGE3 = 22;

	/** 
	 * Index of column created_date
	 */
	protected static final int COLUMN_CREATED_DATE = 23;

	/** 
	 * Index of column modified_date
	 */
	protected static final int COLUMN_MODIFIED_DATE = 24;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the education_details table.
	 */
	public EducationDetailsPk insert(EducationDetails dto) throws EducationDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isStudentIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "student_id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSchoolNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "school_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLeavingCertiticateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "leaving_certiticate" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSchoolPassingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "school_passing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSchooleGradeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "schoole_grade" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCollegeNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "college_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCollegeDegreeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "college_degree" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCollegeYearModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "college_year" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDegreeSubjectsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "degree_subjects" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCollegeGradeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "college_grade" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMasterCollegeNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "master_college_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMasterDegreeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "master_degree" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMasterPassingModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "master_passing" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMasterSubjectsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "master_subjects" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMasterGradeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "master_grade" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isOtherQualificationModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "other_qualification" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComputerLiterateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "computer_literate" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isComputerApplicationsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "computer_applications" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLanguage1Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "language_1" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLanguage2Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "language_2" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLanguage3Modified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "language_3" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreatedDateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "created_date" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isModifiedDateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "modified_date" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isStudentIdModified()) {
				if (dto.isStudentIdNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getStudentId() );
				}
		
			}
		
			if (dto.isSchoolNameModified()) {
				stmt.setString( index++, dto.getSchoolName() );
			}
		
			if (dto.isLeavingCertiticateModified()) {
				stmt.setString( index++, dto.getLeavingCertiticate() );
			}
		
			if (dto.isSchoolPassingModified()) {
				stmt.setString( index++, dto.getSchoolPassing() );
			}
		
			if (dto.isSchooleGradeModified()) {
				stmt.setString( index++, dto.getSchooleGrade() );
			}
		
			if (dto.isCollegeNameModified()) {
				stmt.setString( index++, dto.getCollegeName() );
			}
		
			if (dto.isCollegeDegreeModified()) {
				stmt.setString( index++, dto.getCollegeDegree() );
			}
		
			if (dto.isCollegeYearModified()) {
				stmt.setString( index++, dto.getCollegeYear() );
			}
		
			if (dto.isDegreeSubjectsModified()) {
				stmt.setString( index++, dto.getDegreeSubjects() );
			}
		
			if (dto.isCollegeGradeModified()) {
				stmt.setString( index++, dto.getCollegeGrade() );
			}
		
			if (dto.isMasterCollegeNameModified()) {
				stmt.setString( index++, dto.getMasterCollegeName() );
			}
		
			if (dto.isMasterDegreeModified()) {
				stmt.setString( index++, dto.getMasterDegree() );
			}
		
			if (dto.isMasterPassingModified()) {
				stmt.setString( index++, dto.getMasterPassing() );
			}
		
			if (dto.isMasterSubjectsModified()) {
				stmt.setString( index++, dto.getMasterSubjects() );
			}
		
			if (dto.isMasterGradeModified()) {
				stmt.setString( index++, dto.getMasterGrade() );
			}
		
			if (dto.isOtherQualificationModified()) {
				stmt.setString( index++, dto.getOtherQualification() );
			}
		
			if (dto.isComputerLiterateModified()) {
				stmt.setString( index++, dto.getComputerLiterate() );
			}
		
			if (dto.isComputerApplicationsModified()) {
				stmt.setString( index++, dto.getComputerApplications() );
			}
		
			if (dto.isLanguage1Modified()) {
				stmt.setString( index++, dto.getLanguage1() );
			}
		
			if (dto.isLanguage2Modified()) {
				stmt.setString( index++, dto.getLanguage2() );
			}
		
			if (dto.isLanguage3Modified()) {
				stmt.setString( index++, dto.getLanguage3() );
			}
		
			if (dto.isCreatedDateModified()) {
				stmt.setTimestamp(index++, dto.getCreatedDate()==null ? null : new java.sql.Timestamp( dto.getCreatedDate().getTime() ) );
			}
		
			if (dto.isModifiedDateModified()) {
				stmt.setTimestamp(index++, dto.getModifiedDate()==null ? null : new java.sql.Timestamp( dto.getModifiedDate().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EducationDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the education_details table.
	 */
	public void update(EducationDetailsPk pk, EducationDetails dto) throws EducationDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isStudentIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "student_id=?" );
				modified=true;
			}
		
			if (dto.isSchoolNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "school_name=?" );
				modified=true;
			}
		
			if (dto.isLeavingCertiticateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "leaving_certiticate=?" );
				modified=true;
			}
		
			if (dto.isSchoolPassingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "school_passing=?" );
				modified=true;
			}
		
			if (dto.isSchooleGradeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "schoole_grade=?" );
				modified=true;
			}
		
			if (dto.isCollegeNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "college_name=?" );
				modified=true;
			}
		
			if (dto.isCollegeDegreeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "college_degree=?" );
				modified=true;
			}
		
			if (dto.isCollegeYearModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "college_year=?" );
				modified=true;
			}
		
			if (dto.isDegreeSubjectsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "degree_subjects=?" );
				modified=true;
			}
		
			if (dto.isCollegeGradeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "college_grade=?" );
				modified=true;
			}
		
			if (dto.isMasterCollegeNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "master_college_name=?" );
				modified=true;
			}
		
			if (dto.isMasterDegreeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "master_degree=?" );
				modified=true;
			}
		
			if (dto.isMasterPassingModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "master_passing=?" );
				modified=true;
			}
		
			if (dto.isMasterSubjectsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "master_subjects=?" );
				modified=true;
			}
		
			if (dto.isMasterGradeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "master_grade=?" );
				modified=true;
			}
		
			if (dto.isOtherQualificationModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "other_qualification=?" );
				modified=true;
			}
		
			if (dto.isComputerLiterateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "computer_literate=?" );
				modified=true;
			}
		
			if (dto.isComputerApplicationsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "computer_applications=?" );
				modified=true;
			}
		
			if (dto.isLanguage1Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "language_1=?" );
				modified=true;
			}
		
			if (dto.isLanguage2Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "language_2=?" );
				modified=true;
			}
		
			if (dto.isLanguage3Modified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "language_3=?" );
				modified=true;
			}
		
			if (dto.isCreatedDateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "created_date=?" );
				modified=true;
			}
		
			if (dto.isModifiedDateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "modified_date=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isStudentIdModified()) {
				if (dto.isStudentIdNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getStudentId() );
				}
		
			}
		
			if (dto.isSchoolNameModified()) {
				stmt.setString( index++, dto.getSchoolName() );
			}
		
			if (dto.isLeavingCertiticateModified()) {
				stmt.setString( index++, dto.getLeavingCertiticate() );
			}
		
			if (dto.isSchoolPassingModified()) {
				stmt.setString( index++, dto.getSchoolPassing() );
			}
		
			if (dto.isSchooleGradeModified()) {
				stmt.setString( index++, dto.getSchooleGrade() );
			}
		
			if (dto.isCollegeNameModified()) {
				stmt.setString( index++, dto.getCollegeName() );
			}
		
			if (dto.isCollegeDegreeModified()) {
				stmt.setString( index++, dto.getCollegeDegree() );
			}
		
			if (dto.isCollegeYearModified()) {
				stmt.setString( index++, dto.getCollegeYear() );
			}
		
			if (dto.isDegreeSubjectsModified()) {
				stmt.setString( index++, dto.getDegreeSubjects() );
			}
		
			if (dto.isCollegeGradeModified()) {
				stmt.setString( index++, dto.getCollegeGrade() );
			}
		
			if (dto.isMasterCollegeNameModified()) {
				stmt.setString( index++, dto.getMasterCollegeName() );
			}
		
			if (dto.isMasterDegreeModified()) {
				stmt.setString( index++, dto.getMasterDegree() );
			}
		
			if (dto.isMasterPassingModified()) {
				stmt.setString( index++, dto.getMasterPassing() );
			}
		
			if (dto.isMasterSubjectsModified()) {
				stmt.setString( index++, dto.getMasterSubjects() );
			}
		
			if (dto.isMasterGradeModified()) {
				stmt.setString( index++, dto.getMasterGrade() );
			}
		
			if (dto.isOtherQualificationModified()) {
				stmt.setString( index++, dto.getOtherQualification() );
			}
		
			if (dto.isComputerLiterateModified()) {
				stmt.setString( index++, dto.getComputerLiterate() );
			}
		
			if (dto.isComputerApplicationsModified()) {
				stmt.setString( index++, dto.getComputerApplications() );
			}
		
			if (dto.isLanguage1Modified()) {
				stmt.setString( index++, dto.getLanguage1() );
			}
		
			if (dto.isLanguage2Modified()) {
				stmt.setString( index++, dto.getLanguage2() );
			}
		
			if (dto.isLanguage3Modified()) {
				stmt.setString( index++, dto.getLanguage3() );
			}
		
			if (dto.isCreatedDateModified()) {
				stmt.setTimestamp(index++, dto.getCreatedDate()==null ? null : new java.sql.Timestamp( dto.getCreatedDate().getTime() ) );
			}
		
			if (dto.isModifiedDateModified()) {
				stmt.setTimestamp(index++, dto.getModifiedDate()==null ? null : new java.sql.Timestamp( dto.getModifiedDate().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EducationDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the education_details table.
	 */
	public void delete(EducationDetailsPk pk) throws EducationDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EducationDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the education_details table that matches the specified primary-key value.
	 */
	public EducationDetails findByPrimaryKey(EducationDetailsPk pk) throws EducationDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'id = :id'.
	 */
	public EducationDetails findByPrimaryKey(int id) throws EducationDetailsDaoException
	{
		EducationDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria ''.
	 */
	public EducationDetails[] findAll() throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'student_id = :studentId'.
	 */
	public EducationDetails[] findByPersonalDetails(int studentId) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE student_id = ?", new Object[] {  new Integer(studentId) } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'id = :id'.
	 */
	public EducationDetails[] findWhereIdEquals(int id) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'student_id = :studentId'.
	 */
	public EducationDetails[] findWhereStudentIdEquals(int studentId) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE student_id = ? ORDER BY student_id", new Object[] {  new Integer(studentId) } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'school_name = :schoolName'.
	 */
	public EducationDetails[] findWhereSchoolNameEquals(String schoolName) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE school_name = ? ORDER BY school_name", new Object[] { schoolName } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'leaving_certiticate = :leavingCertiticate'.
	 */
	public EducationDetails[] findWhereLeavingCertiticateEquals(String leavingCertiticate) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE leaving_certiticate = ? ORDER BY leaving_certiticate", new Object[] { leavingCertiticate } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'school_passing = :schoolPassing'.
	 */
	public EducationDetails[] findWhereSchoolPassingEquals(String schoolPassing) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE school_passing = ? ORDER BY school_passing", new Object[] { schoolPassing } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'schoole_grade = :schooleGrade'.
	 */
	public EducationDetails[] findWhereSchooleGradeEquals(String schooleGrade) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE schoole_grade = ? ORDER BY schoole_grade", new Object[] { schooleGrade } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'college_name = :collegeName'.
	 */
	public EducationDetails[] findWhereCollegeNameEquals(String collegeName) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE college_name = ? ORDER BY college_name", new Object[] { collegeName } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'college_degree = :collegeDegree'.
	 */
	public EducationDetails[] findWhereCollegeDegreeEquals(String collegeDegree) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE college_degree = ? ORDER BY college_degree", new Object[] { collegeDegree } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'college_year = :collegeYear'.
	 */
	public EducationDetails[] findWhereCollegeYearEquals(String collegeYear) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE college_year = ? ORDER BY college_year", new Object[] { collegeYear } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'degree_subjects = :degreeSubjects'.
	 */
	public EducationDetails[] findWhereDegreeSubjectsEquals(String degreeSubjects) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE degree_subjects = ? ORDER BY degree_subjects", new Object[] { degreeSubjects } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'college_grade = :collegeGrade'.
	 */
	public EducationDetails[] findWhereCollegeGradeEquals(String collegeGrade) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE college_grade = ? ORDER BY college_grade", new Object[] { collegeGrade } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'master_college_name = :masterCollegeName'.
	 */
	public EducationDetails[] findWhereMasterCollegeNameEquals(String masterCollegeName) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE master_college_name = ? ORDER BY master_college_name", new Object[] { masterCollegeName } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'master_degree = :masterDegree'.
	 */
	public EducationDetails[] findWhereMasterDegreeEquals(String masterDegree) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE master_degree = ? ORDER BY master_degree", new Object[] { masterDegree } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'master_passing = :masterPassing'.
	 */
	public EducationDetails[] findWhereMasterPassingEquals(String masterPassing) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE master_passing = ? ORDER BY master_passing", new Object[] { masterPassing } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'master_subjects = :masterSubjects'.
	 */
	public EducationDetails[] findWhereMasterSubjectsEquals(String masterSubjects) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE master_subjects = ? ORDER BY master_subjects", new Object[] { masterSubjects } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'master_grade = :masterGrade'.
	 */
	public EducationDetails[] findWhereMasterGradeEquals(String masterGrade) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE master_grade = ? ORDER BY master_grade", new Object[] { masterGrade } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'other_qualification = :otherQualification'.
	 */
	public EducationDetails[] findWhereOtherQualificationEquals(String otherQualification) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE other_qualification = ? ORDER BY other_qualification", new Object[] { otherQualification } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'computer_literate = :computerLiterate'.
	 */
	public EducationDetails[] findWhereComputerLiterateEquals(String computerLiterate) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE computer_literate = ? ORDER BY computer_literate", new Object[] { computerLiterate } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'computer_applications = :computerApplications'.
	 */
	public EducationDetails[] findWhereComputerApplicationsEquals(String computerApplications) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE computer_applications = ? ORDER BY computer_applications", new Object[] { computerApplications } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'language_1 = :language1'.
	 */
	public EducationDetails[] findWhereLanguage1Equals(String language1) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE language_1 = ? ORDER BY language_1", new Object[] { language1 } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'language_2 = :language2'.
	 */
	public EducationDetails[] findWhereLanguage2Equals(String language2) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE language_2 = ? ORDER BY language_2", new Object[] { language2 } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'language_3 = :language3'.
	 */
	public EducationDetails[] findWhereLanguage3Equals(String language3) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE language_3 = ? ORDER BY language_3", new Object[] { language3 } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'created_date = :createdDate'.
	 */
	public EducationDetails[] findWhereCreatedDateEquals(Date createdDate) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE created_date = ? ORDER BY created_date", new Object[] { createdDate==null ? null : new java.sql.Timestamp( createdDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the education_details table that match the criteria 'modified_date = :modifiedDate'.
	 */
	public EducationDetails[] findWhereModifiedDateEquals(Date modifiedDate) throws EducationDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE modified_date = ? ORDER BY modified_date", new Object[] { modifiedDate==null ? null : new java.sql.Timestamp( modifiedDate.getTime() ) } );
	}

	/**
	 * Method 'EducationDetailsDaoImpl'
	 * 
	 */
	public EducationDetailsDaoImpl()
	{
	}

	/**
	 * Method 'EducationDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public EducationDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "iijnmdb.education_details";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EducationDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EducationDetails dto = new EducationDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EducationDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EducationDetails dto = new EducationDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EducationDetails ret[] = new EducationDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EducationDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setStudentId( rs.getInt( COLUMN_STUDENT_ID ) );
		if (rs.wasNull()) {
			dto.setStudentIdNull( true );
		}
		
		dto.setSchoolName( rs.getString( COLUMN_SCHOOL_NAME ) );
		dto.setLeavingCertiticate( rs.getString( COLUMN_LEAVING_CERTITICATE ) );
		dto.setSchoolPassing( rs.getString( COLUMN_SCHOOL_PASSING ) );
		dto.setSchooleGrade( rs.getString( COLUMN_SCHOOLE_GRADE ) );
		dto.setCollegeName( rs.getString( COLUMN_COLLEGE_NAME ) );
		dto.setCollegeDegree( rs.getString( COLUMN_COLLEGE_DEGREE ) );
		dto.setCollegeYear( rs.getString( COLUMN_COLLEGE_YEAR ) );
		dto.setDegreeSubjects( rs.getString( COLUMN_DEGREE_SUBJECTS ) );
		dto.setCollegeGrade( rs.getString( COLUMN_COLLEGE_GRADE ) );
		dto.setMasterCollegeName( rs.getString( COLUMN_MASTER_COLLEGE_NAME ) );
		dto.setMasterDegree( rs.getString( COLUMN_MASTER_DEGREE ) );
		dto.setMasterPassing( rs.getString( COLUMN_MASTER_PASSING ) );
		dto.setMasterSubjects( rs.getString( COLUMN_MASTER_SUBJECTS ) );
		dto.setMasterGrade( rs.getString( COLUMN_MASTER_GRADE ) );
		dto.setOtherQualification( rs.getString( COLUMN_OTHER_QUALIFICATION ) );
		dto.setComputerLiterate( rs.getString( COLUMN_COMPUTER_LITERATE ) );
		dto.setComputerApplications( rs.getString( COLUMN_COMPUTER_APPLICATIONS ) );
		dto.setLanguage1( rs.getString( COLUMN_LANGUAGE1 ) );
		dto.setLanguage2( rs.getString( COLUMN_LANGUAGE2 ) );
		dto.setLanguage3( rs.getString( COLUMN_LANGUAGE3 ) );
		dto.setCreatedDate( rs.getTimestamp(COLUMN_CREATED_DATE ) );
		dto.setModifiedDate( rs.getTimestamp(COLUMN_MODIFIED_DATE ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EducationDetails dto)
	{
		dto.setIdModified( false );
		dto.setStudentIdModified( false );
		dto.setSchoolNameModified( false );
		dto.setLeavingCertiticateModified( false );
		dto.setSchoolPassingModified( false );
		dto.setSchooleGradeModified( false );
		dto.setCollegeNameModified( false );
		dto.setCollegeDegreeModified( false );
		dto.setCollegeYearModified( false );
		dto.setDegreeSubjectsModified( false );
		dto.setCollegeGradeModified( false );
		dto.setMasterCollegeNameModified( false );
		dto.setMasterDegreeModified( false );
		dto.setMasterPassingModified( false );
		dto.setMasterSubjectsModified( false );
		dto.setMasterGradeModified( false );
		dto.setOtherQualificationModified( false );
		dto.setComputerLiterateModified( false );
		dto.setComputerApplicationsModified( false );
		dto.setLanguage1Modified( false );
		dto.setLanguage2Modified( false );
		dto.setLanguage3Modified( false );
		dto.setCreatedDateModified( false );
		dto.setModifiedDateModified( false );
	}

	/** 
	 * Returns all rows from the education_details table that match the specified arbitrary SQL statement
	 */
	public EducationDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws EducationDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EducationDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the education_details table that match the specified arbitrary SQL statement
	 */
	public EducationDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws EducationDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EducationDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
