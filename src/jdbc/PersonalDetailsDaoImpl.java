/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.edu.iijnm.jdbc;

import com.edu.iijnm.dao.*;
import com.edu.iijnm.factory.*;
import java.util.Date;
import com.edu.iijnm.dto.*;
import com.edu.iijnm.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PersonalDetailsDaoImpl extends AbstractDAO implements PersonalDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, full_name, email_id, mobile_number, dob, nationality, gender, city, state, country, pincode, applied_programme, first_choice, second_choice, third_choice, father_name, father_phone, father_email, mother_name, mother_phone, mother_email, current_address, pin_code, landline_phone, guardian_address, guardian_phone, guardian_email, created_by, modified_by, created_date, modified_date, remark FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, full_name, email_id, mobile_number, dob, nationality, gender, city, state, country, pincode, applied_programme, first_choice, second_choice, third_choice, father_name, father_phone, father_email, mother_name, mother_phone, mother_email, current_address, pin_code, landline_phone, guardian_address, guardian_phone, guardian_email, created_by, modified_by, created_date, modified_date, remark ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, full_name = ?, email_id = ?, mobile_number = ?, dob = ?, nationality = ?, gender = ?, city = ?, state = ?, country = ?, pincode = ?, applied_programme = ?, first_choice = ?, second_choice = ?, third_choice = ?, father_name = ?, father_phone = ?, father_email = ?, mother_name = ?, mother_phone = ?, mother_email = ?, current_address = ?, pin_code = ?, landline_phone = ?, guardian_address = ?, guardian_phone = ?, guardian_email = ?, created_by = ?, modified_by = ?, created_date = ?, modified_date = ?, remark = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column full_name
	 */
	protected static final int COLUMN_FULL_NAME = 2;

	/** 
	 * Index of column email_id
	 */
	protected static final int COLUMN_EMAIL_ID = 3;

	/** 
	 * Index of column mobile_number
	 */
	protected static final int COLUMN_MOBILE_NUMBER = 4;

	/** 
	 * Index of column dob
	 */
	protected static final int COLUMN_DOB = 5;

	/** 
	 * Index of column nationality
	 */
	protected static final int COLUMN_NATIONALITY = 6;

	/** 
	 * Index of column gender
	 */
	protected static final int COLUMN_GENDER = 7;

	/** 
	 * Index of column city
	 */
	protected static final int COLUMN_CITY = 8;

	/** 
	 * Index of column state
	 */
	protected static final int COLUMN_STATE = 9;

	/** 
	 * Index of column country
	 */
	protected static final int COLUMN_COUNTRY = 10;

	/** 
	 * Index of column pincode
	 */
	protected static final int COLUMN_PINCODE = 11;

	/** 
	 * Index of column applied_programme
	 */
	protected static final int COLUMN_APPLIED_PROGRAMME = 12;

	/** 
	 * Index of column first_choice
	 */
	protected static final int COLUMN_FIRST_CHOICE = 13;

	/** 
	 * Index of column second_choice
	 */
	protected static final int COLUMN_SECOND_CHOICE = 14;

	/** 
	 * Index of column third_choice
	 */
	protected static final int COLUMN_THIRD_CHOICE = 15;

	/** 
	 * Index of column father_name
	 */
	protected static final int COLUMN_FATHER_NAME = 16;

	/** 
	 * Index of column father_phone
	 */
	protected static final int COLUMN_FATHER_PHONE = 17;

	/** 
	 * Index of column father_email
	 */
	protected static final int COLUMN_FATHER_EMAIL = 18;

	/** 
	 * Index of column mother_name
	 */
	protected static final int COLUMN_MOTHER_NAME = 19;

	/** 
	 * Index of column mother_phone
	 */
	protected static final int COLUMN_MOTHER_PHONE = 20;

	/** 
	 * Index of column mother_email
	 */
	protected static final int COLUMN_MOTHER_EMAIL = 21;

	/** 
	 * Index of column current_address
	 */
	protected static final int COLUMN_CURRENT_ADDRESS = 22;

	/** 
	 * Index of column pin_code
	 */
	protected static final int COLUMN_PIN_CODE = 23;

	/** 
	 * Index of column landline_phone
	 */
	protected static final int COLUMN_LANDLINE_PHONE = 24;

	/** 
	 * Index of column guardian_address
	 */
	protected static final int COLUMN_GUARDIAN_ADDRESS = 25;

	/** 
	 * Index of column guardian_phone
	 */
	protected static final int COLUMN_GUARDIAN_PHONE = 26;

	/** 
	 * Index of column guardian_email
	 */
	protected static final int COLUMN_GUARDIAN_EMAIL = 27;

	/** 
	 * Index of column created_by
	 */
	protected static final int COLUMN_CREATED_BY = 28;

	/** 
	 * Index of column modified_by
	 */
	protected static final int COLUMN_MODIFIED_BY = 29;

	/** 
	 * Index of column created_date
	 */
	protected static final int COLUMN_CREATED_DATE = 30;

	/** 
	 * Index of column modified_date
	 */
	protected static final int COLUMN_MODIFIED_DATE = 31;

	/** 
	 * Index of column remark
	 */
	protected static final int COLUMN_REMARK = 32;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 32;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the personal_details table.
	 */
	public PersonalDetailsPk insert(PersonalDetails dto) throws PersonalDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFullNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "full_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEmailIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "email_id" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMobileNumberModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mobile_number" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDobModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "dob" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNationalityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nationality" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGenderModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "gender" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "city" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isStateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "state" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCountryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "country" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPincodeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "pincode" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAppliedProgrammeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "applied_programme" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFirstChoiceModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "first_choice" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSecondChoiceModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "second_choice" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isThirdChoiceModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "third_choice" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFatherNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "father_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFatherPhoneModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "father_phone" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFatherEmailModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "father_email" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMotherNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mother_name" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMotherPhoneModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mother_phone" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMotherEmailModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "mother_email" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCurrentAddressModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "current_address" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPinCodeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "pin_code" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isLandlinePhoneModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "landline_phone" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGuardianAddressModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "guardian_address" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGuardianPhoneModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "guardian_phone" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isGuardianEmailModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "guardian_email" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreatedByModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "created_by" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isModifiedByModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "modified_by" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCreatedDateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "created_date" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isModifiedDateModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "modified_date" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRemarkModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "remark" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isFullNameModified()) {
				stmt.setString( index++, dto.getFullName() );
			}
		
			if (dto.isEmailIdModified()) {
				stmt.setString( index++, dto.getEmailId() );
			}
		
			if (dto.isMobileNumberModified()) {
				stmt.setString( index++, dto.getMobileNumber() );
			}
		
			if (dto.isDobModified()) {
				stmt.setString( index++, dto.getDob() );
			}
		
			if (dto.isNationalityModified()) {
				stmt.setString( index++, dto.getNationality() );
			}
		
			if (dto.isGenderModified()) {
				stmt.setString( index++, dto.getGender() );
			}
		
			if (dto.isCityModified()) {
				stmt.setString( index++, dto.getCity() );
			}
		
			if (dto.isStateModified()) {
				stmt.setString( index++, dto.getState() );
			}
		
			if (dto.isCountryModified()) {
				stmt.setString( index++, dto.getCountry() );
			}
		
			if (dto.isPincodeModified()) {
				stmt.setString( index++, dto.getPincode() );
			}
		
			if (dto.isAppliedProgrammeModified()) {
				stmt.setString( index++, dto.getAppliedProgramme() );
			}
		
			if (dto.isFirstChoiceModified()) {
				stmt.setString( index++, dto.getFirstChoice() );
			}
		
			if (dto.isSecondChoiceModified()) {
				stmt.setString( index++, dto.getSecondChoice() );
			}
		
			if (dto.isThirdChoiceModified()) {
				stmt.setString( index++, dto.getThirdChoice() );
			}
		
			if (dto.isFatherNameModified()) {
				stmt.setString( index++, dto.getFatherName() );
			}
		
			if (dto.isFatherPhoneModified()) {
				stmt.setString( index++, dto.getFatherPhone() );
			}
		
			if (dto.isFatherEmailModified()) {
				stmt.setString( index++, dto.getFatherEmail() );
			}
		
			if (dto.isMotherNameModified()) {
				stmt.setString( index++, dto.getMotherName() );
			}
		
			if (dto.isMotherPhoneModified()) {
				stmt.setString( index++, dto.getMotherPhone() );
			}
		
			if (dto.isMotherEmailModified()) {
				stmt.setString( index++, dto.getMotherEmail() );
			}
		
			if (dto.isCurrentAddressModified()) {
				stmt.setString( index++, dto.getCurrentAddress() );
			}
		
			if (dto.isPinCodeModified()) {
				stmt.setString( index++, dto.getPinCode() );
			}
		
			if (dto.isLandlinePhoneModified()) {
				stmt.setString( index++, dto.getLandlinePhone() );
			}
		
			if (dto.isGuardianAddressModified()) {
				stmt.setString( index++, dto.getGuardianAddress() );
			}
		
			if (dto.isGuardianPhoneModified()) {
				stmt.setString( index++, dto.getGuardianPhone() );
			}
		
			if (dto.isGuardianEmailModified()) {
				stmt.setString( index++, dto.getGuardianEmail() );
			}
		
			if (dto.isCreatedByModified()) {
				stmt.setString( index++, dto.getCreatedBy() );
			}
		
			if (dto.isModifiedByModified()) {
				stmt.setString( index++, dto.getModifiedBy() );
			}
		
			if (dto.isCreatedDateModified()) {
				stmt.setTimestamp(index++, dto.getCreatedDate()==null ? null : new java.sql.Timestamp( dto.getCreatedDate().getTime() ) );
			}
		
			if (dto.isModifiedDateModified()) {
				stmt.setTimestamp(index++, dto.getModifiedDate()==null ? null : new java.sql.Timestamp( dto.getModifiedDate().getTime() ) );
			}
		
			if (dto.isRemarkModified()) {
				stmt.setString( index++, dto.getRemark() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PersonalDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the personal_details table.
	 */
	public void update(PersonalDetailsPk pk, PersonalDetails dto) throws PersonalDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "id=?" );
				modified=true;
			}
		
			if (dto.isFullNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "full_name=?" );
				modified=true;
			}
		
			if (dto.isEmailIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "email_id=?" );
				modified=true;
			}
		
			if (dto.isMobileNumberModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mobile_number=?" );
				modified=true;
			}
		
			if (dto.isDobModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "dob=?" );
				modified=true;
			}
		
			if (dto.isNationalityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nationality=?" );
				modified=true;
			}
		
			if (dto.isGenderModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "gender=?" );
				modified=true;
			}
		
			if (dto.isCityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "city=?" );
				modified=true;
			}
		
			if (dto.isStateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "state=?" );
				modified=true;
			}
		
			if (dto.isCountryModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "country=?" );
				modified=true;
			}
		
			if (dto.isPincodeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "pincode=?" );
				modified=true;
			}
		
			if (dto.isAppliedProgrammeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "applied_programme=?" );
				modified=true;
			}
		
			if (dto.isFirstChoiceModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "first_choice=?" );
				modified=true;
			}
		
			if (dto.isSecondChoiceModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "second_choice=?" );
				modified=true;
			}
		
			if (dto.isThirdChoiceModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "third_choice=?" );
				modified=true;
			}
		
			if (dto.isFatherNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "father_name=?" );
				modified=true;
			}
		
			if (dto.isFatherPhoneModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "father_phone=?" );
				modified=true;
			}
		
			if (dto.isFatherEmailModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "father_email=?" );
				modified=true;
			}
		
			if (dto.isMotherNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mother_name=?" );
				modified=true;
			}
		
			if (dto.isMotherPhoneModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mother_phone=?" );
				modified=true;
			}
		
			if (dto.isMotherEmailModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "mother_email=?" );
				modified=true;
			}
		
			if (dto.isCurrentAddressModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "current_address=?" );
				modified=true;
			}
		
			if (dto.isPinCodeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "pin_code=?" );
				modified=true;
			}
		
			if (dto.isLandlinePhoneModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "landline_phone=?" );
				modified=true;
			}
		
			if (dto.isGuardianAddressModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "guardian_address=?" );
				modified=true;
			}
		
			if (dto.isGuardianPhoneModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "guardian_phone=?" );
				modified=true;
			}
		
			if (dto.isGuardianEmailModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "guardian_email=?" );
				modified=true;
			}
		
			if (dto.isCreatedByModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "created_by=?" );
				modified=true;
			}
		
			if (dto.isModifiedByModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "modified_by=?" );
				modified=true;
			}
		
			if (dto.isCreatedDateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "created_date=?" );
				modified=true;
			}
		
			if (dto.isModifiedDateModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "modified_date=?" );
				modified=true;
			}
		
			if (dto.isRemarkModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "remark=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE id=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdModified()) {
				stmt.setInt( index++, dto.getId() );
			}
		
			if (dto.isFullNameModified()) {
				stmt.setString( index++, dto.getFullName() );
			}
		
			if (dto.isEmailIdModified()) {
				stmt.setString( index++, dto.getEmailId() );
			}
		
			if (dto.isMobileNumberModified()) {
				stmt.setString( index++, dto.getMobileNumber() );
			}
		
			if (dto.isDobModified()) {
				stmt.setString( index++, dto.getDob() );
			}
		
			if (dto.isNationalityModified()) {
				stmt.setString( index++, dto.getNationality() );
			}
		
			if (dto.isGenderModified()) {
				stmt.setString( index++, dto.getGender() );
			}
		
			if (dto.isCityModified()) {
				stmt.setString( index++, dto.getCity() );
			}
		
			if (dto.isStateModified()) {
				stmt.setString( index++, dto.getState() );
			}
		
			if (dto.isCountryModified()) {
				stmt.setString( index++, dto.getCountry() );
			}
		
			if (dto.isPincodeModified()) {
				stmt.setString( index++, dto.getPincode() );
			}
		
			if (dto.isAppliedProgrammeModified()) {
				stmt.setString( index++, dto.getAppliedProgramme() );
			}
		
			if (dto.isFirstChoiceModified()) {
				stmt.setString( index++, dto.getFirstChoice() );
			}
		
			if (dto.isSecondChoiceModified()) {
				stmt.setString( index++, dto.getSecondChoice() );
			}
		
			if (dto.isThirdChoiceModified()) {
				stmt.setString( index++, dto.getThirdChoice() );
			}
		
			if (dto.isFatherNameModified()) {
				stmt.setString( index++, dto.getFatherName() );
			}
		
			if (dto.isFatherPhoneModified()) {
				stmt.setString( index++, dto.getFatherPhone() );
			}
		
			if (dto.isFatherEmailModified()) {
				stmt.setString( index++, dto.getFatherEmail() );
			}
		
			if (dto.isMotherNameModified()) {
				stmt.setString( index++, dto.getMotherName() );
			}
		
			if (dto.isMotherPhoneModified()) {
				stmt.setString( index++, dto.getMotherPhone() );
			}
		
			if (dto.isMotherEmailModified()) {
				stmt.setString( index++, dto.getMotherEmail() );
			}
		
			if (dto.isCurrentAddressModified()) {
				stmt.setString( index++, dto.getCurrentAddress() );
			}
		
			if (dto.isPinCodeModified()) {
				stmt.setString( index++, dto.getPinCode() );
			}
		
			if (dto.isLandlinePhoneModified()) {
				stmt.setString( index++, dto.getLandlinePhone() );
			}
		
			if (dto.isGuardianAddressModified()) {
				stmt.setString( index++, dto.getGuardianAddress() );
			}
		
			if (dto.isGuardianPhoneModified()) {
				stmt.setString( index++, dto.getGuardianPhone() );
			}
		
			if (dto.isGuardianEmailModified()) {
				stmt.setString( index++, dto.getGuardianEmail() );
			}
		
			if (dto.isCreatedByModified()) {
				stmt.setString( index++, dto.getCreatedBy() );
			}
		
			if (dto.isModifiedByModified()) {
				stmt.setString( index++, dto.getModifiedBy() );
			}
		
			if (dto.isCreatedDateModified()) {
				stmt.setTimestamp(index++, dto.getCreatedDate()==null ? null : new java.sql.Timestamp( dto.getCreatedDate().getTime() ) );
			}
		
			if (dto.isModifiedDateModified()) {
				stmt.setTimestamp(index++, dto.getModifiedDate()==null ? null : new java.sql.Timestamp( dto.getModifiedDate().getTime() ) );
			}
		
			if (dto.isRemarkModified()) {
				stmt.setString( index++, dto.getRemark() );
			}
		
			stmt.setInt( index++, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PersonalDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the personal_details table.
	 */
	public void delete(PersonalDetailsPk pk) throws PersonalDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PersonalDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the personal_details table that matches the specified primary-key value.
	 */
	public PersonalDetails findByPrimaryKey(PersonalDetailsPk pk) throws PersonalDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'id = :id'.
	 */
	public PersonalDetails findByPrimaryKey(int id) throws PersonalDetailsDaoException
	{
		PersonalDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria ''.
	 */
	public PersonalDetails[] findAll() throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'id = :id'.
	 */
	public PersonalDetails[] findWhereIdEquals(int id) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'full_name = :fullName'.
	 */
	public PersonalDetails[] findWhereFullNameEquals(String fullName) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE full_name = ? ORDER BY full_name", new Object[] { fullName } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'email_id = :emailId'.
	 */
	public PersonalDetails[] findWhereEmailIdEquals(String emailId) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email_id = ? ORDER BY email_id", new Object[] { emailId } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mobile_number = :mobileNumber'.
	 */
	public PersonalDetails[] findWhereMobileNumberEquals(String mobileNumber) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mobile_number = ? ORDER BY mobile_number", new Object[] { mobileNumber } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'dob = :dob'.
	 */
	public PersonalDetails[] findWhereDobEquals(String dob) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dob = ? ORDER BY dob", new Object[] { dob } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'nationality = :nationality'.
	 */
	public PersonalDetails[] findWhereNationalityEquals(String nationality) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nationality = ? ORDER BY nationality", new Object[] { nationality } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'gender = :gender'.
	 */
	public PersonalDetails[] findWhereGenderEquals(String gender) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE gender = ? ORDER BY gender", new Object[] { gender } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'city = :city'.
	 */
	public PersonalDetails[] findWhereCityEquals(String city) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE city = ? ORDER BY city", new Object[] { city } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'state = :state'.
	 */
	public PersonalDetails[] findWhereStateEquals(String state) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE state = ? ORDER BY state", new Object[] { state } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'country = :country'.
	 */
	public PersonalDetails[] findWhereCountryEquals(String country) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE country = ? ORDER BY country", new Object[] { country } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'pincode = :pincode'.
	 */
	public PersonalDetails[] findWherePincodeEquals(String pincode) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pincode = ? ORDER BY pincode", new Object[] { pincode } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'applied_programme = :appliedProgramme'.
	 */
	public PersonalDetails[] findWhereAppliedProgrammeEquals(String appliedProgramme) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE applied_programme = ? ORDER BY applied_programme", new Object[] { appliedProgramme } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'first_choice = :firstChoice'.
	 */
	public PersonalDetails[] findWhereFirstChoiceEquals(String firstChoice) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE first_choice = ? ORDER BY first_choice", new Object[] { firstChoice } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'second_choice = :secondChoice'.
	 */
	public PersonalDetails[] findWhereSecondChoiceEquals(String secondChoice) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE second_choice = ? ORDER BY second_choice", new Object[] { secondChoice } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'third_choice = :thirdChoice'.
	 */
	public PersonalDetails[] findWhereThirdChoiceEquals(String thirdChoice) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE third_choice = ? ORDER BY third_choice", new Object[] { thirdChoice } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'father_name = :fatherName'.
	 */
	public PersonalDetails[] findWhereFatherNameEquals(String fatherName) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE father_name = ? ORDER BY father_name", new Object[] { fatherName } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'father_phone = :fatherPhone'.
	 */
	public PersonalDetails[] findWhereFatherPhoneEquals(String fatherPhone) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE father_phone = ? ORDER BY father_phone", new Object[] { fatherPhone } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'father_email = :fatherEmail'.
	 */
	public PersonalDetails[] findWhereFatherEmailEquals(String fatherEmail) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE father_email = ? ORDER BY father_email", new Object[] { fatherEmail } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mother_name = :motherName'.
	 */
	public PersonalDetails[] findWhereMotherNameEquals(String motherName) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mother_name = ? ORDER BY mother_name", new Object[] { motherName } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mother_phone = :motherPhone'.
	 */
	public PersonalDetails[] findWhereMotherPhoneEquals(String motherPhone) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mother_phone = ? ORDER BY mother_phone", new Object[] { motherPhone } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'mother_email = :motherEmail'.
	 */
	public PersonalDetails[] findWhereMotherEmailEquals(String motherEmail) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mother_email = ? ORDER BY mother_email", new Object[] { motherEmail } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'current_address = :currentAddress'.
	 */
	public PersonalDetails[] findWhereCurrentAddressEquals(String currentAddress) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE current_address = ? ORDER BY current_address", new Object[] { currentAddress } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'pin_code = :pinCode'.
	 */
	public PersonalDetails[] findWherePinCodeEquals(String pinCode) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pin_code = ? ORDER BY pin_code", new Object[] { pinCode } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'landline_phone = :landlinePhone'.
	 */
	public PersonalDetails[] findWhereLandlinePhoneEquals(String landlinePhone) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE landline_phone = ? ORDER BY landline_phone", new Object[] { landlinePhone } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'guardian_address = :guardianAddress'.
	 */
	public PersonalDetails[] findWhereGuardianAddressEquals(String guardianAddress) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE guardian_address = ? ORDER BY guardian_address", new Object[] { guardianAddress } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'guardian_phone = :guardianPhone'.
	 */
	public PersonalDetails[] findWhereGuardianPhoneEquals(String guardianPhone) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE guardian_phone = ? ORDER BY guardian_phone", new Object[] { guardianPhone } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'guardian_email = :guardianEmail'.
	 */
	public PersonalDetails[] findWhereGuardianEmailEquals(String guardianEmail) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE guardian_email = ? ORDER BY guardian_email", new Object[] { guardianEmail } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'created_by = :createdBy'.
	 */
	public PersonalDetails[] findWhereCreatedByEquals(String createdBy) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE created_by = ? ORDER BY created_by", new Object[] { createdBy } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'modified_by = :modifiedBy'.
	 */
	public PersonalDetails[] findWhereModifiedByEquals(String modifiedBy) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE modified_by = ? ORDER BY modified_by", new Object[] { modifiedBy } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'created_date = :createdDate'.
	 */
	public PersonalDetails[] findWhereCreatedDateEquals(Date createdDate) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE created_date = ? ORDER BY created_date", new Object[] { createdDate==null ? null : new java.sql.Timestamp( createdDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'modified_date = :modifiedDate'.
	 */
	public PersonalDetails[] findWhereModifiedDateEquals(Date modifiedDate) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE modified_date = ? ORDER BY modified_date", new Object[] { modifiedDate==null ? null : new java.sql.Timestamp( modifiedDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the personal_details table that match the criteria 'remark = :remark'.
	 */
	public PersonalDetails[] findWhereRemarkEquals(String remark) throws PersonalDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE remark = ? ORDER BY remark", new Object[] { remark } );
	}

	/**
	 * Method 'PersonalDetailsDaoImpl'
	 * 
	 */
	public PersonalDetailsDaoImpl()
	{
	}

	/**
	 * Method 'PersonalDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public PersonalDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "iijnmdb.personal_details";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PersonalDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PersonalDetails dto = new PersonalDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PersonalDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PersonalDetails dto = new PersonalDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PersonalDetails ret[] = new PersonalDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PersonalDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setFullName( rs.getString( COLUMN_FULL_NAME ) );
		dto.setEmailId( rs.getString( COLUMN_EMAIL_ID ) );
		dto.setMobileNumber( rs.getString( COLUMN_MOBILE_NUMBER ) );
		dto.setDob( rs.getString( COLUMN_DOB ) );
		dto.setNationality( rs.getString( COLUMN_NATIONALITY ) );
		dto.setGender( rs.getString( COLUMN_GENDER ) );
		dto.setCity( rs.getString( COLUMN_CITY ) );
		dto.setState( rs.getString( COLUMN_STATE ) );
		dto.setCountry( rs.getString( COLUMN_COUNTRY ) );
		dto.setPincode( rs.getString( COLUMN_PINCODE ) );
		dto.setAppliedProgramme( rs.getString( COLUMN_APPLIED_PROGRAMME ) );
		dto.setFirstChoice( rs.getString( COLUMN_FIRST_CHOICE ) );
		dto.setSecondChoice( rs.getString( COLUMN_SECOND_CHOICE ) );
		dto.setThirdChoice( rs.getString( COLUMN_THIRD_CHOICE ) );
		dto.setFatherName( rs.getString( COLUMN_FATHER_NAME ) );
		dto.setFatherPhone( rs.getString( COLUMN_FATHER_PHONE ) );
		dto.setFatherEmail( rs.getString( COLUMN_FATHER_EMAIL ) );
		dto.setMotherName( rs.getString( COLUMN_MOTHER_NAME ) );
		dto.setMotherPhone( rs.getString( COLUMN_MOTHER_PHONE ) );
		dto.setMotherEmail( rs.getString( COLUMN_MOTHER_EMAIL ) );
		dto.setCurrentAddress( rs.getString( COLUMN_CURRENT_ADDRESS ) );
		dto.setPinCode( rs.getString( COLUMN_PIN_CODE ) );
		dto.setLandlinePhone( rs.getString( COLUMN_LANDLINE_PHONE ) );
		dto.setGuardianAddress( rs.getString( COLUMN_GUARDIAN_ADDRESS ) );
		dto.setGuardianPhone( rs.getString( COLUMN_GUARDIAN_PHONE ) );
		dto.setGuardianEmail( rs.getString( COLUMN_GUARDIAN_EMAIL ) );
		dto.setCreatedBy( rs.getString( COLUMN_CREATED_BY ) );
		dto.setModifiedBy( rs.getString( COLUMN_MODIFIED_BY ) );
		dto.setCreatedDate( rs.getTimestamp(COLUMN_CREATED_DATE ) );
		dto.setModifiedDate( rs.getTimestamp(COLUMN_MODIFIED_DATE ) );
		dto.setRemark( rs.getString( COLUMN_REMARK ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PersonalDetails dto)
	{
		dto.setIdModified( false );
		dto.setFullNameModified( false );
		dto.setEmailIdModified( false );
		dto.setMobileNumberModified( false );
		dto.setDobModified( false );
		dto.setNationalityModified( false );
		dto.setGenderModified( false );
		dto.setCityModified( false );
		dto.setStateModified( false );
		dto.setCountryModified( false );
		dto.setPincodeModified( false );
		dto.setAppliedProgrammeModified( false );
		dto.setFirstChoiceModified( false );
		dto.setSecondChoiceModified( false );
		dto.setThirdChoiceModified( false );
		dto.setFatherNameModified( false );
		dto.setFatherPhoneModified( false );
		dto.setFatherEmailModified( false );
		dto.setMotherNameModified( false );
		dto.setMotherPhoneModified( false );
		dto.setMotherEmailModified( false );
		dto.setCurrentAddressModified( false );
		dto.setPinCodeModified( false );
		dto.setLandlinePhoneModified( false );
		dto.setGuardianAddressModified( false );
		dto.setGuardianPhoneModified( false );
		dto.setGuardianEmailModified( false );
		dto.setCreatedByModified( false );
		dto.setModifiedByModified( false );
		dto.setCreatedDateModified( false );
		dto.setModifiedDateModified( false );
		dto.setRemarkModified( false );
	}

	/** 
	 * Returns all rows from the personal_details table that match the specified arbitrary SQL statement
	 */
	public PersonalDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws PersonalDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PersonalDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the personal_details table that match the specified arbitrary SQL statement
	 */
	public PersonalDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws PersonalDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PersonalDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
